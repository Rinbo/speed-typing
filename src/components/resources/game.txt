const hello = () => {
const aMuchLongerFunctionName = (one, two) => {
console.log(one+two);
"builder": "@angular-devkit/build-angular:browser",
"angular-address-book": {
"outputPath": "dist/angular-address-book",
"index": "src/index.html",
"main": "src/main.ts",
"polyfills": "src/polyfills.ts",
"tsConfig": "src/tsconfig.app.json",
"fileReplacements": [
"with": "src/environments/environment.prod.ts"
"replace": "src/environments/environment.ts",
"builder": "@angular-devkit/build-angular:dev-server",
"builder": "@angular-devkit/build-angular:extract-i18n",
"builder": "@angular-devkit/build-angular:karma",
"main": "src/test.ts",
"polyfills": "src/polyfills.ts",
"tsConfig": "src/tsconfig.spec.json",
"builder": "@angular-devkit/build-angular:tslint",
"src/tsconfig.app.json",
"src/tsconfig.spec.json"
"builder": "@angular-devkit/build-angular:protractor",
"angular-address-book-e2e": {
"karmaConfig": "src/karma.conf.js",
"protractorConfig": "e2e/protractor.conf.js",
"builder": "@angular-devkit/build-angular:tslint",
"tsConfig": "e2e/tsconfig.e2e.json",
"@angular/common": "^6.1.0",
"@angular/animations": "^6.1.0",
"@angular/compiler": "^6.1.0",
"@angular/core": "^6.1.0",
"@angular/forms": "^6.1.0",
"@angular/platform-browser": "^6.1.0",
"@angular/platform-browser-dynamic": "^6.1.0",
"@angular/router": "^6.1.0",
"@angular-devkit/build-angular": "~0.8.0",
"@angular/cli": "~6.2.4",
"@angular/compiler-cli": "^6.1.0",
"@angular/language-service": "^6.1.0",
"@types/jasmine": "~2.8.8",
"@types/node": "~8.9.4",
"@types/jasminewd2": "~2.0.3",
"import-blacklist": [
"node_modules/codelyzer"
"no-inferrable-types": [
"typedef-whitespace": [
"main": "src/app.js",
"index.html": "/company-registry-react/index.html",
path: `${__dirname}/dist`
entry: "./src/app.js",
exclude: /node_modules/,
"outDir": "./dist/out-tsc",
"node_modules/@types"
"type": "image/x-icon"
"@material-ui/icons": "^3.0.1",
"@material-ui/core": "^3.5.1",
"url": "/company-registry-react/index.html"
self.__precacheManifest = [
workbox.clientsClaim();
workbox.precaching.suppressWarnings();
blacklist: [/^\/_/,/\/[^\/]+\.[^\/]+$/],
const puppeteer = require('puppeteer');
class BrowserHelpers {
await this.newBrowser()
this.browser = await puppeteer.launch(options)
async visitPage(url) {
this.page = await this.browser.newPage()
return await this.page.goto(url)
async fillIn(selector, options) {
await this.browser.close()
await this.inputElement.type(options.with)
this.inputElement = await this.page.$(selector)
async clickOnButton(selector) {
await this.page.evaluate((selector) => {
document.querySelector(selector).click();
async getElement(element) {
async getContent(element) {
const requestedElement = await this.page.$$(element)
async selectOption(selector, options){
await this.page.select(selector, options.option);
async selectCheckBox(element) {
async selectRadioButton(element) {
await this.page.click(element);
await this.page.click(element);
async takeScreenshot(){
await this.page.screenshot({path: 'screenshot.png'});
async debugTheCode() {
await this.page.evaluate(() => {debugger;});
"@material-ui/core": "latest",
"@rails/webpacker": "3.5",
"@rails/webpacker": "3.5",
if (number % 3 == 0) {
if (number % 15 == 0) {
console.log("fizzbuzz")
const fs = require("fs");
const path = require("path");
} else if (number % 5 == 0) {
lib.baseDir = path.join(__dirname, "./");
lib.searchDir = path.join(__dirname, "../");
lib.create = function(dir, file, data, callback) {
if (!err && fileDesciptor) {
fs.writeFile(fileDesciptor, data, function(err) {
fs.close(fileDesciptor, function(err) {
callback("Could not close the file");
callback("Error writing to file");
lib.read = function(dir, file, callback) {
`${lib.searchDir}/${dir == null ? "" : dir + "/"}${file}`,
function(err, data) {
} else callback(err, data);
callback(false, data);
lib.update = function(dir, file, data, callback) {
if (!err && fileDesciptor) {
fs.writeFile(fileDesciptor, data, function(err) {
fs.close(fileDesciptor, function(err) {
callback("Error closing the file");
callback("Could not write to file");
lib.listDirectoryContent = function(dir, callback) {
`${lib.searchDir}/${dir == null ? "" : dir + "/"}`,
{ encoding: "utf8", withFileTypes: true },
function(err, data) {
if (!err && data && data.length > 0) {
data.forEach(element => {
content.push(element);
callback(false, content);
lib.listFiles = function(dir, callback) {
fs.readdir(`${lib.baseDir}/${dir}/`, function(err, data) {
if (!err && data && data.length > 0) {
const trimmedFileNames = [];
data.forEach(fileName => {
trimmedFileNames.push(fileName.replace(".json", ""));
callback(false, trimmedFileNames);
dirContentL1.forEach(elementL1 => {
const fileSystem = require("./data");
fileSystem.read(null, elementL1.name, (err, data) => {
if (elementL1.name.match(".js")) {
appendToOutputFile(data);
if (elementL1.isFile()) {
console.log(err, "unable to read from file [level 1]");
dirContentL2.forEach(elementL2 => {
if (elementL2.isFile()) {
if (elementL2.name.match(".js")) {
appendToOutputFile(data);
console.log(err, "unable to read from file [level 1]");
fileSystem.listDirectoryContent(
elementL1.name + "/" + elementL2.name,
(err, dirContentL3) => {
dirContentL3.forEach(elementL3 => {
if (elementL3.isFile()) {
if (elementL3.name.match(".js")) {
elementL1.name + "/" + elementL2.name,
appendToOutputFile(data);
"unable to read from file [level 1]"
console.log("Maximum depth level reached");
"Unable to read from directory [Level3]"
const appendToOutputFile = data => {
data.split("\n").forEach(line => {
fileSystem.update("data", "output", line + "\n", err => {
console.log("Success");
line.match(/([/(){}[\]])/) &&
console.log(err, "Bummer!");
"test": "karma start ./test-config/karma.conf.js",
"e2e-test": "protractor ./test-config/protractor.conf.js",
"@angular/animations": "5.2.11",
"@angular/common": "5.2.11",
"@angular/compiler": "5.2.11",
"@angular/compiler-cli": "5.2.11",
"@angular/core": "5.2.11",
"@angular/forms": "5.2.11",
"@angular/platform-browser": "5.2.11",
"@ionic-native/core": "~4.15.0",
"@ionic-native/splash-screen": "~4.15.0",
"@angular/platform-browser-dynamic": "5.2.11",
"@ionic-native/status-bar": "~4.15.0",
"@ionic/pro": "2.0.3",
"@ionic/storage": "2.2.0",
"@types/jasmine": "^2.8.9",
"@ionic/app-scripts": "3.2.0",
"@types/node": "^10.11.7",
"cordova-plugin-statusbar": {},
"cordova-plugin-whitelist": {},
"cordova-plugin-device": {},
"cordova-plugin-splashscreen": {},
"cordova-plugin-ionic-webview": {},
"cordova-plugin-ionic-keyboard": {}
"src/**/__tests__/*.ts"
"node_modules/tslint-eslint-rules/dist/rules"
"no-unused-variable": [
const math = require("mathjs");
"javascript-natural-sort": {
console.log(n.toString());
n = math.parse("not toto");
let secretMessage = animals.map(animal => animal[0]);
Airplane.availableAirplanes = [
let bigNumbers = [100, 200, 300, 400, 500];
console.log(secretMessage.join(''));
let smallNumbers = bigNumbers.map(number => number/100);
console.log(smallNumbers)
let fruits = ['mango', 'papaya', 'pineapple', 'apple'];
let randomNumbers = [375, 200, 3.14, 7, 13, 852];
console.log(smallNumbers);
console.log(longFavoriteWords)
console.log(words.some(function(word) {
console.log(interestingWords)
let nums = [1, 50, 75, 200, 350, 525, 1000];
let longCities = cities.filter(city => city.length > 7);
nums.some(num => num < 0);
let smallerNums = nums.map(num => num - 5);
get remainingVacationDays(){
constructor(name, department) {
takeVacationDays(daysOff) {
const surgeonDurant = new Surgeon('Durant', 'Orthopedics');
class HospitalEmployee {
return Math.floor(Math.random() * 10000);
get remainingVacationDays(){
static generatePassword() {
takeVacationDays(daysOff){
class Nurse extends HospitalEmployee {
get certifications(){
constructor(name, certifications) {
addCertification(newCertification){
this._certifications.push(newCertification);
nurseOlynyk.takeVacationDays(5);
console.log(nurseOlynyk.remainingVacationDays);
nurseOlynyk.addCertification("Genetics");
console.log(nurseOlynyk.certifications)
console.log(Nurse.generatePassword())
const takeOrder = (topping, crustType) => {
takeOrder('mushroom', 'thin crust');
takeOrder('spinach', 'whole wheat');
takeOrder('pepperoni', 'brooklyn style');
const getTax = (itemCount) => {
const getSubTotal = (itemCount) => {
return getSubTotal(itemCount) * 0.06;
const result = getSubTotal(itemCount) + getTax(itemCount);
console.log(getTotal(orderCount));
const getTotal = (itemCount) => {
function isGreaterThan(numberOne, numberTwo) {
if (numberOne > numberTwo) {
console.log(isGreaterThan(3, 4))
const isGreaterThan = (numberOne, numberTwo) =>{
if(numberOne > numberTwo){
console.log(isGreaterThan(4, 8))
console.log(userQuestion);
let randomNumber = Math.floor(Math.random() * 8);
switch (randomNumber) {
console.log(typeof(123));
console.log(eightBall);
console.log(typeof("Hello"));
console.log(typeof(123/3));
console.log(typeof(undefined));
if (language == "English"){
console.log("Hellööuu");
} else if (language == "American"){
console.log("Howdy!");
console.log("Mumble muble");
myArray = ['Thomas', 'Amber', 'Raoul']
emptyArray[i] = myArray[i];
console.log(emptyArray)
document.addEventListener("click", function() {
document.getElementsByTagName("h1")[0].innerHTML = name;
typeof(123/12) => 'number'
typeof("Hello") => 'string'
typeof(undefined) 'undefined'
myArray = ['Thomas', 'Amber', 'Raoul']
for (let i = 0; i<myArray.length; i++)  {
console.log(emptyArray)
emptyArray.push(myArray[i])
setName(first, last) {
constructor(first, last) {
return `${this.first} ${this.last}`;
let betterWords = storyWords.filter(function(word) {
let storyWords = story.split(" ");
robin.setName("Bob", "Bobson");
let overusedWords = ['really', 'very', 'basically'];
for (i = 0; i < overusedWords.length; i++) {
if (word === overusedWords[i]) {
let betterWords = storyWords.filter(function(word){
for (word of storyWords) {
return !unnecessaryWords.includes(word)
} else if (word === "very") {
if (word === "really") {
} else if (word === "basically") {
storyWords.forEach(function(word){
console.log("Number of words: " + storyWords.length);
console.log("Number of sentences: " + sentenceCount);
console.log(betterWords.join(" "));
let rob = function (){
return 1/Math.sqrt(x +n);
let bor = function() {
let fn = function(x, y) {
console.log(fn(rob(), bor()));
let privateFn = function(first,last) {
function Person(first, last) {
this.setName = function(first, last){
Person.prototype.fullName = function() {
console.log(snorre.fullName());
snorre.setName("Rolle", "Bolle");
console.log(snorre.fullName());
function newFunction() {
this.myFunc1 = function () {
return console.log("Hallå!!");
timer = setTimeout("myFunc1()", 3000);
import Airplane from './airplane';
Airplane.availableAirplanes.forEach(function(element){
function displayFuelCapacity() {
let availableAirplanes = [
displayFuelCapacity();
availableStaff: ['pilots', 'flightAttendants']
let flightRequirements = {requiredStaff: 4};
function displayFuelCapacity() {
if (availableStaff.length >= requiredStaff){
availableAirplanes.forEach(function(element){
displayFuelCapacity();
function displayStaffStatus() {
availableAirplanes.forEach(function(element){
if (runnerAge > 18 && registerEarly){
let raceNumber = Math.floor(Math.random() * 1000);
if (runnerAge > 18 && registerEarly) {
console.log("Please see the registration disk");
} else if (runnerAge > 18 && !registerEarly){
} else if (runnerAge < 18) {
const willIGetTreat = new Promise(
(resolve, reject) => {
const reason = new Error('dog is not happy, at all!');
const happyDog = function (treat) {
return Promise.resolve(message);
const askForTreat = function () {
.then(fulfilled => console.log(fulfilled))
.catch(error => console.log(error.message));
"builder": "@angular-devkit/build-angular:browser",
"outputPath": "dist/new-app",
"index": "src/index.html",
"main": "src/main.ts",
"polyfills": "src/polyfills.ts",
"tsConfig": "src/tsconfig.app.json",
"fileReplacements": [
"replace": "src/environments/environment.ts",
"builder": "@angular-devkit/build-angular:dev-server",
"with": "src/environments/environment.prod.ts"
"builder": "@angular-devkit/build-angular:extract-i18n",
"main": "src/test.ts",
"builder": "@angular-devkit/build-angular:karma",
"tsConfig": "src/tsconfig.spec.json",
"karmaConfig": "src/karma.conf.js",
"polyfills": "src/polyfills.ts",
"builder": "@angular-devkit/build-angular:tslint",
"src/tsconfig.app.json",
"src/tsconfig.spec.json"
"builder": "@angular-devkit/build-angular:protractor",
"builder": "@angular-devkit/build-angular:tslint",
"protractorConfig": "e2e/protractor.conf.js",
"tsConfig": "e2e/tsconfig.e2e.json",
"@angular/common": "^6.1.0",
"@angular/animations": "^6.1.0",
"@angular/compiler": "^6.1.0",
"@angular/core": "^6.1.0",
"@angular/platform-browser": "^6.1.0",
"@angular/forms": "^6.1.0",
"@angular/platform-browser-dynamic": "^6.1.0",
"@angular/router": "^6.1.0",
"@angular-devkit/build-angular": "~0.8.0",
"@angular/cli": "~6.2.4",
"@angular/compiler-cli": "^6.1.0",
"@types/jasmine": "~2.8.8",
"@angular/language-service": "^6.1.0",
"@types/jasminewd2": "~2.0.3",
"@types/node": "~8.9.4",
"outDir": "./dist/out-tsc",
"node_modules/codelyzer"
"import-blacklist": [
"node_modules/@types"
"no-inferrable-types": [
"typedef-whitespace": [
const cluster = require("cluster");
const parsedUrl = url.parse(req.url, true);
const os = require("os");
const url = require("url");
const trimmedPath = path.replace(/^\/+|\/+$/g, "");
chosenHandler(function(statusCode) {
res.setHeader("Content-Type", "application/json");
res.writeHead(statusCode);
const payloadString = JSON.stringify(payload);
for (var i = 0; i < os.cpus().length; i++) {
if (cluster.isMaster) {
server.listen(3000, function() {
console.log("Listening on port 3000");
res.end(payloadString);
handler.hello = function(callback) {
return callback(200);
handler.notFound = function(callback) {
return callback(404);
const server = require("./lib/server");
app.init = function() {
const workers = require("./lib/workers");
const server = require("./lib/server");
app.init = function(callback) {
const cli = require("./lib/cli");
setTimeout(function() {
if (require.main === module) {
app.init(function() {});
this.state = {userInput: ""};
this.handleUserInput = this.handleUserInput.bind(this);
export class Input extends React.Component {
this.setState({userInput: e.target.value});
<h1>{this.state.userInput}</h1>
document.getElementById('app')
export class Child extends React.Component {
this.handleChange = this.handleChange.bind(this);
this.props.onChange(name);
onChange={this.handleChange}>
<option value="Frarthur">Frarthur</option>
<option value="Gromulus">Gromulus</option>
<option value="Thinkpiece">Thinkpiece</option>
<h1>Hey, my name is {name}!</h1>
<h2>Don't you think {name} is the prettiest name ever?</h2>
export class Sibling extends React.Component {
<h2>Sure am glad that my parents picked {name}!</h2>
import { Child } from './Child';
class Parent extends React.Component {
import { Sibling } from './Sibling';
this.state = { name: 'Frarthur' };
this.changeName = this.changeName.bind(this);
changeName(newName) {
<Child onChange={this.changeName} />
document.getElementById('app')
<Sibling name={this.state.name} />
class Toggle extends React.Component {
this.changeColor = this.changeColor.bind(this);
this.state = {color: green};
this.setState({ color: newColor });
<div style={{background: this.state.color}}>
<button onClick={this.changeColor}>
path: `${__dirname}/dist`
entry: "./src/app.js",
exclude: /node_modules/,
"repository": "git@github.com:Rinbo/RPS-js.git",
"@rails/webpacker": "3.5",
"extends": "../tsconfig.json",
const { SpecReporter } = require('jasmine-spec-reporter');
require('ts-node').register({
'./src/**/*.e2e-spec.ts'
"outDir": "../out-tsc/app",
module.exports = function (config) {
frameworks: ['jasmine', '@angular-devkit/build-angular'],
require('karma-chrome-launcher'),
require('karma-jasmine'),
require('karma-jasmine-html-reporter'),
require('karma-coverage-istanbul-reporter'),
coverageIstanbulReporter: {
require('@angular-devkit/build-angular/plugins/karma')
dir: require('path').join(__dirname, '../coverage'),
"extends": "../tsconfig.json",
browsers: ['Chrome'],
reporters: ['progress', 'kjhtml'],
reports: ['html', 'lcovonly'],
"outDir": "../out-tsc/spec",
"extends": "../tslint.json",
"component-selector": [
"directive-selector": [
document.getElementById('form').classList.toggle('hidden');
"extends": "../tsconfig.json",
function toggleForm() {
"outDir": "../out-tsc/app",
let div = document.querySelector('.contact-list');
const renderContacts = () => {
const sect = document.createElement('section');
const contacts = JSON.parse(storage.getItem('contacts'))
sect.classList.add('flex-col');
sect.classList.add('flex');
sect.classList.add('justify-start');
let sectChild = document.createElement('div')
<h3>${ contact.company }</h3>
<h2>${ contact.name }</h2>
contacts.forEach(contact => {
${ contact.email } | ${ contact.phone } |
sect.appendChild(sectChild)
<p>${ contact.notes }</p>
document.addEventListener('DOMContentLoaded', () => {
let clearMessage = document.querySelector('.contact-list');
addContactForm.addEventListener('submit', event => {
contacts.push(contact)
div.appendChild(sect)
} = addContactForm.elements
event.preventDefault()
document.getElementById('form').classList.add('hidden')
addContactForm.reset()
storage.setItem('contacts', JSON.stringify(contacts))
"type": "image/x-icon"
ReactDOM.render(<App />, document.getElementById("root"));
const { expect } = require('chai');
const BrowserHelpers = require('e2e_training_wheels')
const browser = new BrowserHelpers()
import App from "./components/App";
await browser.page.reload();
describe('User can calculate BMI', () => {
beforeEach(async () => {
it('by inputing his weight and height', async () => {
await browser.close();
await browser.clickOnButton("button")
const { Person, BMICalculator } = require('./spec.helper')
expect(content).to.eql('Your BMI is 27.76');
describe("BMICalculator Metric", function() {
person = new Person({weight: 90, height: 186});
beforeEach(function() {
calculator = new BMICalculator();
expect(person.bmiMessage).to.equal('Overweight');
calculator.metric_bmi(person);
expect(person.bmiValue).to.equal(26.01);
describe("BMICalculator Imperial", function() {
person = new Person({weight: 201, height: 74});
beforeEach(function() {
calculator.metric_bmi(person);
calculator = new BMICalculator();
expect(person.bmiValue).to.equal(25.80);
calculator.imperial_bmi(person);
calculator.imperial_bmi(person);
expect(person.bmiMessage).to.equal('Overweight');
describe("Metric Person", () => {
const { Person } = require('./spec.helper')
it("should have weight of 90", () => {
expect(person.weight).to.equal(90);
it("should have height of 186", () => {
let person = new Person({
expect(person.height).to.equal(186);
person.calculate_bmi("metric");
it("should calculate BMI value", () => {
it("should have a BMI Message", () => {
expect(person.bmiValue).to.equal(26.01);
expect(person.bmiMessage).to.equal('Overweight');
let person = new Person({
person.calculate_bmi("metric");
describe("Imperial Person", () => {
it("should have weight of 201", () => {
expect(person.weight).to.equal(201);
it("should have height of 74", () => {
it("should calculate BMI value", () => {
expect(person.height).to.equal(74);
expect(person.bmiValue).to.equal(25.80);
it("should have a BMI Message", () => {
person.calculate_bmi("imperial");
person.calculate_bmi("imperial");
expect(person.bmiMessage).to.equal('Overweight');
const chai = require('chai');
const fs = require('fs');
let calc = fs.readFileSync('./src/js/calculator.js');
let person = fs.readFileSync('./src/js/person.js');
import Index from './pages/index';
"type": "image/x-icon"
import * as serviceWorker from './serviceWorker';
serviceWorker.unregister();
const isLocalhost = Boolean(
window.location.hostname === '[::1]' ||
export function register(config) {
if (publicUrl.origin !== window.location.origin) {
window.addEventListener('load', () => {
checkValidServiceWorker(swUrl, config);
navigator.serviceWorker.ready.then(() => {
registerValidSW(swUrl, config);
function registerValidSW(swUrl, config) {
.then(registration => {
registration.onupdatefound = () => {
if (installingWorker == null) {
if (installingWorker.state === 'installed') {
installingWorker.onstatechange = () => {
if (navigator.serviceWorker.controller) {
if (config && config.onUpdate) {
config.onUpdate(registration);
if (config && config.onSuccess) {
console.log('Content is cached for offline use.');
config.onSuccess(registration);
const contentType = response.headers.get('content-type');
function checkValidServiceWorker(swUrl, config) {
navigator.serviceWorker.ready.then(registration => {
registration.unregister().then(() => {
registerValidSW(swUrl, config);
export function unregister() {
if ('serviceWorker' in navigator) {
window.location.reload();
navigator.serviceWorker.ready.then(registration => {
import purple from '@material-ui/core/colors/purple';
import green from '@material-ui/core/colors/green';
import CssBaseline from '@material-ui/core/CssBaseline';
registration.unregister();
const theme = createMuiTheme({
function withRoot(Component) {
function WithRoot(props) {
const { FizzBuzz } = require('../spec/spec.helper')
<Component {...props} />
const BrowserHelpers = require('e2e_training_wheels')
const browser = new BrowserHelpers()
<MuiThemeProvider theme={theme}>
beforeEach(async () => {
await browser.page.reload();
it('clicking on the "Check" button', async () => {
await browser.fillIn("input[id='value']", { with: "3" })
await browser.clickOnButton("input[value='Check']")
expect(content).to.eql('Fizz');
await browser.close();
await browser.fillIn("input[id='value']", { with: "5" })
it('clicking on the "Check" button', async () => {
await browser.clickOnButton("input[value='Check']")
it('clicking on the "Check" button', async () => {
await browser.clickOnButton("input[value='Check']")
await browser.fillIn("input[id='value']", { with: "15" })
expect(content).to.eql('FizzBuzz');
it('clicking on the "Check" button', async () => {
expect(content).to.eql('Buzz');
await browser.clickOnButton("input[value='Check']")
await browser.fillIn("input[id='value']", { with: "100" })
expect(content).to.eql('Buzz');
const { FizzBuzz } =  require('./spec.helper')
it('returns a number if no game rules are met', () => {
describe('Fizz Buzz', () => {
expect(fizzBuzz.check(1)).to.eql(1)
it('returns Fizz if number is divisible by 3', () => {
expect(fizzBuzz.check(3)).to.eql('Fizz')
it('returns Buzz if number is divisible by 5', () => {
expect(fizzBuzz.check(5)).to.eql('Buzz')
expect(fizzBuzz.check(15)).to.eql('FizzBuzz')
"name": "Debug (Launch)-Game<dotcom-game>",
"name": "Debug (Launch) - Current File",
"mainClass": "${file}"
"name": "Debug (Launch)-SimpleDotComTest<dotcom-game>",
const  chai = require('chai');
"name": "Debug (Launch)-App<dotcom>",
const  fs = require('fs');
"extends": "../tsconfig.json",
"outDir": "../out-tsc/e2e",
let  fizzBuzz = fs.readFileSync('./src/js/fizz-buzz.js');
eval(fizzBuzz + `\nexports.FizzBuzz = FizzBuzz;`)
"../node_modules/@types"
"src": "assets/imgs/logo.png",
self.toolbox.options.cache = {
self.toolbox.precache(
'./build/polyfills.js',
importScripts('./build/sw-toolbox.js');
require('core-js/es6');
self.toolbox.router.any('/*', self.toolbox.fastest);
require('zone.js/dist/zone');
require('core-js/es7/reflect');
require('zone.js/dist/proxy');
require('zone.js/dist/long-stack-trace-zone');
require('zone.js/dist/sync-test');
require('zone.js/dist/fake-async-test');
require('zone.js/dist/jasmine-patch');
require('zone.js/dist/async-test');
appContext.keys().forEach(appContext);
var webpack = require('webpack');
var path = require('path');
var testing = require('@angular/core/testing');
extensions: ['.ts', '.js']
}, 'angular2-template-loader']
exclude: /(index.ts|mocks.ts|\.spec\.ts$)/,
test: /\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,
new webpack.ContextReplacementPlugin(
return path.resolve(__dirname, localPath);
function root(localPath) {
const { SpecReporter } = require('jasmine-spec-reporter');
/(ionic-angular)|(angular(\\|\/)core(\\|\/)@angular)/,
require('ts-node').register({
'../e2e/**/*.e2e-spec.ts'
project: 'e2e/tsconfig.e2e.json'
var webpackConfig = require('./webpack.test.js');
frameworks: ['jasmine'],
module.exports = function(config) {
pattern: './src/assets/**/*',
pattern: './test-config/karma-test-shim.js',
'/assets/': '/base/src/assets/'
browserConsoleLogOptions: {
"src": "assets/imgs/logo.png",
coverageIstanbulReporter: {
reports: [ 'html', 'lcovonly' ],
browsers: ['Chrome'],
importScripts('./build/sw-toolbox.js');
'./build/polyfills.js',
self.toolbox.options.cache = {
self.toolbox.precache(
const { SpecReporter } = require('jasmine-spec-reporter');
self.toolbox.router.any('/*', self.toolbox.fastest);
"webRoot": "${workspaceFolder}"
'./src/**/*.e2e-spec.ts'
module.exports = function (config) {
require('ts-node').register({
"extends": "../tsconfig.json",
"outDir": "../out-tsc/app",
frameworks: ['jasmine', '@angular-devkit/build-angular'],
require('karma-jasmine'),
require('karma-jasmine-html-reporter'),
require('karma-coverage-istanbul-reporter'),
require('karma-chrome-launcher'),
require('@angular-devkit/build-angular/plugins/karma')
coverageIstanbulReporter: {
dir: require('path').join(__dirname, '../coverage'),
browsers: ['Chrome'],
reporters: ['progress', 'kjhtml'],
"extends": "../tsconfig.json",
reports: ['html', 'lcovonly'],
"extends": "../tslint.json",
"outDir": "../out-tsc/app",
"outDir": "../out-tsc/spec",
"extends": "../tsconfig.json",
"component-selector": [
_app.countTests = function() {
_app.tests.unit = require("./unit");
const subTests = _app.tests[key];
if (_app.tests.hasOwnProperty(key)) {
"directive-selector": [
for (let key in _app.tests) {
if (subTests.hasOwnProperty(testName)) {
for (let testName in subTests) {
if (_app.tests.hasOwnProperty(key)) {
for (let key in _app.tests) {
const limit = _app.countTests();
const subTests = _app.tests[key];
_app.runTests = function() {
for (let testName in subTests) {
console.log("\x1b[32m%s\x1b[0m", tmpTestName);
testValue(function() {
let testValue = subTests[testName];
if (subTests.hasOwnProperty(testName)) {
_app.produceTestReport(limit, successes, errors);
console.log("\x1b[31m%s\x1b[0m", tmpTestName);
if (counter == limit) {
console.log("----------BEGIN TEST REPORT----------");
_app.produceTestReport(limit, successes, errors);
console.log("Total Tests: ", limit);
console.log("Fail ", errors.length);
if (counter == limit) {
console.log("pass: ", successes);
console.log("----------BEGIN ERROR DETAILS----------");
console.log("----------END ERROR DETAILS----------");
errors.forEach(testError => {
console.log("\x1b[31m%s\x1b[0m", testError.name);
console.log("----------END TEST REPORT----------");
console.log(testError.error);
const awesomeFunctions = require("../app/lib");
const assert = require("assert");
const val = awesomeFunctions.getANumber();
const val = awesomeFunctions.getANumber();
if (errors.length > 0) {
assert.equal(typeof val, "number");
const val = awesomeFunctions.getANumber();
const res = awesomeFunctions.greeter();
assert.notEqual(val, 2);
assert.equal(res, "Hej!");
assert.equal(val, 1);
const res = awesomeFunctions.greeter("swedish");
assert.equal(typeof res, "string");
const res = awesomeFunctions.greeter("swedish");
assert.doesNotThrow(function() {
const res = awesomeFunctions.greeter();
assert.equal(res, "Hello!");
assert.doesNotThrow(function() {
awesomeFunctions.callbackSomething(1, 1, function(res) {
assert.notEqual(res, 3);
assert.equal(typeof res, "number");
awesomeFunctions = {};
awesomeFunctions.greeter = function(langauge = "") {
assert.equal(res, 2);
awesomeFunctions.getANumber = function() {
const val = adder(a, b);
langauge = langauge.toLowerCase();
if (typeof a !== "number" || typeof b !== "number") {
const err = new Error("Mega error!");
const adder = function(a, b) {
const helpers = require("./helpers");
const path = require("path");
return parseInt(a) + parseInt(b);
lib.baseDir = path.join(__dirname, "/.././.data/");
const fs = require("fs");
if (!err && fileDescriptor) {
lib.create = function(dir, file, data, callback) {
const stringData = JSON.stringify(data);
fs.writeFile(fileDescriptor, stringData, function(err) {
callback("Error writing to new file");
fs.close(fileDescriptor, function(err) {
lib.read = function(dir, file, callback) {
const parsedData = helpers.parseJsonToObject(data);
callback(false, parsedData);
lib.update = function(dir, file, data, callback) {
if (!err && fileDescriptor) {
const stringData = JSON.stringify(data);
fs.ftruncate(fileDescriptor, function(err) {
fs.writeFile(fileDescriptor, stringData, function(err) {
callback("Error closing the file");
fs.close(fileDescriptor, function(err) {
callback("Error writing to existing file");
callback("Error truncating the file");
callback("Error closing new file");
lib.delete = function(dir, file, callback) {
lib.list = function(dir,callback){
fs.readdir(lib.baseDir+dir+'/', function(err,data){
if(!err && data && data.length > 0){
data.forEach(function(fileName){
const trimmedFileNames = [];
trimmedFileNames.push(fileName.replace('.json',''));
callback(false,trimmedFileNames);
const environments = {};
environments.staging = {
environments.production = {
? environments[currentEnvironment]
? process.env.NODE_ENV.toLowerCase()
typeof environments[currentEnvironment] == "object"
var fs = require("fs");
var zlib = require("zlib");
lib.baseDir = path.join(__dirname, "/../.logs/");
var path = require("path");
lib.append = function(file, str, callback) {
fs.appendFile(fileDescriptor, str + "\n", function(err) {
if (!err && fileDescriptor) {
fs.close(fileDescriptor, function(err) {
callback("Error closing file that was being appended");
lib.list = function(includeCompressedLogs, callback) {
callback("Could open file for appending");
fs.readdir(lib.baseDir, function(err, data) {
if (!err && data && data.length > 0) {
callback("Error appending to file");
var trimmedFileNames = [];
data.forEach(function(fileName) {
callback(false, trimmedFileNames);
if (fileName.indexOf(".log") > -1) {
trimmedFileNames.push(fileName.replace(".gz.b64", ""));
trimmedFileNames.push(fileName.replace(".log", ""));
lib.compress = function(logId, newFileId, callback) {
if (!err && inputString) {
zlib.gzip(inputString, function(err, buffer) {
if (!err && buffer) {
fs.close(fileDescriptor, function(err) {
if (!err && fileDescriptor) {
lib.decompress = function(fileId, callback) {
zlib.unzip(inputBuffer, function(err, outputBuffer) {
if (!err && outputBuffer) {
callback(false, str);
var str = outputBuffer.toString();
var inputBuffer = Buffer.from(str, "base64");
const crypto = require("crypto");
lib.truncate = function(logId, callback) {
const config = require("./config");
const querystring = require("querystring");
if (typeof str == "string" && str.length > 0) {
.createHmac("sha256", config.hashingSecret)
helpers.hash = function(str) {
helpers.parseJsonToObject = function(str) {
helpers.createRandomString = function(strLength) {
const obj = JSON.parse(str);
for (i = 1; i <= strLength; i++) {
helpers.sendTwilioSms = function(phone, msg, callback) {
Math.floor(Math.random() * possibleCharacters.length)
let randomCharacter = possibleCharacters.charAt(
const requestDetails = {
typeof phone == "string" && phone.trim().length == 10
"Content-Type": "application/x-www-form-urlencoded",
const stringPayload = querystring.stringify(payload);
if (status == 200 || status == 201) {
"Content-Length": Buffer.byteLength(stringPayload)
callback("Status code returned was " + status);
req.on("error", function(e) {
req.write(stringPayload);
callback("Given parameters were missing or invalid");
const url = require("url");
const fs = require("fs");
const config = require("./config");
const handlers = require("./handlers");
const path = require("path");
const helpers = require("./helpers");
unifiedServer(req, res);
server.unifiedServer(req, res);
server.unifiedServer = function(req, res) {
const method = req.method.toLowerCase();
const parsedUrl = url.parse(req.url, true);
const trimmedPath = path.replace(/^\/+|\/+$/g, "");
const decoder = new StringDecoder("utf-8");
req.on("data", function(data) {
buffer += decoder.write(data);
req.on("end", function() {
buffer += decoder.end();
typeof server.router[trimmedPath] !== "undefined"
payload: helpers.parseJsonToObject(buffer)
? server.router[trimmedPath]
payload = typeof payload == "object" ? payload : {};
chosenHandler(data, function(statusCode, payload) {
const payloadString = JSON.stringify(payload);
res.setHeader("Content-Type", "application/json");
res.writeHead(statusCode);
const environments = {};
const keys = require("./keys");
res.end(payloadString);
server.init = function() {
environments.production = {
environments.staging = {
environments.testing = {
? process.env.NODE_ENV.toLowerCase()
? environments[currentEnvironment]
const path = require("path");
typeof environments[currentEnvironment] == "object"
lib.create = function(dir, file, data, callback) {
const fs = require("fs");
const helpers = require("./helpers");
if (!err && fileDesciptor) {
lib.baseDir = path.join(__dirname, "/../.data");
const stringData = JSON.stringify(data);
callback("Could not close the file");
fs.writeFile(fileDesciptor, stringData, function(err) {
fs.close(fileDesciptor, function(err) {
callback("Error writing to file");
lib.read = function(dir, file, callback) {
const parsedData = helpers.parseJsonToObject(data);
callback(false, parsedData);
} else callback(err, data);
if (!err && fileDesciptor) {
lib.update = function(dir, file, data, callback) {
fs.ftruncate(fileDesciptor, function(err) {
const stringData = JSON.stringify(data);
fs.close(fileDesciptor, function(err) {
fs.writeFile(fileDesciptor, stringData, function(err) {
callback("Error closing the file");
callback("Could not write to file");
callback("Error truncating the file");
lib.delete = function(dir, file, callback) {
lib.list = function(dir, callback) {
fs.readdir(`${lib.baseDir}/${dir}/`, function(err, data) {
if (!err && data && data.length > 0) {
const trimmedFileNames = [];
data.forEach(fileName => {
trimmedFileNames.push(fileName.replace(".json", ""));
callback(false, trimmedFileNames);
1: { name: "Capricciosa", price: 5 },
2: { name: "Hawaii", price: 6 },
3: { name: "Margarita", price: 3 },
4: { name: "Bosse's Special", price: 7 }
const fs = require("fs");
const environment = require("./config");
const url = require("url");
const handlers = require("./handlers");
const path = require("path");
const helpers = require("./helpers");
server.unifiedServer(req, res);
server.unifiedServer(req, res);
server.unifiedServer = function(req, res) {
const parsedUrl = url.parse(req.url, true);
const trimmedPath = path.replace(/^\/+|\/+$/g, "");
const method = req.method.toLowerCase();
req.on("data", function(data) {
const decoder = new StringDecoder("utf-8");
buffer += decoder.write(data);
req.on("end", function() {
buffer += decoder.end();
? server.router[trimmedPath]
typeof server.router[trimmedPath] !== "undefined"
payload: helpers.parseJsonToObject(buffer)
server.processHandlerInput(
server.processHandlerInput(
{ Error: "Something went wrong. Unable to process query" },
server.processHandlerInput = function(
if (contentType == "json") {
res.setHeader("Content-Type", "application/json");
payload = typeof payload == "object" ? payload : {};
payloadString = JSON.stringify(payload);
res.setHeader("Content-Type", "text/html");
if (contentType == "html") {
if (contentType == "favicon") {
res.setHeader("Content-Type", "image/x-icon");
if (contentType == "plain") {
res.setHeader("Content-Type", "text/plain");
if (contentType == "css") {
res.setHeader("Content-Type", "text/css");
res.setHeader("Content-Type", "image/png");
if (contentType == "png") {
res.setHeader("Content-Type", "image/jpeg");
if (contentType == "jpg") {
res.writeHead(statusCode);
res.end(payloadString);
if (statusCode == 200) {
console.log(payload);
"session/create": handlers.sessionCreate,
"account/create": handlers.accountCreate,
"session/deleted": handlers.sessionDeleted,
"account/deleted": handlers.accountDeleted,
"account/edit": handlers.accountEdit,
"cart/create": handlers.cartCreate,
"cart/deleted": handlers.cartDeleted,
"cart/edit": handlers.cartEdit,
"api/users": handlers.users,
"api/ping": handlers.ping,
"api/tokens": handlers.tokens,
"api/menu": handlers.menu,
"api/carts": handlers.carts,
"api/order": handlers.order,
"examples/error": handlers.exampleError
server.init = function() {
_app.tests.unit = require("./unit");
_app.tests.api = require("./api");
if (_app.tests.hasOwnProperty(key)) {
_app.countTests = function() {
for (let key in _app.tests) {
const subTests = _app.tests[key];
for (let testName in subTests) {
if (subTests.hasOwnProperty(testName)) {
_app.runTests = function() {
const limit = _app.countTests();
for (let key in _app.tests) {
if (_app.tests.hasOwnProperty(key)) {
const subTests = _app.tests[key];
for (let testName in subTests) {
let testValue = subTests[testName];
if (subTests.hasOwnProperty(testName)) {
testValue(function() {
console.log("\x1b[32m%s\x1b[0m", tmpTestName);
if (counter == limit) {
_app.produceTestReport(limit, successes, errors);
console.log("\x1b[31m%s\x1b[0m", tmpTestName);
if (counter == limit) {
_app.produceTestReport(limit, successes, errors);
console.log("----------BEGIN TEST REPORT----------");
console.log("Total Tests: ", limit);
console.log("pass: ", successes);
console.log("Fail ", errors.length);
if (errors.length > 0) {
errors.forEach(testError => {
console.log("----------BEGIN ERROR DETAILS----------");
console.log("\x1b[31m%s\x1b[0m", testError.name);
console.log("----------END ERROR DETAILS----------");
console.log(testError.error);
console.log("----------END TEST REPORT----------");
const helpers = require("../lib/helpers");
const assert = require("assert");
const val = helpers.getANumber();
const val = helpers.getANumber();
assert.equal(typeof val, "number");
assert.equal(val, 1);
const val = helpers.getANumber();
assert.notEqual(val, 2);
const app = require("./../index");
const assert = require("assert");
const config = require("./../lib/config");
helpers.makeGetRequest = function(path, callback) {
const requestDetails = {
"Content-Type": "application/json"
assert.doesNotThrow(function() {
app.init(function(err) {
helpers.makeGetRequest('/api/ping',function(res){
assert.equal(res.statusCode,200);
helpers.makeGetRequest('/api/users',function(res){
assert.equal(res.statusCode,400);
"icon": "./assets/icon.png",
assert.equal(res.statusCode,404);
"assetBundlePatterns": [
"image": "./assets/splash.png",
import { StyleSheet, Text, View } from "react-native";
import FrontEdge from "./components/FrontEdge";
import FlexDimensions from "./components/FlexDimensions";
import FlexDirections from "./components/FlexDirections";
import PizzaTranslator from "./components/PizzaTranslator";
import BasicButtons from "./components/BasicButtons";
import FetchExample from "./components/FetchExample";
import FlatListBasics from "./components/FlatListBasics";
export default class App extends React.Component {
{/*         <FlexDimensions />
<View style={{ flex: 1 }}>
const styles = StyleSheet.create({
<SectionListBasics />*/}
"main": "node_modules/expo/AppEntry.js",
module.exports = function(api) {
presets: ['babel-preset-expo'],
import AppNavigator from './navigation/AppNavigator';
startAsync={this._loadResourcesAsync}
import { AppLoading, Asset, Font, Icon } from 'expo';
export default class App extends React.Component {
onError={this._handleLoadingError}
onFinish={this._handleFinishLoading}
<View style={styles.container}>
_loadResourcesAsync = async () => {
{Platform.OS === 'ios' && <StatusBar barStyle="default" />}
require('./assets/images/robot-prod.png'),
require('./assets/images/robot-dev.png'),
this.setState({ isLoadingComplete: true });
_handleLoadingError = error => {
_handleFinishLoading = () => {
const styles = StyleSheet.create({
presets: ['babel-preset-expo'],
module.exports = function(api) {
"image": "./assets/images/splash.png",
"assetBundlePatterns": [
"icon": "./assets/images/icon.png",
"icon": "./assets/icon.png",
"image": "./assets/splash.png",
"assetBundlePatterns": [
"main": "node_modules/expo/AppEntry.js",
"test": "node ./node_modules/jest/bin/jest.js --watchAll"
"@expo/samples": "2.1.1",
import { Provider } from "react-redux";
import { createStore, applyMiddleware } from "redux";
import { View } from "react-native";
import reducers from "./reducers";
import Router from "./Router";
export default class App extends React.Component {
<Provider store={store}>
<View style={{ flex: 1 }}>
"main": "node_modules/expo/AppEntry.js",
import { Scene, Router } from "react-native-router-flux";
import { StyleSheet } from "react-native";
import PhotoSearch from "./components/PhotoSearch";
import Settings from "./components/Settings";
import About from "./components/About";
<Scene key="about" component={About} title="About" />
const RouterComponent = () => {
<Scene key="root" style={styles.container}>
const styles = StyleSheet.create({
module.exports = function(api) {
"extends": "./babel.config.js"
presets: ['babel-preset-expo'],
plugins: ['react', 'jest'],
'jest/globals': true,
'jest/no-focused-tests': 'error',
'jest/no-disabled-tests': 'warn',
'jest/no-identical-title': 'error',
'jest/valid-expect': 'error',
'react/forbid-prop-types': 'warn',
'react/prop-types': 'off',
'react/require-default-props': 'off',
'react/no-unused-prop-types': 'off',
'import/no-unresolved': [
'max-len': ['error', 180],
ignore: ['^react$', '^react-native$', '^react-native/'],
'import/no-self-import': 'warn',
'react/jsx-filename-extension': [
'import/no-cycle': 'warn',
extensions: ['.js', '.jsx'],
'import/no-extraneous-dependencies': [
extensions: ['.js', '.android.js', '.ios.js'],
["@babel/plugin-proposal-decorators", { "legacy": true }]
"main": "src/index.js",
"@babel/cli": "7.0.0-beta.47",
"build": "./node_modules/.bin/babel src -d dist",
"@babel/code-frame": "7.0.0-beta.47",
"@babel/core": "7.0.0-beta.47",
"@babel/plugin-proposal-decorators": "7.0.0-beta.47",
"peerDependencies": {
"@types/react": "16.4.12",
"@types/react-native": "0.56.14",
"modulePathIgnorePatterns": [
"transformIgnorePatterns": [
"<rootDir>/examples/"
this.interval = setInterval(() => {
export class Enthused extends React.Component {
componentWillUnmount(prevProps, prevState) {
componentDidMount() {
this.props.addText('!');
"filePath": "./eslintrc.js"
export class App extends React.Component {
import { Enthused } from './Enthused';
clearInterval(this.interval);
this.addText = this.addText.bind(this);
<button onClick={this.props.toggle}>
this.toggleEnthusiasm = this.toggleEnthusiasm.bind(this);
this.handleChange = this.handleChange.bind(this);
this.setState({ text: text });
if (this.state.enthused) {
this.setState({ text: text });
<button onClick={this.toggleEnthusiasm}>
<h1>Auto-Enthusiasm</h1>
<textarea rows="7" cols="40" value={this.state.text}
this.setText(e.target.value);
onChange={this.handleChange}>
<h2>{this.state.text}</h2>
global.beginButton = document.getElementById('begin');
document.getElementById('app')
global.rock = document.getElementById('rock');
global.inputField = document.getElementById('input-field')
global.scissor = document.getElementById('scissor');
global.paper = document.getElementById('paper');
global.gameBoard = document.getElementById('game-board')
global.endGame = document.getElementById('end-game');
global.game = document.getElementById('game');
global.noButton = document.getElementById('no');
global.yesButton = document.getElementById('yes');
global.resultText = document.getElementById('result-text');
global.resultMatrix = [[t,w,l],[l,t,w],[w,l,t]];
global.gameLogger = document.getElementById('game-logger');
document.addEventListener('DOMContentLoaded', () => {
global.beginButton.addEventListener('click', event => {
global.rock.addEventListener('click', clickRock);
global.paper.addEventListener('click', clickPaper);
global.scissor.addEventListener('click', clickScissor);
function clickRock() {
stopSpam(Date.now());
let opponentChoice = getOpponentChoice();
getResult(0, opponentChoice);
function clickPaper() {
stopSpam(Date.now());
let opponentChoice = getOpponentChoice();
getResult(1, opponentChoice);
function clickScissor() {
stopSpam(Date.now());
let opponentChoice = getOpponentChoice();
getResult(2, opponentChoice);
function getResult(playerChoice, opponentChoice) {
if (result === "win") {
} else if (result === "lose") {
setTimeout(clearOpView, 1400);
function clearOpView() {
if (global.roundCount === numberOfRounds) {endGame()};
function getOpponentChoice() {
global.opponentChoice.classList.add('far');
let choice = Math.floor(Math.random() * 3);
global.opponentChoice.classList.add('fa-hand-rock');
} else if (choice === 1) {
global.opponentChoice.classList.add('fa-hand-paper');
global.opponentChoice.classList.add('fa-hand-scissors');
let winnerText = winner();
addToGameLogger(winnerText);
global.yesButton.addEventListener('click', () => {
if (playerScore > opponentScore) {
global.noButton.addEventListener('click', () => {
while (global.gameLogger.firstChild) {
return `Winner: ${global.playerLabel.innerText}`
} else if (opponentScore > playerScore) {
var start = new Date().getTime();
return `Winner: ${global.opponentLabel.innerText}.`
while(end < start + ms) {
end = new Date().getTime();
function stopSpam(now) {
if (Date.now() < now + 1000) {
global.rock.removeEventListener('click', clickRock);
global.paper.removeEventListener('click', clickPaper);
global.scissor.removeEventListener('click', clickScissor);
function reAddHandlers() {
global.rock.addEventListener('click', clickRock);
setTimeout(reAddHandlers, 1000);
function addToGameLogger(message) {
global.paper.addEventListener('click', clickPaper);
global.scissor.addEventListener('click', clickScissor);
let node = document.createElement("div");
"content_type": "application/war",
global.gameLogger.appendChild(node);
node.innerText = `Game${gameNumber} - ${message}`;
"value": "${random-word}"
"Cucumber Features": {
var fs = require("fs");
var path = require("path");
var _data = require("./data");
var helpers = require("./helpers");
var url = require("url");
var util = require("util");
var debug = util.debuglog("workers");
workers.gatherAllChecks = function() {
_data.list("checks", function(err, checks) {
var _logs = require("./logs");
if (!err && checks && checks.length > 0) {
checks.forEach(function(check) {
workers.validateCheckData(originalCheckData);
workers.validateCheckData = function(originalCheckData) {
console.log("Error: Could not find any checks to process");
originalCheckData.id.trim().length == 20
? originalCheckData.id.trim()
if (!err && originalCheckData) {
originalCheckData.userPhone.trim().length == 10
originalCheckData.url.trim().length > 0
? originalCheckData.url.trim()
? originalCheckData.userPhone.trim()
workers.performCheck = function(originalCheckData) {
var parsedUrl = url.parse(
["up", "down"].indexOf(originalCheckData.state) > -1
var requestDetails = {
workers.performCheck(originalCheckData);
method: originalCheckData.method.toUpperCase(),
checkOutcome.error = { error: true, value: e };
req.on("timeout", function() {
req.on("error", function(e) {
var timeOfCheck = Date.now();
checkOutcome.error = { error: true, value: "timeout" };
if (alertWarranted) {
workers.alertUserToStatusChange(newCheckData);
workers.alertUserToStatusChange = function(newCheckData) {
newCheckData.method.toUpperCase() +
var logString = JSON.stringify(logData);
_logs.append(logFileName, logString, function(err) {
console.log("Logging to file succeeded");
console.log("Logging to file failed");
setInterval(function() {
workers.loop = function() {
workers.rotateLogs = function() {
_logs.list(false, function(err, logs) {
workers.log = function(
workers.gatherAllChecks();
logs.forEach(function(logName) {
if (!err && logs && logs.length > 0) {
var newFileId = logId + "-" + Date.now();
_logs.compress(logId, newFileId, function(err) {
_logs.truncate(logId, function(err) {
var logId = logName.replace(".log", "");
console.log("Success truncating logfile");
workers.logRotationLoop = function() {
console.log("Error truncating logfile");
setInterval(function() {
console.log("Error: Could not find any logs to rotate");
workers.rotateLogs();
workers.gatherAllChecks();
workers.init = function() {
}, 1000 * 60 * 60 * 24);
const readline = require("readline");
workers.rotateLogs();
const util = require("util");
workers.logRotationLoop();
const debug = util.debuglog("cli");
class _events extends events {}
const events = require("events");
const e = new _events();
const os = require("os");
const _data = require("./data");
const helpers = require("./helpers");
const v8 = require("v8");
const menu = require("./menu");
e.on("help", function(str) {
e.on("man", function(str) {
cli.responders.help();
e.on("exit", function(str) {
cli.responders.exit();
cli.responders.help();
e.on("menu", function(str) {
e.on("stats", function(str) {
cli.responders.stats();
cli.responders.menu();
e.on("list recent orders", function(str) {
cli.responders.moreOrderInfo(str);
e.on("more order info", function(str) {
e.on("list new users", function(str) {
cli.responders.listNewUsers();
e.on("list user", function(str) {
cli.responders.help = function() {
cli.responders.listUser(str);
cli.responders.recentOrders();
exit: "Kill the CLI (and the rest of the application)",
cli.horizontalLine();
"List user --{email}": "Show details of a specified user"
for (var key in commands) {
cli.centered("CLI MANUAL");
if (commands.hasOwnProperty(key)) {
cli.horizontalLine();
var value = commands[key];
var line = "      \x1b[33m " + key + "      \x1b[0m";
cli.horizontalLine();
for (i = 0; i < padding; i++) {
cli.verticalSpace(1);
cli.verticalSpace = function(lines) {
for (i = 0; i < lines; i++) {
cli.horizontalLine = function() {
cli.centered = function(str) {
for (i = 0; i < width; i++) {
cli.verticalSpace(2);
cli.responders.stats = function() {
const leftPadding = Math.floor((width - str.length) / 2);
"Load Average": os.loadavg().join(" "),
for (i = 0; i < leftPadding; i++) {
"Allocated Heap Used (%)": Math.round(
"Free Memory": os.freemem(),
cli.responders.exit = function() {
(v8.getHeapStatistics().used_heap_size /
v8.getHeapStatistics().total_heap_size) *
"Available Heap Allocated (%)": Math.round(
"CPU Count": os.cpus().length,
(v8.getHeapStatistics().total_heap_size /
Uptime: os.uptime() + " Seconds"
v8.getHeapStatistics().heap_size_limit) *
cli.horizontalLine();
cli.centered("SYSTEM STATISTICS");
cli.horizontalLine();
cli.verticalSpace(2);
for (let key in stats) {
let line = "\x1b[33m " + key + "\x1b[0m";
for (i = 0; i < padding; i++) {
if (stats.hasOwnProperty(key)) {
let value = stats[key];
cli.responders.menu = function() {
cli.centered("MENU");
Object.values(menu).forEach(item => {
cli.horizontalLine();
for (i = 0; i < padding; i++) {
cli.responders.recentOrders = function() {
cli.horizontalLine();
let price = `\x1b[33m $${item.price} \x1b[0m`;
_data.list("orders", function(err, orderIds) {
_data.read("orders", userId, function(err, orderData) {
if (!err && orderData) {
if (!err && orderIds && orderIds.length > 0) {
cli.responders.moreOrderInfo = function(str) {
if (createdAt > Date.now() - 3600 * 24 * 1000) {
const arr = str.split("--");
orderIds.forEach(function(userId) {
typeof arr[1] == "string" && arr[1].trim().length > 0
_data.read("orders", orderId, function(err, orderData) {
if (!err && orderData) {
console.dir(orderData, { colors: true });
_data.list("users", function(err, emails) {
cli.responders.listNewUsers = function() {
if (!err && emails && emails.length > 0) {
_data.read("users", email, function(err, userData) {
if (!err && userData) {
cli.responders.listUser = function(str) {
if (createdAt > Date.now() - 3600 * 24 * 1000) {
typeof arr[1] == "string" && arr[1].trim().length > 0
if (!err && userData) {
emails.forEach(function(email) {
cli.processInput = function(str) {
const arr = str.split("--");
uniqueInputs.some(function(input) {
console.dir(userData, { colors: true });
if (str.toLowerCase().indexOf(input) > -1) {
_data.read("users", email, function(err, userData) {
console.log("Sorry, try again");
cli.init = function() {
const uniqueInputs = [
const _interface = readline.createInterface({
_interface.on("line", function(str) {
console.log("\x1b[33m%s\x1b[0m", "The CLI is running");
cli.processInput(str);
_interface.on("close", function() {
const config = require("./config");
const querystring = require("querystring");
const fs = require("fs");
const crypto = require("crypto");
const path = require("path");
const menu = require("./menu");
helpers.parseJsonToObject = function(str) {
if (typeof str == "string" && str.length > 0) {
helpers.hash = function(str) {
helpers.generateRandomString = function(strLength) {
const obj = JSON.parse(str);
.createHmac("sha256", config.hashingSecret)
validChars[Math.floor(Math.random() * validChars.length)];
for (i = 1; i <= strLength; i++) {
if (amount && source && description) {
const stringPayload = querystring.stringify(payload);
["tok_visa", "tok_mastercard"].indexOf(source) > -1
source.trim().length > 0 &&
"Content-Type": "application/x-www-form-urlencoded",
const requestDetails = {
if (status == 200 || status == 201) {
"Content-Length": Buffer.byteLength(stringPayload)
callback("Status code returned was " + status);
req.on("error", function(e) {
cartData.email.trim().length > 0 &&
helpers.sendReceipt = function(cartData, price, callback) {
cartData.email.trim().indexOf("@") > -1
if (email && price && pizzas && amounts) {
pizzas.forEach((pizza, index) => {
? cartData.email.trim()
const stringPayload = querystring.stringify(payload);
req.write(stringPayload);
"Content-Length": Buffer.byteLength(stringPayload)
"Content-Type": "application/x-www-form-urlencoded",
const requestDetails = {
if (status == 200 || status == 201) {
callback("Status code returned was " + status);
req.write(stringPayload);
req.on("error", function(e) {
helpers.calculatePrice = function(cartData, callback) {
const { pizzas, amounts } = cartData;
callback("Could not calculate price");
if (!err && str && str.length > 0) {
if (pizzas && amounts) {
callback(false, finalString);
callback("A valid template name was not specified");
callback("No template could be found");
const finalString = helpers.interpolate(str, data);
helpers.interpolate = function(str, data) {
for (let keyName in config.templateGlobals) {
if (config.templateGlobals.hasOwnProperty(keyName)) {
const replace = data[key];
str = str.replace(find, replace);
if (!err && headerString) {
for (let key in data) {
const find = `{${key}}`;
callback("Could not find the footer template");
helpers.getStaticAsset = function(fileName, callback) {
callback("Could not find the header template");
callback(false, data);
callback(false, fullString);
fs.readFile(publicDir + fileName, function(err, data) {
callback("No file could be found");
if (!err && headerString) {
const publicDir = path.join(__dirname, "/../public/");
helpers.getANumber = function() {
callback("A valid file name was not specified");
const _data = require("./data");
const config = require("./config");
const helpers = require("./helpers");
handlers.notFound = function(data, callback) {
if (acceptableMethods.indexOf(data.method) > -1) {
handlers.ping = function(data, callback) {
handlers.users = function(data, callback) {
const acceptableMethods = ["post", "get", "put", "delete"];
handlers._users[data.method](data, callback);
handlers._users = {};
data.payload.firstName.trim().length > 0
? data.payload.firstName.trim()
data.payload.lastName.trim().length > 0
handlers._users.post = function(data, callback) {
data.payload.phone.trim().length == 10
data.payload.password.trim().length > 0
? data.payload.phone.trim()
? data.payload.lastName.trim()
? data.payload.password.trim()
if (hashedPassword) {
_data.read("users", phone, function(err, data) {
const hashedPassword = helpers.hash(password);
_data.create("users", phone, userObject, function(err) {
callback(500, { Error: "Could not create the new user" });
callback(400, { Error: "Missing required fields" });
handlers._users.get = function(data, callback) {
data.queryStringObject.phone.trim().length == 10
? data.queryStringObject.phone.trim()
_data.read("users", phone, function(err, data) {
callback(400, { Error: "Missing required field" });
handlers._users.put = function(data, callback) {
data.payload.phone.trim().length == 10
? data.payload.phone.trim()
data.payload.firstName.trim().length > 0
data.payload.lastName.trim().length > 0
? data.payload.lastName.trim()
data.payload.password.trim().length > 0
? data.payload.password.trim()
if (firstName || lastName || password) {
_data.read("users", phone, function(err, userData) {
userData.hashedPassword = helpers.hash(password);
if (!err && userData) {
callback(500, { Error: "Could not update the user" });
_data.update("users", phone, userData, function(err) {
callback(400, { Error: "Missing fields to update" });
handlers._users.delete = function(data,callback){
_data.read('users',phone,function(err,userData){
callback(400, { Error: "Missing required field" });
if(!err && userData){
if(checksToDelete > 0){
_data.delete('users',phone,function(err){
userChecks.forEach(function(checkId){
_data.delete('checks',checkId,function(err){
if(checksDeleted == checksToDelete){
callback(400,{'Error' : 'Missing required field'})
handlers.tokens = function(data, callback) {
const acceptableMethods = ["post", "get", "put", "delete"];
if (acceptableMethods.indexOf(data.method) > -1) {
handlers._tokens = {};
handlers._tokens[data.method](data, callback);
handlers._tokens.post = function(data, callback) {
data.payload.phone.trim().length == 10
? data.payload.password.trim()
data.payload.password.trim().length > 0
? data.payload.phone.trim()
if (phone && password) {
_data.read("users", phone, function(err, userData) {
if (!err && userData) {
const hashedPassword = helpers.hash(password);
if (hashedPassword == userData.hashedPassword) {
const tokenId = helpers.createRandomString(20);
const tokenObject = {
const expires = Date.now() + 1000 * 60 * 60;
callback(200, tokenObject);
callback(500, { Error: "Could not create a new token" });
callback(400, { Error: "Missing required fields" });
? data.queryStringObject.id.trim()
handlers._tokens.get = function(data, callback) {
_data.read("tokens", id, function(err, tokenData) {
data.queryStringObject.id.trim().length == 20
if (!err && tokenData) {
callback(400, { Error: "Missing required field" });
callback(200, tokenData);
handlers._tokens.put = function(data, callback) {
_data.read("tokens", id, function(err, tokenData) {
? data.payload.id.trim()
if (tokenData.expires > Date.now()) {
if (!err && tokenData) {
_data.update("tokens", id, tokenData, function(err) {
tokenData.expires = Date.now() + 1000 * 60 * 60;
callback(400, { Error: "Specified token does not exist" });
handlers._tokens.delete = function(data, callback) {
_data.read("tokens", id, function(err, data) {
data.queryStringObject.id.trim().length == 20
? data.queryStringObject.id.trim()
_data.delete("tokens", id, function(err) {
callback(400, { Error: "Missing required field" });
callback(500, "Could not delete the specified token");
_data.read("tokens", id, function(err, tokenData) {
if (acceptableMethods.indexOf(data.method) > -1) {
const acceptableMethods = ["post", "get", "put", "delete"];
if (!err && tokenData) {
handlers.checks = function(data, callback) {
handlers._checks = {};
handlers._checks[data.method](data, callback);
? data.payload.url.trim()
handlers._checks.post = function(data, callback) {
_data.read("tokens", token, function(err, tokenData) {
if (!err && tokenData) {
_data.read("users", userPhone, function(err, userData) {
if (!err && userData) {
const checkId = helpers.createRandomString(20);
if (userChecks.length < config.maxChecks) {
const checkObject = {
userData.checks.push(checkId);
callback(200, checkObject);
_data.update("users", userPhone, userData, function(err) {
callback(500, { Error: "Could not create the new check" });
} checks which is the maximum`
handlers._checks.get = function(data, callback) {
Error: `You are already storing ${
data.queryStringObject.id.trim().length == 20
? data.queryStringObject.id.trim()
_data.read("checks", id, function(err, checkData) {
if (!err && checkData) {
callback(400, { Error: "Missing required field" });
callback(200, checkData);
handlers._checks.put = function(data, callback) {
? data.payload.id.trim()
_data.read("checks", id, function(err, checkData) {
? data.payload.url.trim()
if (!err && checkData) {
if (timeoutSeconds) {
_data.update("checks", id, checkData, function(err) {
callback(500, { Error: "Could not update the check" });
callback(400, { Error: "Check ID did not exist" });
callback(400, { Error: "Missing fields to update" });
handlers._checks.delete = function(data, callback) {
callback(400, { Error: "Missing required fields" });
data.queryStringObject.id.trim().length == 20
? data.queryStringObject.id.trim()
_data.read("checks", id, function(err, checkData) {
if (!err && checkData) {
_data.delete("checks", id, function(err) {
if (!err && userData) {
_data.read("users", checkData.userPhone, function(
const checkPosition = userChecks.indexOf(id);
if (checkPosition > -1) {
userChecks.splice(checkPosition, 1);
callback(500, { Error: "Could no delete the check data" });
callback(400, { Error: "Missing required field" });
? method.toUpperCase()
for (let queryKey in queryStringObject) {
app.client.request = function(
xhr.open(method, requestUrl, true);
path = typeof path == "string" ? path : "/";
requestUrl += queryKey + "=" + queryStringObject[queryKey];
const xhr = new XMLHttpRequest();
if (queryStringObject.hasOwnProperty(queryKey)) {
for (let headerKey in headers) {
if (headers.hasOwnProperty(headerKey)) {
xhr.setRequestHeader("Content-type", "application/json");
if (xhr.readyState == XMLHttpRequest.DONE) {
xhr.setRequestHeader(headerKey, headers[headerKey]);
xhr.onreadystatechange = function() {
xhr.setRequestHeader("token", app.config.sessionToken.id);
const payloadString = JSON.stringify(payload);
if (app.config.sessionToken) {
const parsedResponse = JSON.parse(responseReturned);
callback(statusCode, parsedResponse);
.addEventListener("click", function(e) {
xhr.send(payloadString);
callback(statusCode, false);
app.bindLogoutButton = function() {
.getElementById("logoutButton")
app.setSessionToken(false);
app.logUserOut = function(redirectUser) {
const queryStringObject = {
window.location = "/session/deleted";
const allForms = document.querySelectorAll("form");
function(statusCode, responsePayload) {
app.bindForms = function() {
if (document.querySelector("form")) {
for (let i = 0; i < allForms.length; i++) {
allForms[i].addEventListener("submit", function(e) {
let method = this.method.toUpperCase();
for (let i = 0; i < elements.length; i++) {
typeof elements[i].classList.value == "string" &&
elements[i].classList.value.length > 0
if (elements[i].type !== "submit") {
? elements[i].classList.value
elements[i].type == "checkbox" &&
: classOfElement.indexOf("intval") == -1
classOfElement.indexOf("multiselect") == -1
let nameOfElement = elements[i].name;
const elementIsChecked = elements[i].checked;
? elements[i].checked
: parseInt(elements[i].value);
if (classOfElement.indexOf("multiselect") > -1) {
if (elementIsChecked) {
if (nameOfElement == "uid") {
if (nameOfElement == "_method") {
payload[nameOfElement] =
typeof payload[nameOfElement] == "object" &&
? payload[nameOfElement]
payload[nameOfElement] instanceof Array
payload[nameOfElement] = valueOfElement;
payload[nameOfElement].push(valueOfElement);
if (formId == "checkout") {
function(statusCode, responsePayload) {
document.querySelector(
if (statusCode !== 200) {
document.querySelector(
if (statusCode == 403) {
function(newStatusCode, newResponsePayload) {
).style.display = "block";
if (formId == "accountCreate") {
app.setSessionToken(newResponsePayload);
if (newStatusCode !== 200) {
if (formId == "sessionCreate") {
app.setSessionToken(responsePayload);
window.location = "/menu";
if (formsWithSuccessMessages.indexOf(formId) > -1) {
window.location = "/menu";
window.location = "/account/deleted";
localStorage.removeItem("cart");
if (formId == "checkout") {
const span = document.getElementsByClassName("close")[0];
if (formId == "accountEdit3") {
const modal = document.getElementById("checkoutModal");
app.logUserOut(false);
span.onclick = function() {
window.onclick = function(event) {
if (event.target == modal) {
if (formId == "cartDelete") {
window.location = "/menu";
app.getSessionToken = function() {
const tokenString = localStorage.getItem("token");
const token = JSON.parse(tokenString);
if (typeof tokenString == "string") {
app.setLoggedInClass(true);
window.location = "/";
if (typeof token == "object") {
app.setLoggedInClass(false);
app.setLoggedInClass = function(add) {
app.setLoggedInClass(false);
target.classList.add("loggedIn");
const target = document.querySelector("body");
app.setSessionToken = function(token) {
const tokenString = JSON.stringify(token);
if (typeof token == "object") {
target.classList.remove("loggedIn");
app.setLoggedInClass(true);
app.setLoggedInClass(false);
localStorage.setItem("token", tokenString);
if (statusCode == 200) {
function(statusCode, responsePayload) {
const queryStringObject = { id: currentToken.id };
function(statusCode, responsePayload) {
app.renewToken = function(callback) {
app.setSessionToken(false);
app.setSessionToken(responsePayload);
app.setSessionToken(false);
if (statusCode == 200) {
app.loadDataOnPage = function() {
typeof bodyClasses[0] == "string" ? bodyClasses[0] : false;
if (primaryClass == "accountEdit") {
app.setSessionToken(false);
if (primaryClass == "menu") {
if (primaryClass == "cartCreate") {
app.loadAccountEditPage();
app.loadAccountEditPage = function() {
function(statusCode, responsePayload) {
var queryStringObject = {
const hiddenEmailInputs = document.querySelectorAll(
hiddenEmailInputs[i].value = responsePayload.email;
app.loadMenuPage = function() {
const queryStringObject = {
function(statusCode, responsePayload) {
for (let i = 0; i < hiddenEmailInputs.length; i++) {
if (statusCode == 200) {
app.loadCheckoutButton();
app.loadCartPage = function() {
if (statusCode == 200) {
const queryStringObject = {
function(statusCode, responsePayload) {
if (statusCode == 200) {
app.displayCart = function() {
console.log("Menu page");
document.getElementById("cap").innerHTML =
if (cart.pizzas.indexOf(1) > -1) {
document.getElementById("cap").innerHTML = `${
cart.amounts[cart.pizzas.indexOf(1)]
if (cart.pizzas.indexOf(2) > -1) {
const cart = JSON.parse(localStorage.getItem("cart"));
if (cart.pizzas.indexOf(3) > -1) {
document.getElementById("marg").innerHTML = `${
cart.amounts[cart.pizzas.indexOf(2)]
cart.amounts[cart.pizzas.indexOf(3)]
document.getElementById("bos").innerHTML = `${
document.getElementById("haw").innerHTML = `${
if (cart.pizzas.indexOf(4) > -1) {
cart.amounts[cart.pizzas.indexOf(4)]
const cart = JSON.parse(localStorage.getItem("cart"));
function(statusCode, responsePayload) {
if (cart.amounts !== responsePayload.amounts) {
function(statusCode, responsePayload) {
app.createCart = function() {
console.log("Menu page");
window.location = "/checkout";
app.addToCart = function(pizza) {
if (statusCode == 200) {
window.location = "/checkout";
app.tokenRenewalLoop = function() {
setInterval(function() {
app.renewToken(function(err) {
console.log("Token renewed successfully @ " + Date.now());
if (cart.pizzas.indexOf(pizza) > -1) {
cart.amounts[cart.pizzas.indexOf(pizza)] += 1;
cart.pizzas.push(pizza);
cart.pizzas = [pizza];
localStorage.setItem("cart", cartString);
cart.amounts.push(1);
cart = JSON.parse(localStorage.getItem("cart"));
let checkoutButton = document.getElementById("goto-cart");
const cartString = JSON.stringify(cart);
if (localStorage.getItem("cart")) {
app.loadCheckoutButton = function() {
app.init = function() {
app.bindLogoutButton();
app.getSessionToken();
app.tokenRenewalLoop();
window.onload = function() {
app.loadDataOnPage();
const menu = require("./menu");
const helpers = require("./helpers");
if (data.method == "get") {
const _data = require("./data");
handlers.index = function(data, callback) {
const templateData = {
callback(200, str, "html");
callback(500, undefined, "html");
callback(500, undefined, "html");
const err = new Error('This is an example error.');
callback(405, undefined, "html");
handlers.exampleError = function(data, callback) {
handlers.accountCreate = function(data, callback) {
callback(200, str, "html");
if (data.method == "get") {
callback(500, undefined, "html");
handlers.sessionCreate = function(data, callback) {
const templateData = {
callback(500, undefined, "html");
callback(405, undefined, "html");
if (data.method == "get") {
const templateData = {
callback(200, str, "html");
callback(500, undefined, "html");
callback(405, undefined, "html");
callback(500, undefined, "html");
handlers.accountEdit = function(data, callback) {
if (data.method == "get") {
const templateData = {
callback(200, str, "html");
callback(500, undefined, "html");
handlers.sessionDeleted = function(data, callback) {
callback(405, undefined, "html");
const templateData = {
callback(500, undefined, "html");
callback(200, str, "html");
callback(500, undefined, "html");
callback(500, undefined, "html");
callback(405, undefined, "html");
if (data.method == "get") {
handlers.accountDeleted = function(data, callback) {
if (data.method == "get") {
callback(200, str, "html");
callback(500, undefined, "html");
callback(500, undefined, "html");
const templateData = {
callback(405, undefined, "html");
handlers.menuGet = function(data, callback) {
const templateData = {
if (data.method == "get") {
callback(500, undefined, "html");
callback(500, undefined, "html");
callback(405, undefined, "html");
handlers.cartCreate = function(data, callback) {
if (data.method == "get") {
const templateData = {
callback(200, str, "html");
callback(500, undefined, "html");
callback(500, undefined, "html");
handlers.checkout = function(data, callback) {
callback(405, undefined, "html");
if (data.method == "get") {
const templateData = {
callback(200, str, "html");
callback(200, str, "html");
callback(500, undefined, "html");
callback(405, undefined, "html");
callback(500, undefined, "html");
handlers.favicon = function(data, callback) {
if (data.method == "get") {
helpers.getStaticAsset("favicon.ico", function(err, data) {
if (data.method == "get") {
callback(200, data, "favicon");
if (trimmedAssetName.indexOf(".css") > -1) {
if (trimmedAssetName.length > 0) {
handlers.public = function(data, callback) {
if (trimmedAssetName.indexOf(".ico") > -1) {
if (trimmedAssetName.indexOf(".png") > -1) {
handlers.ping = function(data, callback) {
if (trimmedAssetName.indexOf(".jpg") > -1) {
callback(404, { Error: "Handler not found!" });
handlers.notFound = function(data, callback) {
callback(200, data, contentType);
const acceptableMethods = ["post", "get", "put", "delete"];
if (acceptableMethods.indexOf(data.method) > -1) {
handlers._users[data.method](data, callback);
handlers.users = function(data, callback) {
handlers._users.post = function(data, callback) {
data.payload.firstName.trim().length > 0
handlers._users = {};
data.payload.lastName.trim().length > 0
? data.payload.firstName.trim()
data.payload.email.trim().length > 0 &&
data.payload.email.indexOf("@") > -1
? data.payload.lastName.trim()
data.payload.password.trim().length > 0
? data.payload.email.trim()
? data.payload.password.trim()
data.payload.streetAddress.trim().length > 0
_data.read("users", email, function(err, data) {
? data.payload.streetAddress.trim()
const hashedPassword = helpers.hash(password);
_data.create("users", email, userObject, function(err) {
callback(500, { Error: "Could not create the user" });
console.log(firstName);
if (hashedPassword) {
handlers._users.get = function(data, callback) {
data.queryStringObject.email.trim().indexOf("@") > -1
? data.queryStringObject.email.trim()
data.queryStringObject.email.trim().length > 0 &&
data.payload.firstName.trim().length > 0
handlers._users.put = function(data, callback) {
data.payload.lastName.trim().length > 0
_data.read("users", email, function(err, data) {
data.payload.email.trim().length > 0 &&
data.payload.email.indexOf("@") > -1
? data.payload.lastName.trim()
? data.payload.firstName.trim()
data.payload.password.trim().length > 0
data.payload.streetAddress.trim().length > 0
? data.payload.password.trim()
if (firstName || lastName || password || streetAddress) {
? data.payload.streetAddress.trim()
? data.payload.email.trim()
_data.read("users", email, function(err, userData) {
if (!err && userData) {
if (userData.lastName) {
if (userData.password) {
userData.hashedPassword = helpers.hash(password);
_data.update("users", email, userData, function(err) {
callback(500, { Error: "Error updating user. Sorry." });
if (userData.streetAddress) {
callback(404, { Error: "Could not find that user" });
handlers._users.delete = function(data, callback) {
data.queryStringObject.email.trim().length > 0 &&
callback(400, { Error: "Dude, nothing to update" });
data.queryStringObject.email.trim().indexOf("@") > -1
? data.queryStringObject.email.trim()
_data.read("users", email, function(err, userData) {
if (userData.firstName) {
_data.delete("users", email, function(err) {
callback(500, { Error: "Could not delete the user" });
if (!err && userData) {
callback(400, { Error: "Error reading the user" });
const acceptableMethods = ["post", "get", "put", "delete"];
handlers.tokens = function(data, callback) {
if (acceptableMethods.indexOf(data.method) > -1) {
handlers._tokens.post = function(data, callback) {
handlers._tokens = {};
handlers._tokens[data.method](data, callback);
data.payload.email.trim().indexOf("@") > -1
data.payload.email.trim().length > 0 &&
? data.payload.email.trim()
? data.payload.password.trim()
data.payload.password.trim().length > 0
_data.read("users", email, function(err, userData) {
if (email && password) {
if (helpers.hash(password) == userData.hashedPassword) {
if (!err && userData) {
const tokenId = helpers.generateRandomString(20);
const expires = Date.now() + 1000 * 60 * 60;
const tokenObject = {
callback(200, tokenObject);
callback(500, { Error: "Could not save to file :(" });
callback(400, "Could not find a user with that email");
data.queryStringObject.id.trim().length == 20
handlers._tokens.get = function(data, callback) {
if (!err && tokenData) {
? data.queryStringObject.id.trim()
callback(400, "Missing required fields");
_data.read("tokens", id, function(err, tokenData) {
handlers._tokens.put = function(data, callback) {
? data.payload.id.trim()
callback(200, tokenData);
_data.read("tokens", id, function(err, tokenData) {
if (tokenData.expires > Date.now()) {
if (!err && tokenData) {
_data.update("tokens", id, tokenData, function(err) {
handlers._tokens.delete = function(data, callback) {
tokenData.expires = Date.now() + 1000 * 60 * 60;
_data.read("tokens", id, function(err, tokenData) {
? data.payload.id.trim()
if (!err && tokenData) {
_data.read("tokens", id, function(err, tokenData) {
_data.delete("tokens", id, function(err) {
const acceptableMethods = ["get"];
handlers.menu = function(data, callback) {
if (acceptableMethods.indexOf(data.method) > -1) {
handlers._menu[data.method](data, callback);
handlers._menu.get = function(data, callback) {
if (!err && tokenData) {
data.payload.email.trim().indexOf("@") > -1
data.payload.email.trim().length > 0 &&
handlers.carts = function(data, callback) {
if (acceptableMethods.indexOf(data.method) > -1) {
const acceptableMethods = ["post", "get", "put", "delete"];
? data.payload.email.trim()
handlers._carts[data.method](data, callback);
const numberOfPizzaTypes = Object.values(menu).length;
handlers._carts = {};
handlers._carts.post = function(data, callback) {
data.payload.email.trim().indexOf("@") > -1
? data.payload.email.trim()
data.payload.email.trim().length > 0 &&
const cartId = helpers.generateRandomString(20);
if (pizzas && amounts) {
if (pizzas.length !== amounts.length) {
_data.read("users", email, function(err, userData) {
_data.create("carts", cartId, cartData, function(err) {
if (!err && userData) {
callback(200, cartData);
_data.update("users", email, userData, function(err) {
handlers._carts.get = function(data, callback) {
callback(500, { Error: "Could not create the cart" });
callback(500, { Error: "Faild to save the user data" });
data.queryStringObject.email.trim().indexOf("@") > -1
data.queryStringObject.email.trim().length > 0 &&
? data.queryStringObject.email.trim()
_data.read("users", email, function(err, userData) {
? userData.activeCart.trim()
userData.activeCart.trim().length > 0
_data.read("carts", activeCart, function(err, cartData) {
if (!err && cartData) {
if (!err && userData) {
callback(500, { Error: "Unable to open the cart :(" });
handlers._carts.put = function(data, callback) {
data.payload.email.trim().length > 0 &&
callback(200, cartData);
data.payload.email.trim().indexOf("@") > -1
if (pizzas && amounts && pizzas.length == amounts.length) {
? data.payload.email.trim()
_data.read("users", email, function(err, userData) {
userData.activeCart.trim().length > 0
? userData.activeCart.trim()
if (!err && userData) {
if (!err && cartData) {
_data.read("carts", activeCart, function(err, cartData) {
callback(200, cartData);
Error: "Unable to open the cart for reading :("
_data.update("carts", activeCart, cartData, function(err) {
callback(500, { Error: "Unable to save the cart :(" });
Error: "Unable to read from the user data. Sorry :("
data.queryStringObject.email.trim().length > 0 &&
handlers._carts.delete = function(data, callback) {
data.queryStringObject.email.trim().indexOf("@") > -1
? data.queryStringObject.email.trim()
_data.read("users", email, function(err, userData) {
userData.activeCart.trim().length > 0
? userData.activeCart.trim()
if (!err && userData) {
_data.update("users", email, userData, function(err) {
_data.delete("carts", activeCart, function(err) {
callback(500, { Error: "Unable to update the user" });
handlers.order = function(data, callback) {
handlers._order[data.method](data, callback);
if (acceptableMethods.indexOf(data.method) > -1) {
handlers._order = {};
callback(405, { Error: "Cant't do that friend" });
handlers._order.post = function(data, callback) {
data.payload.email.trim().length > 0 &&
? data.payload.email.trim()
data.payload.email.trim().indexOf("@") > -1
? data.payload.cardToken.trim()
? data.payload.description.trim()
_data.read("users", email, function(err, userData) {
if (email && cardToken) {
if (!err && userData) {
? userData.activeCart.trim()
const acceptableMethods = ["post"];
_data.read("carts", activeCart, function(err, cartData) {
if (!err && cartData) {
userData.activeCart.trim().length > 0
helpers.calculatePrice(cartData, function(price) {
const orderId = helpers.generateRandomString(12);
if (typeof price == "number") {
payment: price / 100,
createdAt: Date.now()
console.log("Cart successfully deleted");
_data.create("orders", orderId, orderData, function(
100} USD. However, we were unable to email you a receipt`
_data.delete("carts", activeCart, function(
callback(500, { Error: err });
callback(500, { Error: "Could not calculate the price" });
console.log("Unable to delete cart");
"capture-stack-trace": {
"basic-auth-connect": {
"command-line-usage": {
"e2e_training_wheels": {
"command-line-args": {
"create-error-class": {
"escape-string-regexp": {
"is-fullwidth-code-point": {
"is-retry-allowed": {
"lodash.isarguments": {
"lodash._objecttypes": {
"lodash._isnative": {
"lodash._shimkeys": {
"lodash.camelcase": {
"node-status-codes": {
"process-nextick-args": {
"registry-auth-token": {
"lodash.isarguments": {
"path-is-absolute": {
"strip-json-comments": {
"basic-auth-connect": {
"write-file-atomic": {
"capture-stack-trace": {
"command-line-args": {
"command-line-usage": {
"escape-string-regexp": {
"create-error-class": {
"e2e_training_wheels": {
"is-fullwidth-code-point": {
"lodash.isarguments": {
"lodash._objecttypes": {
"is-retry-allowed": {
"node-status-codes": {
"lodash._isnative": {
"lodash._shimkeys": {
"lodash.isarguments": {
"lodash.camelcase": {
"registry-auth-token": {
"path-is-absolute": {
"strip-json-comments": {
"process-nextick-args": {
"write-file-atomic": {
"@webassemblyjs/wast-parser": "1.7.8"
"@webassemblyjs/helper-module-context": "1.7.8",
"@webassemblyjs/ast": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/wast-printer": "1.7.8"
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8"
"@webassemblyjs/ieee754": {
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/leb128": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/utf8": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8",
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/helper-wasm-section": "1.7.8",
"@webassemblyjs/wasm-opt": "1.7.8",
"@webassemblyjs/wast-printer": "1.7.8"
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/leb128": "1.7.8",
"@webassemblyjs/ieee754": "1.7.8",
"@webassemblyjs/utf8": "1.7.8"
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8"
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/helper-api-error": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/utf8": "1.7.8"
"@webassemblyjs/ieee754": "1.7.8",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/leb128": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-api-error": "1.7.8",
"@webassemblyjs/floating-point-hex-parser": "1.7.8",
"@webassemblyjs/helper-code-frame": "1.7.8",
"@xtuc/long": "4.2.1"
"@webassemblyjs/helper-fsm": "1.7.8",
"@webassemblyjs/wast-parser": "1.7.8",
"@webassemblyjs/wast-printer": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/ast": "1.7.8",
"acorn-dynamic-import": {
"assertion-error-formatter": {
"babel-helper-call-delegate": {
"babel-helper-function-name": {
"babel-helper-define-map": {
"babel-code-frame": {
"babel-helper-get-function-arity": {
"babel-helper-hoist-variables": {
"babel-helper-optimise-call-expression": {
"babel-helper-regex": {
"babel-helper-replace-supers": {
"babel-plugin-check-es2015-constants": {
"babel-plugin-transform-es2015-arrow-functions": {
"babel-plugin-transform-es2015-block-scoping": {
"babel-plugin-transform-es2015-classes": {
"babel-plugin-transform-es2015-block-scoped-functions": {
"babel-plugin-transform-es2015-computed-properties": {
"babel-plugin-transform-es2015-destructuring": {
"babel-plugin-transform-es2015-duplicate-keys": {
"babel-plugin-transform-es2015-for-of": {
"babel-plugin-transform-es2015-function-name": {
"babel-plugin-transform-es2015-literals": {
"babel-plugin-transform-es2015-modules-amd": {
"babel-plugin-transform-es2015-modules-commonjs": {
"babel-plugin-transform-es2015-modules-systemjs": {
"babel-plugin-transform-es2015-parameters": {
"babel-plugin-transform-es2015-modules-umd": {
"babel-plugin-transform-es2015-shorthand-properties": {
"babel-plugin-transform-es2015-object-super": {
"babel-plugin-transform-es2015-sticky-regex": {
"babel-plugin-transform-es2015-spread": {
"babel-plugin-transform-es2015-typeof-symbol": {
"babel-plugin-transform-es2015-template-literals": {
"babel-plugin-transform-regenerator": {
"babel-plugin-transform-es2015-unicode-regex": {
"regenerator-runtime": {
"babel-plugin-transform-strict-mode": {
"is-accessor-descriptor": {
"babel-preset-es2015": {
"is-data-descriptor": {
"binary-extensions": {
"becke-ch--regex--s0-0-v1--base--pl--lib": {
"browserify-cipher": {
"basic-auth-connect": {
"builtin-status-codes": {
"chrome-trace-event": {
"is-fullwidth-code-point": {
"is-fullwidth-code-point": {
"capture-stack-trace": {
"collection-visit": {
"component-emitter": {
"console-browserify": {
"constants-browserify": {
"convert-source-map": {
"crypto-browserify": {
"create-error-class": {
"copy-concurrently": {
"cucumber-expressions": {
"cucumber-tag-expressions": {
"is-data-descriptor": {
"decode-uri-component": {
"is-accessor-descriptor": {
"enhanced-resolve": {
"error-stack-parser": {
"is-data-descriptor": {
"escape-string-regexp": {
"is-accessor-descriptor": {
"fs-write-stream-atomic": {
"fast-json-stable-stringify": {
"flush-write-stream": {
"lodash.isarguments": {
"are-we-there-yet": {
"console-control-strings": {
"path-is-absolute": {
"is-fullwidth-code-point": {
"process-nextick-args": {
"strip-json-comments": {
"global-modules-path": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-fullwidth-code-point": {
"is-retry-allowed": {
"knuth-shuffle-seeded": {
"json-schema-traverse": {
"lodash._isnative": {
"json-parse-better-errors": {
"lodash._objecttypes": {
"lodash._shimkeys": {
"lodash.isarguments": {
"minimalistic-assert": {
"minimalistic-crypto-utils": {
"node-status-codes": {
"node-libs-browser": {
"move-concurrently": {
"path-is-absolute": {
"parallel-transform": {
"posix-character-classes": {
"process-nextick-args": {
"promise-inflight": {
"regenerator-transform": {
"regenerator-runtime": {
"registry-auth-token": {
"remove-trailing-separator": {
"require-directory": {
"require-main-filename": {
"serialize-javascript": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"source-map-resolve": {
"source-map-support": {
"stream-browserify": {
"strip-json-comments": {
"timers-browserify": {
"to-fast-properties": {
"uglifyjs-webpack-plugin": {
"v8-compile-cache": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-module-context": "1.7.8",
"write-file-atomic": {
"@webassemblyjs/wasm-edit": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8",
"is-fullwidth-code-point": {
"@babel/code-frame": "^7.0.0",
"@babel/highlight": "^7.0.0"
"@babel/generator": "^7.2.2",
"@babel/code-frame": {
"@babel/helpers": "^7.2.0",
"@babel/template": "^7.2.2",
"@babel/traverse": "^7.2.2",
"@babel/parser": "^7.2.2",
"@babel/generator": {
"@babel/types": "^7.2.2",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.3.0",
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/helper-builder-react-jsx": {
"@babel/helper-call-delegate": {
"@babel/types": "^7.3.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-create-class-features-plugin": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-replace-supers": "^7.2.3"
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/helper-define-map": {
"@babel/helper-explode-assignable-expression": {
"@babel/traverse": "^7.1.0",
"@babel/helper-function-name": {
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": {
"@babel/helper-member-expression-to-functions": {
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": {
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/template": "^7.2.2",
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.2.2",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-remap-async-to-generator": {
"@babel/helper-plugin-utils": {
"@babel/helper-regex": {
"@babel/helper-wrap-function": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/traverse": "^7.2.3",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-simple-access": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/helper-split-export-declaration": {
"@babel/template": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.2.0"
"@babel/traverse": "^7.1.5",
"@babel/types": "^7.3.0"
"@babel/template": "^7.1.2",
"@babel/plugin-external-helpers": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-proposal-class-properties": {
"@babel/highlight": {
"@babel/helper-create-class-features-plugin": "^7.3.0",
"@babel/plugin-proposal-decorators": {
"@babel/helper-create-class-features-plugin": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-export-default-from": {
"@babel/plugin-syntax-export-default-from": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.2.0"
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-proposal-nullish-coalescing-operator": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": {
"@babel/plugin-syntax-optional-chaining": "^7.2.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-export-default-from": {
"@babel/plugin-syntax-jsx": {
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/plugin-syntax-nullish-coalescing-operator": {
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-chaining": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-block-scoping": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/plugin-transform-flow-strip-types": {
"@babel/plugin-syntax-flow": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-function-name": {
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/plugin-transform-object-assign": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-parameters": {
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-builder-react-jsx": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-regenerator": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-runtime": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-regex": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-template-literals": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.2.2",
"@babel/generator": "^7.2.2",
"source-map-support": {
"@babel/types": "^7.2.2"
"@babel/code-frame": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.2.2",
"@babel/parser": "^7.2.3",
"from": "github:expo/vector-icons#expo-font-fix",
"@expo/vector-icons": {
"@types/lodash.zipobject": {
"@types/invariant": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"@types/fbemitter": {
"are-we-there-yet": {
"babel-code-frame": {
"babel-helper-builder-react-jsx": {
"babel-helper-function-name": {
"babel-helper-call-delegate": {
"babel-helper-get-function-arity": {
"babel-helper-hoist-variables": {
"babel-helper-define-map": {
"babel-helper-replace-supers": {
"babel-plugin-module-resolver": {
"babel-helper-optimise-call-expression": {
"babel-plugin-check-es2015-constants": {
"babel-plugin-syntax-class-properties": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-syntax-flow": {
"babel-plugin-syntax-jsx": {
"babel-plugin-syntax-trailing-function-commas": {
"babel-plugin-transform-es2015-arrow-functions": {
"babel-plugin-transform-class-properties": {
"babel-plugin-transform-es2015-block-scoped-functions": {
"babel-plugin-transform-es2015-computed-properties": {
"babel-plugin-transform-es2015-block-scoping": {
"babel-plugin-transform-es2015-classes": {
"babel-plugin-transform-es2015-destructuring": {
"babel-plugin-transform-es2015-function-name": {
"babel-plugin-transform-es2015-literals": {
"babel-plugin-transform-es2015-object-super": {
"babel-plugin-transform-es2015-parameters": {
"babel-plugin-transform-es2015-modules-commonjs": {
"babel-plugin-transform-es2015-shorthand-properties": {
"babel-plugin-transform-es2015-spread": {
"babel-plugin-transform-es3-member-expression-literals": {
"babel-plugin-transform-es2015-for-of": {
"babel-plugin-transform-es2015-template-literals": {
"babel-plugin-transform-flow-strip-types": {
"babel-plugin-transform-es3-property-literals": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-transform-react-jsx": {
"babel-plugin-transform-react-display-name": {
"regenerator-runtime": {
"babel-plugin-transform-strict-mode": {
"@babel/plugin-proposal-decorators": "^7.1.0",
"babel-preset-fbjs": {
"regenerator-runtime": {
"to-fast-properties": {
"babel-preset-expo": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"collection-visit": {
"component-emitter": {
"buffer-alloc-unsafe": {
"create-react-class": {
"create-react-context": {
"decode-uri-component": {
"convert-source-map": {
"is-accessor-descriptor": {
"escape-string-regexp": {
"is-data-descriptor": {
"@babel/runtime": "^7.1.2",
"@types/fbemitter": "^2.0.32",
"@types/lodash.zipobject": "^4.1.4",
"@expo/websql": "^1.0.1",
"@types/qs": "^6.5.1",
"event-target-shim": {
"@types/invariant": "^2.2.29",
"@types/uuid-js": "^0.7.1",
"expo-analytics-segment": {
"@types/websql": "^0.0.27",
"expo-app-loader-provider": {
"expo-background-fetch": {
"expo-barcode-scanner": {
"expo-barcode-scanner-interface": {
"expo-camera-interface": {
"expo-constants-interface": {
"expo-face-detector-interface": {
"expo-file-system": {
"expo-face-detector": {
"expo-file-system-interface": {
"expo-image-loader-interface": {
"expo-local-authentication": {
"expo-google-sign-in": {
"expo-font-interface": {
"expo-media-library": {
"expo-permissions": {
"expo-localization": {
"expo-permissions-interface": {
"expo-payments-stripe": {
"expo-sensors-interface": {
"expo-react-native-adapter": {
"expo-task-manager-interface": {
"fast-json-stable-stringify": {
"find-babel-config": {
"follow-redirects": {
"expo-task-manager": {
"are-we-there-yet": {
"console-control-strings": {
"process-nextick-args": {
"is-fullwidth-code-point": {
"strip-json-comments": {
"hoist-non-react-statics": {
"is-accessor-descriptor": {
"path-is-absolute": {
"is-builtin-module": {
"is-fullwidth-code-point": {
"is-equal-shallow": {
"is-data-descriptor": {
"json-parse-better-errors": {
"is-posix-bracket": {
"json-schema-traverse": {
"json-stable-stringify": {
"lodash.mapvalues": {
"lottie-react-native": {
"lodash.zipobject": {
"@babel/core": "^7.0.0",
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.0.0",
"@babel/plugin-external-helpers": "^7.0.0",
"isomorphic-fetch": {
"@babel/template": "^7.0.0",
"@babel/traverse": "^7.0.0",
"metro-babel7-plugin-react-transform": {
"@babel/helper-module-imports": "^7.0.0"
"metro-react-native-babel-preset": {
"@babel/plugin-proposal-class-properties": "^7.0.0",
"@babel/plugin-proposal-export-default-from": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-dynamic-import": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-syntax-export-default-from": "^7.0.0",
"@babel/plugin-transform-classes": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.0.0",
"@babel/plugin-transform-object-assign": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/template": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.0.0",
"@babel/core": "^7.0.0",
"metro-babel-register": {
"@babel/plugin-proposal-class-properties": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": "^7.0.0",
"metro-babel7-plugin-react-transform": {
"@babel/plugin-transform-modules-commonjs": "^7.0.0",
"@babel/register": "^7.0.0",
"metro-react-native-babel-preset": {
"@babel/helper-module-imports": "^7.0.0"
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"metro-minify-uglify": {
"@babel/plugin-proposal-class-properties": "^7.0.0",
"@babel/plugin-proposal-export-default-from": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-export-default-from": "^7.0.0",
"@babel/plugin-syntax-dynamic-import": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-classes": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.0.0",
"@babel/plugin-transform-object-assign": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0",
"@babel/plugin-transform-runtime": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/template": "^7.0.0",
"node-modules-regexp": {
"normalize-package-data": {
"parse-node-version": {
"metro-source-map": {
"posix-character-classes": {
"path-is-absolute": {
"pouchdb-collections": {
"process-nextick-args": {
"react-deep-force-update": {
"react-clone-referenced-element": {
"react-lifecycles-compat": {
"regenerator-runtime": {
"react-native-drawer-layout": {
"react-devtools-core": {
"react-native-dismiss-keyboard": {
"react-native-drawer-layout-polyfill": {
"react-native-gesture-handler": {
"react-native-maps": {
"react-native-branch": {
"from": "github:expo/react-native-maps#v0.22.1-exp.0"
"react-native-reanimated": {
"react-native-safe-area-view": {
"react-native-router-flux": {
"react-native-safe-module": {
"react-native-screens": {
"react-native-tab-view": {
"react-native-view-shot": {
"react-native-vector-icons": {
"react-native-svg": {
"react-navigation-deprecated-tab-navigator": {
"react-navigation-drawer": {
"react-navigation-stack": {
"react-navigation-tabs": {
"react-navigation": {
"react-native-tab-view": {
"@babel/runtime": "^7.2.0",
"react-timer-mixin": {
"hoist-non-react-statics": {
"react-transform-hmr": {
"regenerate-unicode-properties": {
"regenerator-transform": {
"remove-trailing-separator": {
"rx-lite-aggregates": {
"regenerator-runtime": {
"is-accessor-descriptor": {
"require-directory": {
"require-main-filename": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"source-map-support": {
"spdx-expression-parse": {
"is-data-descriptor": {
"spdx-license-ids": {
"source-map-resolve": {
"strict-uri-encode": {
"is-fullwidth-code-point": {
"symbol-observable": {
"unicode-match-property-ecmascript": {
"to-fast-properties": {
"stacktrace-parser": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-value-ecmascript": {
"validate-npm-package-license": {
"unicode-property-aliases-ecmascript": {
"write-file-atomic": {
"@angular-devkit/core": "0.8.4",
"@angular-devkit/architect": "0.8.4",
"@angular-devkit/core": "0.8.4",
"@angular-devkit/build-angular": {
"@angular-devkit/build-optimizer": "0.8.4",
"@ngtools/webpack": "6.2.4",
"@angular-devkit/architect": {
"@angular-devkit/build-webpack": {
"@angular-devkit/build-webpack": "0.8.4",
"@angular-devkit/build-optimizer": {
"@angular-devkit/architect": "0.8.4",
"@angular-devkit/core": {
"@angular-devkit/core": "0.8.4",
"@angular-devkit/schematics": {
"@angular-devkit/core": "0.8.4",
"@angular/animations": {
"@angular-devkit/core": "0.8.4",
"@angular-devkit/architect": "0.8.4",
"@angular-devkit/schematics": "0.8.4",
"@schematics/angular": "0.8.4",
"@angular/compiler-cli": {
"@schematics/update": "0.8.4",
"json-schema-traverse": {
"@angular/compiler": {
"@angular/language-service": {
"@angular/platform-browser-dynamic": {
"@angular/platform-browser": {
"@babel/code-frame": {
"@babel/highlight": "^7.0.0"
"@babel/generator": {
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.1.2",
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/highlight": {
"@babel/types": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.1.2",
"@babel/types": "^7.0.0"
"@babel/generator": "^7.0.0",
"@babel/types": "^7.1.2"
"@babel/code-frame": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/parser": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.0.0",
"@angular-devkit/core": "0.8.4",
"to-fast-properties": {
"@schematics/angular": {
"@ngtools/webpack": {
"@angular-devkit/core": "0.8.4",
"@angular-devkit/schematics": "0.8.4",
"@schematics/update": {
"@angular-devkit/core": "0.8.4",
"@types/jasminewd2": {
"@angular-devkit/schematics": "0.8.4",
"@types/selenium-webdriver": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/ast": {
"@webassemblyjs/helper-module-context": "1.7.8",
"@types/jasmine": "*"
"@webassemblyjs/wast-parser": "1.7.8"
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/wast-printer": "1.7.8"
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/ieee754": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8"
"@webassemblyjs/leb128": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-edit": {
"@xtuc/long": "4.2.1"
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-gen": "1.7.8",
"@webassemblyjs/helper-wasm-section": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wast-printer": "1.7.8"
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/wasm-opt": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/ieee754": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/leb128": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/utf8": "1.7.8"
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/wasm-parser": "1.7.8"
"@webassemblyjs/wasm-gen": "1.7.8",
"@webassemblyjs/helper-api-error": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/ieee754": "1.7.8",
"@webassemblyjs/leb128": "1.7.8",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/utf8": "1.7.8"
"@webassemblyjs/helper-api-error": "1.7.8",
"@webassemblyjs/floating-point-hex-parser": "1.7.8",
"@webassemblyjs/helper-code-frame": "1.7.8",
"@xtuc/long": "4.2.1"
"@webassemblyjs/helper-fsm": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/wast-parser": "1.7.8",
"acorn-dynamic-import": {
"append-transform": {
"@xtuc/long": "4.2.1"
"array-find-index": {
"are-we-there-yet": {
"arraybuffer.slice": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"base64-arraybuffer": {
"babel-code-frame": {
"binary-extensions": {
"buffer-alloc-unsafe": {
"chrome-trace-event": {
"builtin-status-codes": {
"circular-dependency-plugin": {
"browserify-cipher": {
"compare-versions": {
"connect-history-api-fallback": {
"collection-visit": {
"component-inherit": {
"console-browserify": {
"console-control-strings": {
"convert-source-map": {
"content-disposition": {
"component-emitter": {
"constants-browserify": {
"crypto-browserify": {
"cookie-signature": {
"copy-concurrently": {
"copy-webpack-plugin": {
"css-selector-tokenizer": {
"decode-uri-component": {
"currently-unhandled": {
"default-require-extensions": {
"is-accessor-descriptor": {
"define-properties": {
"is-data-descriptor": {
"electron-to-chromium": {
"engine.io-client": {
"engine.io-parser": {
"escape-string-regexp": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"fast-levenshtein": {
"fast-json-stable-stringify": {
"follow-redirects": {
"flush-write-stream": {
"fs-write-stream-atomic": {
"console-control-strings": {
"are-we-there-yet": {
"is-fullwidth-code-point": {
"html-webpack-plugin": {
"strip-json-comments": {
"enhanced-resolve": {
"process-nextick-args": {
"path-is-absolute": {
"is-builtin-module": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-posix-bracket": {
"is-fullwidth-code-point": {
"istanbul-lib-instrument": {
"is-equal-shallow": {
"istanbul-lib-coverage": {
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/template": "^7.0.0",
"istanbul-instrumenter-loader": {
"istanbul-lib-hook": {
"@babel/types": "^7.0.0",
"istanbul-lib-coverage": {
"istanbul-lib-source-maps": {
"istanbul-lib-coverage": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"json-parse-better-errors": {
"jasmine-spec-reporter": {
"istanbul-lib-coverage": {
"json-schema-traverse": {
"istanbul-reports": {
"json-stringify-safe": {
"karma-chrome-launcher": {
"karma-coverage-istanbul-reporter": {
"process-nextick-args": {
"karma-source-map-support": {
"karma-jasmine-html-reporter": {
"license-webpack-plugin": {
"lodash.clonedeep": {
"minimalistic-assert": {
"lodash.mergewith": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"minimalistic-crypto-utils": {
"move-concurrently": {
"multicast-dns-service-types": {
"node-libs-browser": {
"normalize-package-data": {
"object.getownpropertydescriptors": {
"npm-registry-client": {
"parallel-transform": {
"path-is-absolute": {
"object-component": {
"postcss-value-parser": {
"posix-character-classes": {
"postcss-load-config": {
"process-nextick-args": {
"@types/node": "^6.0.46",
"@types/selenium-webdriver": "^3.0.0",
"@types/q": "^0.0.32",
"promise-inflight": {
"webdriver-manager": {
"reflect-metadata": {
"source-map-support": {
"require-from-string": {
"regenerator-runtime": {
"remove-trailing-separator": {
"require-main-filename": {
"selenium-webdriver": {
"semver-intersect": {
"require-directory": {
"serialize-javascript": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"socket.io-adapter": {
"socket.io-parser": {
"source-map-loader": {
"source-map-resolve": {
"spdx-expression-parse": {
"source-map-support": {
"spdx-license-ids": {
"stats-webpack-plugin": {
"stream-browserify": {
"socket.io-client": {
"symbol-observable": {
"to-fast-properties": {
"timers-browserify": {
"uglifyjs-webpack-plugin": {
"validate-npm-package-name": {
"webdriver-js-extender": {
"validate-npm-package-license": {
"@types/selenium-webdriver": "^3.0.0",
"@webassemblyjs/helper-module-context": "1.7.8",
"@webassemblyjs/wasm-edit": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8",
"webpack-dev-middleware": {
"webpack-dev-server": {
"is-fullwidth-code-point": {
"webpack-subresource-integrity": {
"websocket-driver": {
"websocket-extensions": {
"@angular-devkit/architect": {
"@angular-devkit/core": "0.8.4",
"@angular-devkit/architect": "0.8.4",
"@angular-devkit/build-angular": {
"@angular-devkit/build-optimizer": "0.8.4",
"@angular-devkit/core": "0.8.4",
"@angular-devkit/build-webpack": "0.8.4",
"@angular-devkit/build-optimizer": {
"@angular-devkit/architect": "0.8.4",
"@angular-devkit/core": "0.8.4",
"@ngtools/webpack": "6.2.4",
"@angular-devkit/build-webpack": {
"@angular-devkit/core": {
"@angular-devkit/core": "0.8.4",
"@angular/animations": {
"@angular-devkit/schematics": {
"@angular-devkit/core": "0.8.4",
"@angular-devkit/architect": "0.8.4",
"@schematics/angular": "0.8.4",
"@angular-devkit/schematics": "0.8.4",
"@schematics/update": "0.8.4",
"json-schema-traverse": {
"@angular/compiler": {
"@angular/compiler-cli": {
"@angular/platform-browser-dynamic": {
"@angular/platform-browser": {
"@babel/code-frame": {
"@angular/language-service": {
"@babel/types": "^7.1.2",
"@babel/highlight": "^7.0.0"
"@babel/helper-function-name": {
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/generator": {
"@babel/helper-get-function-arity": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.1.2"
"@babel/parser": "^7.1.2",
"@babel/code-frame": "^7.0.0",
"@babel/highlight": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.1.0",
"@babel/types": "^7.0.0",
"@angular-devkit/core": "0.8.4",
"@ngtools/webpack": {
"to-fast-properties": {
"@schematics/angular": {
"@angular-devkit/schematics": "0.8.4",
"@angular-devkit/core": "0.8.4",
"@angular-devkit/core": "0.8.4",
"@angular-devkit/schematics": "0.8.4",
"@types/jasminewd2": {
"@schematics/update": {
"@types/selenium-webdriver": {
"@webassemblyjs/ast": {
"@webassemblyjs/helper-module-context": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wast-parser": "1.7.8"
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/wast-printer": "1.7.8"
"@types/jasmine": "*"
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8"
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/leb128": {
"@xtuc/ieee754": "^1.2.0"
"@xtuc/long": "4.2.1"
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/ieee754": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8",
"@webassemblyjs/helper-wasm-section": "1.7.8",
"@webassemblyjs/wasm-opt": "1.7.8",
"@webassemblyjs/wast-printer": "1.7.8"
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/ieee754": "1.7.8",
"@webassemblyjs/utf8": "1.7.8"
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-buffer": "1.7.8",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/leb128": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8"
"@webassemblyjs/helper-api-error": "1.7.8",
"@webassemblyjs/helper-wasm-bytecode": "1.7.8",
"@webassemblyjs/leb128": "1.7.8",
"@webassemblyjs/ieee754": "1.7.8",
"@webassemblyjs/utf8": "1.7.8"
"@webassemblyjs/wast-parser": {
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/floating-point-hex-parser": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/helper-api-error": "1.7.8",
"@webassemblyjs/helper-code-frame": "1.7.8",
"@webassemblyjs/helper-fsm": "1.7.8",
"@webassemblyjs/wasm-gen": "1.7.8",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/ast": "1.7.8",
"@xtuc/long": "4.2.1"
"@webassemblyjs/wast-parser": "1.7.8",
"@xtuc/long": "4.2.1"
"acorn-dynamic-import": {
"append-transform": {
"are-we-there-yet": {
"arraybuffer.slice": {
"array-find-index": {
"babel-code-frame": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"browserify-cipher": {
"base64-arraybuffer": {
"buffer-alloc-unsafe": {
"builtin-status-codes": {
"binary-extensions": {
"chrome-trace-event": {
"circular-dependency-plugin": {
"compare-versions": {
"component-emitter": {
"collection-visit": {
"component-inherit": {
"connect-history-api-fallback": {
"console-control-strings": {
"console-browserify": {
"constants-browserify": {
"content-disposition": {
"cookie-signature": {
"copy-concurrently": {
"convert-source-map": {
"copy-webpack-plugin": {
"css-selector-tokenizer": {
"currently-unhandled": {
"crypto-browserify": {
"decode-uri-component": {
"default-require-extensions": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"electron-to-chromium": {
"engine.io-parser": {
"engine.io-client": {
"define-properties": {
"escape-string-regexp": {
"enhanced-resolve": {
"is-accessor-descriptor": {
"fast-json-stable-stringify": {
"fast-levenshtein": {
"is-data-descriptor": {
"follow-redirects": {
"flush-write-stream": {
"fs-write-stream-atomic": {
"console-control-strings": {
"is-fullwidth-code-point": {
"are-we-there-yet": {
"process-nextick-args": {
"path-is-absolute": {
"html-webpack-plugin": {
"is-accessor-descriptor": {
"is-builtin-module": {
"strip-json-comments": {
"is-fullwidth-code-point": {
"is-data-descriptor": {
"istanbul-lib-coverage": {
"is-equal-shallow": {
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.0.0",
"istanbul-lib-instrument": {
"@babel/types": "^7.0.0",
"@babel/template": "^7.0.0",
"istanbul-instrumenter-loader": {
"@babel/traverse": "^7.0.0",
"istanbul-lib-hook": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"istanbul-lib-coverage": {
"istanbul-lib-source-maps": {
"istanbul-lib-coverage": {
"jasmine-spec-reporter": {
"json-parse-better-errors": {
"istanbul-reports": {
"json-schema-traverse": {
"process-nextick-args": {
"karma-chrome-launcher": {
"karma-jasmine-html-reporter": {
"karma-source-map-support": {
"karma-coverage-istanbul-reporter": {
"lodash.clonedeep": {
"json-stringify-safe": {
"license-webpack-plugin": {
"lodash.mergewith": {
"mini-css-extract-plugin": {
"multicast-dns-service-types": {
"minimalistic-assert": {
"minimalistic-crypto-utils": {
"merge-descriptors": {
"node-libs-browser": {
"normalize-package-data": {
"move-concurrently": {
"npm-registry-client": {
"object.getownpropertydescriptors": {
"parallel-transform": {
"postcss-value-parser": {
"path-is-absolute": {
"posix-character-classes": {
"postcss-load-config": {
"object-component": {
"process-nextick-args": {
"@types/q": "^0.0.32",
"promise-inflight": {
"@types/node": "^6.0.46",
"@types/selenium-webdriver": "^3.0.0",
"source-map-support": {
"webdriver-manager": {
"regenerator-runtime": {
"remove-trailing-separator": {
"require-directory": {
"require-from-string": {
"require-main-filename": {
"selenium-webdriver": {
"serialize-javascript": {
"reflect-metadata": {
"semver-intersect": {
"is-accessor-descriptor": {
"socket.io-adapter": {
"is-data-descriptor": {
"source-map-loader": {
"socket.io-client": {
"source-map-resolve": {
"socket.io-parser": {
"source-map-support": {
"spdx-expression-parse": {
"stats-webpack-plugin": {
"symbol-observable": {
"spdx-license-ids": {
"timers-browserify": {
"to-fast-properties": {
"validate-npm-package-license": {
"uglifyjs-webpack-plugin": {
"validate-npm-package-name": {
"webdriver-js-extender": {
"stream-browserify": {
"@types/selenium-webdriver": "^3.0.0",
"@webassemblyjs/helper-module-context": "1.7.8",
"@webassemblyjs/ast": "1.7.8",
"@webassemblyjs/wasm-edit": "1.7.8",
"@webassemblyjs/wasm-parser": "1.7.8",
"webpack-dev-middleware": {
"is-fullwidth-code-point": {
"webpack-dev-server": {
"webpack-subresource-integrity": {
"websocket-driver": {
"websocket-extensions": {
"@babel/generator": "^7.2.2",
"@babel/code-frame": {
"@babel/highlight": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/helpers": "^7.2.0",
"@babel/traverse": "^7.2.2",
"@babel/types": "^7.2.2",
"@babel/parser": "^7.2.2",
"@babel/template": "^7.2.2",
"@babel/generator": {
"@babel/types": "^7.3.0",
"@babel/helper-annotate-as-pure": {
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/helper-builder-react-jsx": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.3.0",
"@babel/helper-call-delegate": {
"@babel/traverse": "^7.1.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-create-class-features-plugin": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-replace-supers": "^7.2.3"
"@babel/types": "^7.0.0",
"@babel/helper-define-map": {
"@babel/helper-function-name": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-explode-assignable-expression": {
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": {
"@babel/helper-hoist-variables": {
"@babel/helper-get-function-arity": {
"@babel/helper-member-expression-to-functions": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": {
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.2.2",
"@babel/helper-optimise-call-expression": {
"@babel/helper-plugin-utils": {
"@babel/types": "^7.2.2",
"@babel/helper-regex": {
"@babel/helper-remap-async-to-generator": {
"@babel/types": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/traverse": "^7.2.3",
"@babel/helper-simple-access": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/template": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/template": "^7.1.2",
"@babel/traverse": "^7.1.5",
"@babel/types": "^7.2.0"
"@babel/highlight": {
"@babel/types": "^7.3.0"
"@babel/plugin-external-helpers": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-proposal-class-properties": {
"@babel/helper-create-class-features-plugin": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.2.0"
"@babel/helper-create-class-features-plugin": "^7.3.0",
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-export-default-from": {
"@babel/plugin-syntax-export-default-from": "^7.2.0"
"@babel/plugin-proposal-nullish-coalescing-operator": {
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/plugin-proposal-optional-chaining": {
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-optional-chaining": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-export-default-from": {
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-nullish-coalescing-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-chaining": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-syntax-typescript": {
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/plugin-syntax-flow": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-parameters": {
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-call-delegate": "^7.1.0",
"@babel/plugin-transform-object-assign": {
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-builder-react-jsx": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-regenerator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-runtime": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-shorthand-properties": {
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-template-literals": {
"@babel/helper-regex": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/parser": "^7.2.2",
"@babel/code-frame": "^7.0.0",
"source-map-support": {
"@babel/types": "^7.2.2"
"@babel/generator": "^7.2.2",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/parser": "^7.2.3",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.2.2",
"@react-navigation/core": {
"from": "github:expo/vector-icons#expo-font-fix",
"hoist-non-react-statics": {
"@react-navigation/native": {
"@expo/vector-icons": {
"hoist-non-react-statics": {
"@types/fbemitter": {
"@types/lodash.zipobject": {
"is-accessor-descriptor": {
"@types/invariant": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"append-transform": {
"is-data-descriptor": {
"are-we-there-yet": {
"babel-helper-builder-react-jsx": {
"babel-helper-define-map": {
"babel-code-frame": {
"babel-helper-function-name": {
"babel-helper-get-function-arity": {
"babel-helper-call-delegate": {
"babel-helper-hoist-variables": {
"babel-helper-replace-supers": {
"babel-plugin-check-es2015-constants": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-module-resolver": {
"babel-plugin-syntax-class-properties": {
"babel-plugin-syntax-flow": {
"babel-helper-optimise-call-expression": {
"babel-plugin-syntax-jsx": {
"babel-plugin-syntax-trailing-function-commas": {
"babel-plugin-transform-es2015-arrow-functions": {
"babel-plugin-transform-class-properties": {
"babel-plugin-transform-es2015-block-scoped-functions": {
"babel-plugin-transform-es2015-block-scoping": {
"babel-plugin-transform-es2015-computed-properties": {
"babel-plugin-transform-es2015-classes": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-transform-es2015-destructuring": {
"babel-plugin-transform-es2015-function-name": {
"babel-plugin-transform-es2015-for-of": {
"babel-plugin-transform-es2015-literals": {
"babel-plugin-transform-es2015-modules-commonjs": {
"babel-plugin-transform-es2015-parameters": {
"babel-plugin-transform-es2015-object-super": {
"babel-plugin-transform-es2015-shorthand-properties": {
"babel-plugin-transform-es2015-template-literals": {
"babel-plugin-transform-es3-member-expression-literals": {
"babel-plugin-transform-es3-property-literals": {
"babel-plugin-transform-flow-strip-types": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-transform-react-jsx": {
"babel-plugin-transform-react-display-name": {
"babel-plugin-transform-es2015-spread": {
"@babel/plugin-proposal-decorators": "^7.1.0",
"babel-plugin-transform-strict-mode": {
"babel-preset-fbjs": {
"babel-preset-expo": {
"regenerator-runtime": {
"to-fast-properties": {
"babel-preset-jest": {
"is-data-descriptor": {
"browser-process-hrtime": {
"collection-visit": {
"is-accessor-descriptor": {
"convert-source-map": {
"buffer-alloc-unsafe": {
"create-react-class": {
"create-react-context": {
"default-require-extensions": {
"decode-uri-component": {
"define-properties": {
"is-accessor-descriptor": {
"component-emitter": {
"escape-string-regexp": {
"is-data-descriptor": {
"@babel/runtime": "^7.1.2",
"event-target-shim": {
"@expo/websql": "^1.0.1",
"@types/fbemitter": "^2.0.32",
"@types/lodash.zipobject": "^4.1.4",
"@types/qs": "^6.5.1",
"@types/uuid-js": "^0.7.1",
"@types/invariant": "^2.2.29",
"expo-analytics-segment": {
"@types/websql": "^0.0.27",
"expo-barcode-scanner-interface": {
"expo-app-loader-provider": {
"expo-background-fetch": {
"expo-barcode-scanner": {
"expo-camera-interface": {
"expo-constants-interface": {
"expo-face-detector": {
"expo-face-detector-interface": {
"expo-file-system": {
"expo-file-system-interface": {
"expo-google-sign-in": {
"expo-image-loader-interface": {
"expo-local-authentication": {
"expo-localization": {
"expo-font-interface": {
"expo-payments-stripe": {
"expo-permissions": {
"expo-react-native-adapter": {
"expo-permissions-interface": {
"expo-media-library": {
"expo-sensors-interface": {
"expo-task-manager-interface": {
"fast-json-stable-stringify": {
"expo-task-manager": {
"find-babel-config": {
"are-we-there-yet": {
"is-fullwidth-code-point": {
"path-is-absolute": {
"console-control-strings": {
"process-nextick-args": {
"html-encoding-sniffer": {
"fast-levenshtein": {
"hoist-non-react-statics": {
"strip-json-comments": {
"is-builtin-module": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-fullwidth-code-point": {
"is-equal-shallow": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"is-posix-bracket": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"jest-environment-jsdom": {
"isomorphic-fetch": {
"jest-environment-node": {
"jest-changed-files": {
"@babel/core": "^7.1.0",
"@babel/code-frame": "^7.0.0-beta.35",
"jest-message-util": {
"jest-leak-detector": {
"jest-matcher-utils": {
"json-parse-better-errors": {
"jest-resolve-dependencies": {
"write-file-atomic": {
"source-map-support": {
"json-stringify-safe": {
"json-schema-traverse": {
"lodash.mapvalues": {
"json-stable-stringify": {
"lodash.zipobject": {
"lottie-react-native": {
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.0.0",
"@babel/core": "^7.0.0",
"@babel/plugin-external-helpers": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/template": "^7.0.0",
"metro-babel7-plugin-react-transform": {
"metro-react-native-babel-preset": {
"@babel/helper-module-imports": "^7.0.0"
"@babel/plugin-proposal-class-properties": "^7.0.0",
"@babel/plugin-proposal-export-default-from": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-dynamic-import": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-syntax-export-default-from": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.0.0",
"@babel/plugin-transform-classes": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.0.0",
"@babel/plugin-transform-object-assign": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"metro-babel-register": {
"@babel/template": "^7.0.0",
"@babel/core": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-class-properties": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": "^7.0.0",
"metro-babel7-plugin-react-transform": {
"@babel/plugin-transform-modules-commonjs": "^7.0.0",
"@babel/register": "^7.0.0",
"metro-minify-uglify": {
"@babel/helper-module-imports": "^7.0.0"
"@babel/plugin-proposal-class-properties": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-dynamic-import": "^7.0.0",
"metro-react-native-babel-preset": {
"@babel/plugin-proposal-export-default-from": "^7.0.0",
"@babel/plugin-syntax-export-default-from": "^7.0.0",
"@babel/plugin-transform-classes": "^7.0.0",
"@babel/plugin-proposal-optional-chaining": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.0.0",
"@babel/plugin-transform-object-assign": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-runtime": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/template": "^7.0.0",
"metro-source-map": {
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"node-modules-regexp": {
"object.getownpropertydescriptors": {
"parse-node-version": {
"normalize-package-data": {
"pouchdb-collections": {
"posix-character-classes": {
"path-is-absolute": {
"process-nextick-args": {
"react-clone-referenced-element": {
"react-devtools-core": {
"react-deep-force-update": {
"react-lifecycles-compat": {
"react-native-gesture-handler": {
"react-native-branch": {
"from": "github:expo/react-native-maps#v0.22.1-exp.0"
"regenerator-runtime": {
"react-native-platform-touchable": {
"react-native-maps": {
"react-native-safe-area-view": {
"react-native-reanimated": {
"react-native-screens": {
"react-native-svg": {
"react-native-tab-view": {
"react-native-view-shot": {
"react-native-safe-module": {
"react-native-vector-icons": {
"@react-navigation/core": "3.0.2",
"react-navigation": {
"react-navigation-drawer": {
"@react-navigation/native": "3.0.3",
"react-navigation-tabs": {
"react-navigation-stack": {
"react-timer-mixin": {
"react-transform-hmr": {
"regenerate-unicode-properties": {
"regenerator-runtime": {
"request-promise-core": {
"remove-trailing-separator": {
"regenerator-transform": {
"request-promise-native": {
"react-test-renderer": {
"require-main-filename": {
"is-accessor-descriptor": {
"rx-lite-aggregates": {
"require-directory": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"source-map-resolve": {
"is-accessor-descriptor": {
"source-map-support": {
"is-data-descriptor": {
"spdx-expression-parse": {
"is-data-descriptor": {
"spdx-license-ids": {
"stacktrace-parser": {
"is-fullwidth-code-point": {
"unicode-match-property-ecmascript": {
"to-fast-properties": {
"unicode-canonical-property-names-ecmascript": {
"strict-uri-encode": {
"unicode-property-aliases-ecmascript": {
"unicode-match-property-value-ecmascript": {
"stealthy-require": {
"validate-npm-package-license": {
"webidl-conversions": {
"write-file-atomic": {
"xml-name-validator": {
"@angular/animations": {
"@angular/compiler-cli": {
"@babel/code-frame": {
"@angular-devkit/build-optimizer": {
"@angular/platform-browser": {
"@angular/compiler": {
"@babel/highlight": "^7.0.0"
"@angular/platform-browser-dynamic": {
"@babel/generator": {
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.1.3",
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": {
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/parser": "^7.1.2",
"@babel/highlight": {
"@babel/types": "^7.1.2"
"@babel/code-frame": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/parser": "^7.1.3",
"@babel/generator": "^7.1.3",
"@babel/types": "^7.1.3",
"@ionic-native/core": {
"to-fast-properties": {
"@ionic-native/status-bar": {
"@ionic-native/splash-screen": {
"@angular-devkit/build-optimizer": "0.0.35",
"@types/selenium-webdriver": {
"@ionic/app-scripts": {
"acorn-dynamic-import": {
"angular2-template-loader": {
"array-find-index": {
"append-transform": {
"arraybuffer.slice": {
"are-we-there-yet": {
"is-accessor-descriptor": {
"babel-code-frame": {
"is-data-descriptor": {
"binary-extensions": {
"browserify-cipher": {
"browserify-istanbul": {
"builtin-status-codes": {
"base64-arraybuffer": {
"buffer-alloc-unsafe": {
"compare-versions": {
"collection-visit": {
"component-inherit": {
"console-browserify": {
"component-emitter": {
"console-control-strings": {
"connect-livereload": {
"constants-browserify": {
"continuable-cache": {
"content-disposition": {
"cookie-signature": {
"convert-source-map": {
"cordova-registry-mapper": {
"path-is-absolute": {
"cordova-plugin-device": {
"cordova-plugin-ionic-keyboard": {
"cordova-plugin-splashscreen": {
"cordova-plugin-ionic-webview": {
"crypto-browserify": {
"cordova-plugin-statusbar": {
"currently-unhandled": {
"cordova-plugin-whitelist": {
"default-require-extensions": {
"is-accessor-descriptor": {
"define-properties": {
"decode-uri-component": {
"is-data-descriptor": {
"electron-to-chromium": {
"enhanced-resolve": {
"escape-string-regexp": {
"engine.io-parser": {
"fast-json-stable-stringify": {
"engine.io-client": {
"first-chunk-stream": {
"are-we-there-yet": {
"console-control-strings": {
"path-is-absolute": {
"is-fullwidth-code-point": {
"follow-redirects": {
"strip-json-comments": {
"process-nextick-args": {
"generate-object-property": {
"is-accessor-descriptor": {
"generate-function": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-builtin-module": {
"is-fullwidth-code-point": {
"is-my-json-valid": {
"is-posix-bracket": {
"@babel/generator": "^7.0.0",
"istanbul-lib-coverage": {
"istanbul-lib-instrument": {
"@babel/parser": "^7.0.0",
"@babel/template": "^7.0.0",
"@babel/types": "^7.0.0",
"istanbul-instrumenter-loader": {
"istanbul-lib-hook": {
"@babel/traverse": "^7.0.0",
"istanbul-lib-report": {
"istanbul-lib-coverage": {
"istanbul-lib-source-maps": {
"istanbul-lib-coverage": {
"istanbul-lib-instrument": {
"istanbul-reports": {
"istanbul-lib-coverage": {
"is-accessor-descriptor": {
"jasmine-spec-reporter": {
"process-nextick-args": {
"json-schema-traverse": {
"is-data-descriptor": {
"json-stringify-safe": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"karma-chrome-launcher": {
"karma-coverage-istanbul-reporter": {
"localforage-cordovasqlitedriver": {
"karma-jasmine-html-reporter": {
"karma-sourcemap-loader": {
"lodash._objecttypes": {
"lodash._isnative": {
"lodash.mergewith": {
"lodash.clonedeep": {
"merge-descriptors": {
"minimalistic-crypto-utils": {
"lodash._shimkeys": {
"normalize-package-data": {
"minimalistic-assert": {
"github-url-from-git": {
"child-process-close": {
"node-libs-browser": {
"github-url-from-username-repo": {
"npm-cache-filename": {
"npm-install-checks": {
"init-package-json": {
"npm-registry-client": {
"read-package-json": {
"npm-user-validate": {
"object-component": {
"normalize-package-data": {
"ordered-read-streams": {
"json-stringify-safe": {
"path-is-absolute": {
"postcss-value-parser": {
"posix-character-classes": {
"process-nextick-args": {
"@types/q": "^0.0.32",
"@types/node": "^6.0.46",
"@types/selenium-webdriver": "^3.0.0",
"webdriver-manager": {
"source-map-support": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"regenerator-runtime": {
"reflect-metadata": {
"proxy-middleware": {
"remove-trailing-separator": {
"require-directory": {
"require-main-filename": {
"rollup-plugin-node-resolve": {
"rollup-pluginutils": {
"selenium-webdriver": {
"serviceworker-cache-polyfill": {
"is-accessor-descriptor": {
"rollup-plugin-commonjs": {
"socket.io-client": {
"is-data-descriptor": {
"source-map-resolve": {
"socket.io-parser": {
"socket.io-adapter": {
"spdx-expression-parse": {
"spdx-license-ids": {
"source-map-support": {
"stream-browserify": {
"symbol-observable": {
"timers-browserify": {
"is-accessor-descriptor": {
"tslint-eslint-rules": {
"is-data-descriptor": {
"to-fast-properties": {
"is-accessor-descriptor": {
"uglify-to-browserify": {
"is-data-descriptor": {
"uglifyjs-webpack-plugin": {
"validate-npm-package-license": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"webdriver-js-extender": {
"@types/selenium-webdriver": "^3.0.0",
"is-fullwidth-code-point": {
"is-data-descriptor": {
"webpack-dev-middleware": {
"websocket-driver": {
"websocket-extensions": {
"acorn-dynamic-import": {
"array-find-index": {
"append-transform": {
"babel-helper-call-delegate": {
"babel-code-frame": {
"babel-helper-define-map": {
"babel-helper-get-function-arity": {
"babel-helper-explode-assignable-expression": {
"babel-helper-builder-react-jsx": {
"babel-helper-optimise-call-expression": {
"babel-helper-hoist-variables": {
"babel-helper-remap-async-to-generator": {
"babel-helper-function-name": {
"babel-helper-replace-supers": {
"babel-plugin-check-es2015-constants": {
"babel-helper-regex": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-syntax-async-functions": {
"babel-plugin-syntax-class-properties": {
"babel-plugin-syntax-exponentiation-operator": {
"babel-plugin-syntax-jsx": {
"babel-plugin-syntax-dynamic-import": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-transform-async-to-generator": {
"babel-plugin-syntax-trailing-function-commas": {
"babel-plugin-transform-es2015-arrow-functions": {
"babel-plugin-transform-es2015-block-scoping": {
"babel-plugin-transform-es2015-block-scoped-functions": {
"babel-plugin-transform-es2015-computed-properties": {
"babel-plugin-transform-es2015-duplicate-keys": {
"babel-plugin-transform-class-properties": {
"babel-plugin-transform-es2015-destructuring": {
"babel-plugin-transform-es2015-classes": {
"babel-plugin-transform-es2015-function-name": {
"babel-plugin-transform-es2015-literals": {
"babel-plugin-transform-es2015-modules-amd": {
"babel-plugin-transform-es2015-modules-commonjs": {
"babel-plugin-transform-es2015-for-of": {
"babel-plugin-transform-es2015-modules-umd": {
"babel-plugin-transform-es2015-modules-systemjs": {
"babel-plugin-transform-es2015-object-super": {
"babel-plugin-transform-es2015-parameters": {
"babel-plugin-transform-es2015-shorthand-properties": {
"babel-plugin-transform-es2015-spread": {
"babel-plugin-transform-es2015-sticky-regex": {
"babel-plugin-transform-es2015-template-literals": {
"babel-plugin-transform-es2015-typeof-symbol": {
"babel-plugin-transform-es2015-unicode-regex": {
"babel-plugin-transform-exponentiation-operator": {
"babel-plugin-transform-flow-strip-types": {
"babel-plugin-syntax-flow": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-transform-react-display-name": {
"babel-plugin-transform-react-jsx": {
"babel-plugin-transform-react-jsx-self": {
"babel-plugin-transform-react-constant-elements": {
"babel-plugin-transform-react-jsx-source": {
"babel-plugin-transform-strict-mode": {
"babel-plugin-transform-runtime": {
"babel-plugin-transform-regenerator": {
"babel-preset-env": {
"babel-preset-jest": {
"babel-preset-flow": {
"babel-preset-react": {
"babel-preset-react-app": {
"binary-extensions": {
"browserify-cipher": {
"builtin-status-codes": {
"capture-stack-trace": {
"case-sensitive-paths-webpack-plugin": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"component-emitter": {
"compare-versions": {
"connect-history-api-fallback": {
"constants-browserify": {
"console-browserify": {
"content-type-parser": {
"content-disposition": {
"collection-visit": {
"create-error-class": {
"cookie-signature": {
"convert-source-map": {
"crypto-browserify": {
"crypto-random-string": {
"css-selector-tokenizer": {
"currently-unhandled": {
"damerau-levenshtein": {
"default-require-extensions": {
"decode-uri-component": {
"define-properties": {
"electron-to-chromium": {
"escape-string-regexp": {
"enhanced-resolve": {
"eslint-config-react-app": {
"eslint-import-resolver-node": {
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-import": {
"eslint-plugin-jsx-a11y": {
"eslint-plugin-react": {
"fast-json-stable-stringify": {
"extract-text-webpack-plugin": {
"fast-levenshtein": {
"file-entry-cache": {
"filename-reserved-regex": {
"follow-redirects": {
"are-we-there-yet": {
"console-control-strings": {
"is-fullwidth-code-point": {
"path-is-absolute": {
"process-nextick-args": {
"strip-json-comments": {
"functional-red-black-tree": {
"homedir-polyfill": {
"html-comment-regex": {
"html-encoding-sniffer": {
"html-webpack-plugin": {
"icss-replace-symbols": {
"is-accessor-descriptor": {
"is-builtin-module": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-fullwidth-code-point": {
"is-installed-globally": {
"is-posix-bracket": {
"isomorphic-fetch": {
"is-retry-allowed": {
"istanbul-lib-source-maps": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"jest-changed-files": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-matcher-utils": {
"jest-message-util": {
"jest-resolve-dependencies": {
"json-schema-traverse": {
"json-stable-stringify": {
"json-stringify-safe": {
"lodash._reinterpolate": {
"lodash.templatesettings": {
"lodash.camelcase": {
"math-expression-evaluator": {
"minimalistic-assert": {
"minimalistic-crypto-utils": {
"merge-descriptors": {
"multicast-dns-service-types": {
"node-libs-browser": {
"is-accessor-descriptor": {
"normalize-package-data": {
"is-data-descriptor": {
"postcss-colormin": {
"path-is-absolute": {
"postcss-convert-values": {
"posix-character-classes": {
"postcss-discard-comments": {
"postcss-discard-overridden": {
"postcss-discard-duplicates": {
"postcss-discard-empty": {
"postcss-discard-unused": {
"postcss-filter-plugins": {
"postcss-load-config": {
"postcss-flexbugs-fixes": {
"postcss-load-options": {
"postcss-merge-idents": {
"postcss-load-plugins": {
"postcss-merge-rules": {
"postcss-merge-longhand": {
"postcss-message-helpers": {
"postcss-minify-font-values": {
"postcss-minify-params": {
"postcss-minify-gradients": {
"postcss-modules-extract-imports": {
"postcss-modules-local-by-default": {
"postcss-modules-scope": {
"postcss-minify-selectors": {
"postcss-normalize-charset": {
"postcss-modules-values": {
"postcss-ordered-values": {
"postcss-normalize-url": {
"postcss-reduce-initial": {
"postcss-reduce-transforms": {
"postcss-reduce-idents": {
"postcss-selector-parser": {
"postcss-unique-selectors": {
"postcss-value-parser": {
"process-nextick-args": {
"react-error-overlay": {
"recursive-readdir": {
"regenerator-runtime": {
"reduce-function-call": {
"registry-auth-token": {
"remove-trailing-separator": {
"require-directory": {
"regenerator-transform": {
"require-from-string": {
"require-uncached": {
"require-main-filename": {
"serviceworker-cache-polyfill": {
"rx-lite-aggregates": {
"set-immediate-shim": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"source-map-resolve": {
"source-map-support": {
"spdx-license-ids": {
"spdx-expression-parse": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"stream-browserify": {
"strict-uri-encode": {
"sw-precache-webpack-plugin": {
"strip-json-comments": {
"json-schema-traverse": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"timers-browserify": {
"to-fast-properties": {
"uglify-to-browserify": {
"uglifyjs-webpack-plugin": {
"validate-npm-package-license": {
"is-fullwidth-code-point": {
"webidl-conversions": {
"webpack-dev-middleware": {
"webpack-manifest-plugin": {
"is-fullwidth-code-point": {
"webpack-dev-server": {
"websocket-extensions": {
"is-fullwidth-code-point": {
"write-file-atomic": {
"webidl-conversions": {
"websocket-driver": {
"xml-name-validator": {
"is-fullwidth-code-point": {
"@babel/code-frame": {
"@babel/highlight": "^7.0.0"
"@babel/generator": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/parser": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/generator": {
"@babel/types": "^7.2.0",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/types": "^7.0.0",
"@babel/helper-call-delegate": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-define-map": {
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": {
"@babel/traverse": "^7.1.0",
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": {
"@babel/helper-member-expression-to-functions": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-module-transforms": {
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-optimise-call-expression": {
"@babel/helper-regex": {
"@babel/helper-plugin-utils": {
"@babel/helper-remap-async-to-generator": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-simple-access": {
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/helper-wrap-function": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.2.0"
"@babel/traverse": "^7.1.5",
"@babel/template": "^7.1.2",
"@babel/highlight": {
"@babel/types": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-proposal-class-properties": {
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-syntax-async-generators": "^7.2.0"
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/plugin-proposal-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-json-strings": "^7.2.0"
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-syntax-async-generators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-json-strings": {
"@babel/plugin-syntax-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-block-scoping": {
"@babel/plugin-transform-classes": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": {
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-amd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/plugin-transform-modules-umd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/plugin-transform-object-super": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0"
"@babel/plugin-transform-parameters": {
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/plugin-transform-react-jsx": {
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-runtime": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-regenerator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-regex": "^7.0.0"
"@babel/plugin-transform-template-literals": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-env": {
"@babel/plugin-proposal-unicode-property-regex": "^7.2.0",
"@babel/plugin-proposal-object-rest-spread": "^7.2.0",
"@babel/plugin-proposal-json-strings": "^7.2.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.2.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
"@babel/plugin-syntax-object-rest-spread": "^7.2.0",
"@babel/plugin-transform-arrow-functions": "^7.2.0",
"@babel/plugin-transform-async-to-generator": "^7.2.0",
"@babel/plugin-transform-block-scoping": "^7.2.0",
"@babel/plugin-syntax-async-generators": "^7.2.0",
"@babel/plugin-transform-block-scoped-functions": "^7.2.0",
"@babel/plugin-transform-classes": "^7.2.0",
"@babel/plugin-transform-destructuring": "^7.2.0",
"@babel/plugin-transform-computed-properties": "^7.2.0",
"@babel/plugin-transform-dotall-regex": "^7.2.0",
"@babel/plugin-transform-duplicate-keys": "^7.2.0",
"@babel/plugin-transform-function-name": "^7.2.0",
"@babel/plugin-transform-modules-amd": "^7.2.0",
"@babel/plugin-transform-for-of": "^7.2.0",
"@babel/plugin-transform-modules-commonjs": "^7.2.0",
"@babel/plugin-transform-literals": "^7.2.0",
"@babel/plugin-transform-modules-systemjs": "^7.2.0",
"@babel/plugin-transform-object-super": "^7.2.0",
"@babel/plugin-transform-modules-umd": "^7.2.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.2.0",
"@babel/plugin-transform-shorthand-properties": "^7.2.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.2.0",
"@babel/plugin-transform-template-literals": "^7.2.0",
"@babel/plugin-transform-spread": "^7.2.0",
"@babel/plugin-transform-unicode-regex": "^7.2.0",
"@babel/preset-react": {
"@babel/plugin-transform-typeof-symbol": "^7.2.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-typescript": {
"@babel/plugin-transform-typescript": "^7.1.0"
"regenerator-runtime": {
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.1.2",
"@babel/types": "^7.1.2"
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.1.6",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.1.6",
"@babel/parser": "^7.1.6",
"@mrmlnc/readdir-enhanced": {
"@nodelib/fs.stat": {
"@babel/core": "^7.0.1",
"@csstools/convert-colors": {
"@babel/preset-env": "^7.0.0",
"@webassemblyjs/ast": {
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6"
"@webassemblyjs/ieee754": {
"@webassemblyjs/leb128": {
"@xtuc/ieee754": "^1.2.0"
"@xtuc/long": "4.2.1"
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wast-parser": {
"@xtuc/long": "4.2.1",
"@webassemblyjs/helper-fsm": "1.7.6",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"acorn-dynamic-import": {
"@webassemblyjs/ast": "1.7.6",
"@xtuc/long": "4.2.1"
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"append-transform": {
"is-data-descriptor": {
"babel-code-frame": {
"@babel/parser": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.0.0",
"babel-extract-comments": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-macros": {
"babel-plugin-named-asset-import": {
"babel-plugin-transform-object-rest-spread": {
"babel-preset-react-app": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-jest": {
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/core": "7.1.0",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/runtime": "7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/preset-typescript": "7.1.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"to-fast-properties": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"binary-extensions": {
"browser-process-hrtime": {
"browserify-cipher": {
"builtin-status-codes": {
"case-sensitive-paths-webpack-plugin": {
"chrome-trace-event": {
"collection-visit": {
"component-emitter": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"constants-browserify": {
"console-browserify": {
"content-disposition": {
"cookie-signature": {
"convert-source-map": {
"crypto-browserify": {
"copy-concurrently": {
"css-declaration-sorter": {
"css-select-base-adapter": {
"css-selector-tokenizer": {
"cssnano-preset-default": {
"css-unit-converter": {
"cssnano-util-get-arguments": {
"cssnano-util-get-match": {
"cssnano-util-raw-cache": {
"cssnano-util-same-parent": {
"damerau-levenshtein": {
"decode-uri-component": {
"default-require-extensions": {
"is-accessor-descriptor": {
"define-properties": {
"is-data-descriptor": {
"electron-to-chromium": {
"enhanced-resolve": {
"@babel/code-frame": "^7.0.0",
"escape-string-regexp": {
"eslint-import-resolver-node": {
"eslint-config-react-app": {
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-jsx-a11y": {
"eslint-plugin-import": {
"eslint-plugin-react": {
"eslint-visitor-keys": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fast-json-stable-stringify": {
"fast-levenshtein": {
"follow-redirects": {
"flush-write-stream": {
"file-entry-cache": {
"fork-ts-checker-webpack-plugin-alt": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"fs-write-stream-atomic": {
"are-we-there-yet": {
"console-control-strings": {
"is-fullwidth-code-point": {
"process-nextick-args": {
"path-is-absolute": {
"strip-json-comments": {
"functional-red-black-tree": {
"get-own-enumerable-property-symbols": {
"homedir-polyfill": {
"hoist-non-react-statics": {
"html-encoding-sniffer": {
"html-webpack-plugin": {
"html-comment-regex": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"icss-replace-symbols": {
"is-accessor-descriptor": {
"identity-obj-proxy": {
"is-builtin-module": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-fullwidth-code-point": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"jest-changed-files": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-matcher-utils": {
"jest-leak-detector": {
"jest-message-util": {
"jest-pnp-resolver": {
"@babel/code-frame": "^7.0.0-beta.35",
"source-map-support": {
"jest-resolve-dependencies": {
"json-stable-stringify-without-jsonify": {
"json-parse-better-errors": {
"json-stable-stringify": {
"json-stringify-safe": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"last-call-webpack-plugin": {
"lodash.templatesettings": {
"minimalistic-assert": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"json-schema-traverse": {
"minimalistic-crypto-utils": {
"move-concurrently": {
"multicast-dns-service-types": {
"normalize-package-data": {
"node-libs-browser": {
"object.getownpropertydescriptors": {
"path-is-absolute": {
"parallel-transform": {
"optimize-css-assets-webpack-plugin": {
"pnp-webpack-plugin": {
"posix-character-classes": {
"postcss-attribute-case-insensitive": {
"postcss-color-hex-alpha": {
"postcss-color-functional-notation": {
"postcss-color-mod-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-rebeccapurple": {
"postcss-convert-values": {
"postcss-colormin": {
"postcss-custom-properties": {
"postcss-custom-selectors": {
"postcss-dir-pseudo-class": {
"postcss-custom-media": {
"postcss-discard-duplicates": {
"postcss-discard-comments": {
"postcss-discard-empty": {
"postcss-discard-overridden": {
"postcss-env-function": {
"postcss-flexbugs-fixes": {
"postcss-focus-visible": {
"postcss-focus-within": {
"postcss-font-variant": {
"postcss-gap-properties": {
"postcss-image-set-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-lab-function": {
"postcss-media-minmax": {
"postcss-load-config": {
"postcss-selector-parser": {
"postcss-merge-longhand": {
"postcss-merge-rules": {
"postcss-minify-font-values": {
"postcss-minify-gradients": {
"postcss-minify-selectors": {
"postcss-minify-params": {
"postcss-selector-parser": {
"postcss-modules-extract-imports": {
"postcss-modules-scope": {
"postcss-modules-local-by-default": {
"postcss-normalize-charset": {
"postcss-modules-values": {
"postcss-normalize-display-values": {
"postcss-normalize-positions": {
"postcss-normalize-repeat-style": {
"postcss-normalize-string": {
"postcss-normalize-timing-functions": {
"postcss-normalize-unicode": {
"postcss-normalize-url": {
"postcss-normalize-whitespace": {
"postcss-ordered-values": {
"postcss-overflow-shorthand": {
"postcss-page-break": {
"postcss-preset-env": {
"postcss-pseudo-class-any-link": {
"postcss-reduce-initial": {
"postcss-reduce-transforms": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-selector-parser": {
"postcss-selector-not": {
"postcss-value-parser": {
"postcss-unique-selectors": {
"promise-inflight": {
"postcss-values-parser": {
"react-app-polyfill": {
"process-nextick-args": {
"@babel/code-frame": "7.0.0",
"react-error-overlay": {
"react-lifecycles-compat": {
"@babel/core": "7.1.0",
"@babel/runtime": "^7.1.2",
"regenerator-runtime": {
"@svgr/webpack": "2.4.1",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"regenerate-unicode-properties": {
"recursive-readdir": {
"regenerator-transform": {
"regenerator-runtime": {
"remove-trailing-separator": {
"request-promise-core": {
"request-promise-native": {
"require-from-string": {
"require-main-filename": {
"require-directory": {
"require-uncached": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"serialize-javascript": {
"source-map-resolve": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"spdx-expression-parse": {
"stealthy-require": {
"spdx-license-ids": {
"source-map-support": {
"stream-browserify": {
"strip-json-comments": {
"stringify-object": {
"postcss-selector-parser": {
"source-map-support": {
"symbol-observable": {
"terser-webpack-plugin": {
"timers-browserify": {
"to-fast-properties": {
"uglifyjs-webpack-plugin": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-ecmascript": {
"unicode-match-property-value-ecmascript": {
"unicode-property-aliases-ecmascript": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"validate-npm-package-license": {
"@webassemblyjs/helper-module-context": "1.7.6",
"w3c-xmlserializer": {
"@webassemblyjs/wasm-edit": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"webpack-dev-middleware": {
"webpack-dev-server": {
"webpack-manifest-plugin": {
"websocket-driver": {
"workbox-background-sync": {
"workbox-broadcast-cache-update": {
"websocket-extensions": {
"workbox-cache-expiration": {
"workbox-google-analytics": {
"workbox-cacheable-response": {
"workbox-navigation-preload": {
"workbox-precaching": {
"workbox-range-requests": {
"workbox-strategies": {
"is-fullwidth-code-point": {
"workbox-webpack-plugin": {
"write-file-atomic": {
"xml-name-validator": {
"@babel/code-frame": "^7.0.0",
"@babel/code-frame": {
"@babel/highlight": "^7.0.0"
"@babel/generator": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/parser": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.1.6",
"@babel/generator": {
"@babel/types": "^7.0.0",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/helper-call-delegate": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-define-map": {
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": {
"@babel/traverse": "^7.1.0",
"@babel/helper-function-name": {
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/helper-module-imports": {
"@babel/types": "^7.0.0"
"@babel/helper-module-transforms": {
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/helper-plugin-utils": {
"@babel/helper-optimise-call-expression": {
"@babel/helper-remap-async-to-generator": {
"@babel/helper-regex": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-simple-access": {
"@babel/template": "^7.1.0",
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/template": "^7.1.2",
"@babel/traverse": "^7.1.5",
"@babel/highlight": {
"@babel/types": "^7.1.5"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-syntax-async-generators": "^7.0.0"
"@babel/plugin-proposal-class-properties": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-proposal-decorators": {
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/plugin-proposal-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-json-strings": "^7.0.0"
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/plugin-syntax-async-generators": {
"@babel/plugin-syntax-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/plugin-syntax-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/plugin-transform-exponentiation-operator": {
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-for-of": {
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-amd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-umd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-new-target": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-object-super": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0"
"@babel/plugin-transform-parameters": {
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-transform-regenerator": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-runtime": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-spread": {
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-template-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-regex": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-typescript": "^7.0.0"
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-env": {
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.1.5",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-react": {
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/preset-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.1.0"
"regenerator-runtime": {
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.1.2"
"@babel/parser": "^7.1.2",
"@babel/code-frame": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/parser": "^7.1.6",
"@babel/generator": "^7.1.6",
"@mrmlnc/readdir-enhanced": {
"@babel/types": "^7.1.6",
"@csstools/convert-colors": {
"@nodelib/fs.stat": {
"@svgr/core": "^2.4.1",
"@babel/core": "^7.0.1",
"@babel/preset-env": "^7.0.0",
"@babel/preset-react": "^7.0.0",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ast": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ieee754": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6"
"@xtuc/ieee754": "^1.2.0"
"@xtuc/long": "4.2.1"
"@webassemblyjs/leb128": {
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-fsm": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@xtuc/long": "4.2.1"
"acorn-dynamic-import": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"babel-code-frame": {
"append-transform": {
"@babel/parser": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/traverse": "^7.0.0",
"babel-extract-comments": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-jest-hoist": {
"babel-plugin-istanbul": {
"babel-plugin-named-asset-import": {
"babel-plugin-macros": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-jest": {
"babel-preset-react-app": {
"@babel/core": "7.1.0",
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/preset-typescript": "7.1.0",
"@babel/runtime": "7.0.0",
"@babel/plugin-transform-destructuring": {
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"to-fast-properties": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"binary-extensions": {
"builtin-status-codes": {
"browser-process-hrtime": {
"case-sensitive-paths-webpack-plugin": {
"collection-visit": {
"browserify-cipher": {
"component-emitter": {
"chrome-trace-event": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"console-browserify": {
"constants-browserify": {
"content-disposition": {
"convert-source-map": {
"cookie-signature": {
"copy-concurrently": {
"crypto-browserify": {
"css-declaration-sorter": {
"css-select-base-adapter": {
"css-selector-tokenizer": {
"css-unit-converter": {
"cssnano-preset-default": {
"cssnano-util-get-match": {
"cssnano-util-raw-cache": {
"cssnano-util-get-arguments": {
"default-require-extensions": {
"cssnano-util-same-parent": {
"damerau-levenshtein": {
"decode-uri-component": {
"define-properties": {
"is-data-descriptor": {
"electron-to-chromium": {
"is-accessor-descriptor": {
"enhanced-resolve": {
"escape-string-regexp": {
"@babel/code-frame": "^7.0.0",
"eslint-config-react-app": {
"eslint-import-resolver-node": {
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-import": {
"eslint-plugin-jsx-a11y": {
"eslint-plugin-react": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"eslint-visitor-keys": {
"@nodelib/fs.stat": "^1.1.2",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fast-json-stable-stringify": {
"fast-levenshtein": {
"is-data-descriptor": {
"file-entry-cache": {
"flush-write-stream": {
"follow-redirects": {
"fork-ts-checker-webpack-plugin-alt": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fs-write-stream-atomic": {
"are-we-there-yet": {
"console-control-strings": {
"is-fullwidth-code-point": {
"path-is-absolute": {
"process-nextick-args": {
"strip-json-comments": {
"functional-red-black-tree": {
"get-own-enumerable-property-symbols": {
"homedir-polyfill": {
"html-comment-regex": {
"html-encoding-sniffer": {
"@types/tapable": "1.0.2",
"html-webpack-plugin": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"identity-obj-proxy": {
"icss-replace-symbols": {
"is-accessor-descriptor": {
"is-builtin-module": {
"is-data-descriptor": {
"is-posix-bracket": {
"is-equal-shallow": {
"is-fullwidth-code-point": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-report": {
"istanbul-lib-instrument": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"jest-changed-files": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-matcher-utils": {
"jest-leak-detector": {
"jest-pnp-resolver": {
"jest-message-util": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-resolve-dependencies": {
"json-parse-better-errors": {
"source-map-support": {
"json-schema-traverse": {
"json-stable-stringify": {
"json-stringify-safe": {
"json-stable-stringify-without-jsonify": {
"last-call-webpack-plugin": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"lodash.templatesettings": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"minimalistic-assert": {
"minimalistic-crypto-utils": {
"move-concurrently": {
"multicast-dns-service-types": {
"node-libs-browser": {
"normalize-package-data": {
"object.getownpropertydescriptors": {
"optimize-css-assets-webpack-plugin": {
"path-is-absolute": {
"parallel-transform": {
"postcss-color-hex-alpha": {
"pnp-webpack-plugin": {
"posix-character-classes": {
"postcss-color-functional-notation": {
"postcss-attribute-case-insensitive": {
"@csstools/convert-colors": "^1.4.0",
"postcss-colormin": {
"postcss-color-mod-function": {
"postcss-color-rebeccapurple": {
"postcss-convert-values": {
"postcss-custom-media": {
"postcss-custom-properties": {
"postcss-discard-empty": {
"postcss-custom-selectors": {
"postcss-discard-comments": {
"postcss-discard-duplicates": {
"postcss-dir-pseudo-class": {
"postcss-discard-overridden": {
"postcss-focus-visible": {
"postcss-flexbugs-fixes": {
"postcss-env-function": {
"postcss-focus-within": {
"postcss-font-variant": {
"postcss-image-set-function": {
"postcss-gap-properties": {
"postcss-lab-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-media-minmax": {
"postcss-merge-longhand": {
"postcss-load-config": {
"postcss-merge-rules": {
"postcss-minify-font-values": {
"postcss-selector-parser": {
"postcss-minify-params": {
"postcss-modules-extract-imports": {
"postcss-minify-selectors": {
"postcss-selector-parser": {
"postcss-minify-gradients": {
"postcss-modules-scope": {
"postcss-modules-local-by-default": {
"postcss-normalize-positions": {
"postcss-modules-values": {
"postcss-normalize-display-values": {
"postcss-normalize-charset": {
"postcss-normalize-string": {
"postcss-normalize-repeat-style": {
"postcss-normalize-timing-functions": {
"postcss-normalize-unicode": {
"postcss-normalize-whitespace": {
"postcss-normalize-url": {
"postcss-ordered-values": {
"postcss-overflow-shorthand": {
"postcss-preset-env": {
"postcss-replace-overflow-wrap": {
"postcss-page-break": {
"postcss-reduce-transforms": {
"postcss-reduce-initial": {
"postcss-pseudo-class-any-link": {
"postcss-selector-matches": {
"postcss-selector-parser": {
"postcss-selector-not": {
"postcss-safe-parser": {
"postcss-unique-selectors": {
"process-nextick-args": {
"postcss-values-parser": {
"postcss-value-parser": {
"promise-inflight": {
"@babel/code-frame": "7.0.0",
"react-app-polyfill": {
"react-error-overlay": {
"@babel/core": "7.1.0",
"is-accessor-descriptor": {
"@svgr/webpack": "2.4.1",
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"regenerate-unicode-properties": {
"regenerator-runtime": {
"regenerator-transform": {
"recursive-readdir": {
"remove-trailing-separator": {
"request-promise-core": {
"require-directory": {
"request-promise-native": {
"require-from-string": {
"require-main-filename": {
"require-uncached": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"serialize-javascript": {
"is-accessor-descriptor": {
"source-map-resolve": {
"is-data-descriptor": {
"source-map-support": {
"spdx-expression-parse": {
"stream-browserify": {
"spdx-license-ids": {
"stringify-object": {
"stealthy-require": {
"strip-json-comments": {
"source-map-support": {
"terser-webpack-plugin": {
"postcss-selector-parser": {
"timers-browserify": {
"to-fast-properties": {
"unicode-canonical-property-names-ecmascript": {
"uglifyjs-webpack-plugin": {
"unicode-match-property-ecmascript": {
"unicode-match-property-value-ecmascript": {
"unicode-property-aliases-ecmascript": {
"w3c-xmlserializer": {
"validate-npm-package-license": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/wasm-edit": "1.7.6",
"is-data-descriptor": {
"@webassemblyjs/wasm-parser": "1.7.6",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"webpack-dev-server": {
"webpack-dev-middleware": {
"webpack-manifest-plugin": {
"websocket-driver": {
"websocket-extensions": {
"workbox-background-sync": {
"workbox-broadcast-cache-update": {
"workbox-cache-expiration": {
"workbox-cacheable-response": {
"workbox-google-analytics": {
"workbox-navigation-preload": {
"workbox-precaching": {
"workbox-range-requests": {
"workbox-strategies": {
"workbox-webpack-plugin": {
"is-fullwidth-code-point": {
"write-file-atomic": {
"@babel/code-frame": {
"xml-name-validator": {
"@babel/highlight": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/parser": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/generator": {
"@babel/types": "^7.0.0",
"@babel/types": "^7.1.6",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/helper-call-delegate": {
"@babel/types": "^7.0.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-define-map": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": {
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-function-name": {
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": {
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/helper-module-imports": {
"@babel/types": "^7.0.0"
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/helper-plugin-utils": {
"@babel/helper-wrap-function": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-remap-async-to-generator": {
"@babel/helper-regex": {
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-replace-supers": {
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-simple-access": {
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/template": "^7.1.2",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.1.5"
"@babel/traverse": "^7.1.5",
"@babel/highlight": {
"@babel/plugin-proposal-async-generator-functions": {
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0"
"@babel/plugin-proposal-class-properties": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/plugin-proposal-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-json-strings": "^7.0.0"
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0"
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-async-generators": {
"@babel/plugin-syntax-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-json-strings": {
"@babel/plugin-syntax-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-block-scoped-functions": {
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-transform-function-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-modules-amd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-umd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-new-target": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-object-super": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0"
"@babel/helper-call-delegate": "^7.1.0",
"@babel/plugin-transform-parameters": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-regenerator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-runtime": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/plugin-transform-template-literals": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.0.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.1.5",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/preset-react": {
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/preset-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.1.0"
"@babel/types": "^7.1.2"
"regenerator-runtime": {
"@babel/parser": "^7.1.2",
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.1.6",
"@babel/code-frame": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/parser": "^7.1.6",
"@babel/types": "^7.1.6",
"@mrmlnc/readdir-enhanced": {
"@csstools/convert-colors": {
"@nodelib/fs.stat": {
"@babel/preset-env": "^7.0.0",
"@babel/core": "^7.0.1",
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/ast": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6"
"@webassemblyjs/ieee754": {
"@webassemblyjs/leb128": {
"@xtuc/ieee754": "^1.2.0"
"@xtuc/long": "4.2.1"
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/helper-fsm": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@xtuc/long": "4.2.1"
"acorn-dynamic-import": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"append-transform": {
"babel-code-frame": {
"is-data-descriptor": {
"@babel/parser": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"babel-extract-comments": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-macros": {
"babel-plugin-named-asset-import": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-jest": {
"babel-plugin-transform-object-rest-spread": {
"babel-preset-react-app": {
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/core": "7.1.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/preset-typescript": "7.1.0",
"@babel/runtime": "7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"is-accessor-descriptor": {
"binary-extensions": {
"to-fast-properties": {
"is-data-descriptor": {
"browser-process-hrtime": {
"browserify-cipher": {
"case-sensitive-paths-webpack-plugin": {
"builtin-status-codes": {
"chrome-trace-event": {
"component-emitter": {
"collection-visit": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"console-browserify": {
"constants-browserify": {
"content-disposition": {
"cookie-signature": {
"convert-source-map": {
"copy-concurrently": {
"css-declaration-sorter": {
"css-select-base-adapter": {
"crypto-browserify": {
"css-selector-tokenizer": {
"css-unit-converter": {
"cssnano-preset-default": {
"cssnano-util-get-arguments": {
"cssnano-util-get-match": {
"cssnano-util-same-parent": {
"cssnano-util-raw-cache": {
"decode-uri-component": {
"damerau-levenshtein": {
"default-require-extensions": {
"is-accessor-descriptor": {
"electron-to-chromium": {
"define-properties": {
"is-data-descriptor": {
"escape-string-regexp": {
"enhanced-resolve": {
"@babel/code-frame": "^7.0.0",
"eslint-config-react-app": {
"eslint-import-resolver-node": {
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-jsx-a11y": {
"eslint-plugin-import": {
"eslint-plugin-react": {
"eslint-visitor-keys": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"fast-levenshtein": {
"file-entry-cache": {
"fast-json-stable-stringify": {
"fork-ts-checker-webpack-plugin-alt": {
"is-accessor-descriptor": {
"flush-write-stream": {
"is-data-descriptor": {
"follow-redirects": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"are-we-there-yet": {
"fs-write-stream-atomic": {
"console-control-strings": {
"is-fullwidth-code-point": {
"path-is-absolute": {
"process-nextick-args": {
"strip-json-comments": {
"get-own-enumerable-property-symbols": {
"functional-red-black-tree": {
"homedir-polyfill": {
"html-comment-regex": {
"html-encoding-sniffer": {
"html-webpack-plugin": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"icss-replace-symbols": {
"is-data-descriptor": {
"identity-obj-proxy": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-builtin-module": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-fullwidth-code-point": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"jest-changed-files": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-leak-detector": {
"jest-message-util": {
"jest-matcher-utils": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-pnp-resolver": {
"jest-resolve-dependencies": {
"source-map-support": {
"json-parse-better-errors": {
"json-schema-traverse": {
"json-stable-stringify": {
"json-stable-stringify-without-jsonify": {
"json-stringify-safe": {
"last-call-webpack-plugin": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"lodash.templatesettings": {
"merge-descriptors": {
"minimalistic-crypto-utils": {
"mini-css-extract-plugin": {
"multicast-dns-service-types": {
"move-concurrently": {
"node-libs-browser": {
"minimalistic-assert": {
"object.getownpropertydescriptors": {
"normalize-package-data": {
"parallel-transform": {
"optimize-css-assets-webpack-plugin": {
"path-is-absolute": {
"posix-character-classes": {
"postcss-attribute-case-insensitive": {
"pnp-webpack-plugin": {
"postcss-color-functional-notation": {
"postcss-color-mod-function": {
"postcss-color-hex-alpha": {
"postcss-color-rebeccapurple": {
"@csstools/convert-colors": "^1.4.0",
"postcss-colormin": {
"postcss-custom-media": {
"postcss-custom-selectors": {
"postcss-custom-properties": {
"postcss-convert-values": {
"postcss-discard-comments": {
"postcss-dir-pseudo-class": {
"postcss-discard-empty": {
"postcss-discard-duplicates": {
"postcss-env-function": {
"postcss-discard-overridden": {
"postcss-flexbugs-fixes": {
"postcss-focus-within": {
"postcss-font-variant": {
"postcss-focus-visible": {
"postcss-lab-function": {
"postcss-gap-properties": {
"postcss-image-set-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-media-minmax": {
"postcss-merge-longhand": {
"postcss-selector-parser": {
"postcss-merge-rules": {
"postcss-load-config": {
"postcss-minify-font-values": {
"postcss-minify-gradients": {
"postcss-minify-params": {
"postcss-minify-selectors": {
"postcss-modules-extract-imports": {
"postcss-selector-parser": {
"postcss-modules-local-by-default": {
"postcss-modules-scope": {
"postcss-modules-values": {
"postcss-normalize-display-values": {
"postcss-normalize-repeat-style": {
"postcss-normalize-charset": {
"postcss-normalize-positions": {
"postcss-normalize-url": {
"postcss-normalize-string": {
"postcss-normalize-timing-functions": {
"postcss-normalize-unicode": {
"postcss-normalize-whitespace": {
"postcss-overflow-shorthand": {
"postcss-ordered-values": {
"postcss-page-break": {
"postcss-preset-env": {
"postcss-reduce-initial": {
"postcss-pseudo-class-any-link": {
"postcss-reduce-transforms": {
"postcss-replace-overflow-wrap": {
"postcss-selector-matches": {
"postcss-safe-parser": {
"postcss-selector-not": {
"postcss-unique-selectors": {
"postcss-selector-parser": {
"postcss-values-parser": {
"process-nextick-args": {
"promise-inflight": {
"postcss-value-parser": {
"@babel/code-frame": "7.0.0",
"react-app-polyfill": {
"react-error-overlay": {
"@svgr/webpack": "2.4.1",
"@babel/core": "7.1.0",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"regenerate-unicode-properties": {
"recursive-readdir": {
"regenerator-transform": {
"regenerator-runtime": {
"remove-trailing-separator": {
"request-promise-core": {
"request-promise-native": {
"require-directory": {
"require-from-string": {
"require-main-filename": {
"require-uncached": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"serialize-javascript": {
"is-accessor-descriptor": {
"source-map-resolve": {
"is-data-descriptor": {
"source-map-support": {
"spdx-license-ids": {
"spdx-expression-parse": {
"stealthy-require": {
"stream-browserify": {
"stringify-object": {
"postcss-selector-parser": {
"strip-json-comments": {
"source-map-support": {
"terser-webpack-plugin": {
"timers-browserify": {
"uglifyjs-webpack-plugin": {
"to-fast-properties": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-value-ecmascript": {
"unicode-match-property-ecmascript": {
"unicode-property-aliases-ecmascript": {
"validate-npm-package-license": {
"w3c-xmlserializer": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/wasm-edit": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"webpack-dev-middleware": {
"webpack-dev-server": {
"webpack-manifest-plugin": {
"websocket-driver": {
"websocket-extensions": {
"workbox-background-sync": {
"workbox-broadcast-cache-update": {
"workbox-cache-expiration": {
"workbox-cacheable-response": {
"workbox-google-analytics": {
"workbox-precaching": {
"workbox-navigation-preload": {
"workbox-range-requests": {
"workbox-strategies": {
"is-fullwidth-code-point": {
"workbox-webpack-plugin": {
"write-file-atomic": {
"@babel/highlight": "^7.0.0"
"xml-name-validator": {
"@babel/code-frame": {
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.1.0",
"@babel/code-frame": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/generator": {
"@babel/types": "^7.0.0",
"@babel/types": "^7.2.0",
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/helper-call-delegate": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/helper-define-map": {
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": {
"@babel/types": "^7.0.0"
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-get-function-arity": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": {
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0"
"@babel/helper-plugin-utils": {
"@babel/helper-regex": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/helper-remap-async-to-generator": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-replace-supers": {
"@babel/traverse": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-simple-access": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/helper-function-name": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/types": "^7.2.0"
"@babel/template": "^7.1.2",
"@babel/traverse": "^7.1.5",
"@babel/types": "^7.2.0"
"@babel/highlight": {
"@babel/plugin-proposal-async-generator-functions": {
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.2.0"
"@babel/plugin-proposal-class-properties": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/plugin-proposal-decorators": {
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/plugin-proposal-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-json-strings": "^7.2.0"
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-syntax-async-generators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-class-properties": {
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/plugin-syntax-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-transform-block-scoped-functions": {
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-transform-computed-properties": {
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-dotall-regex": {
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": {
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-modules-amd": {
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-umd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-object-super": {
"@babel/helper-replace-supers": "^7.1.0"
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-parameters": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-transform-regenerator": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-runtime": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-template-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": {
"@babel/plugin-transform-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.2.0",
"@babel/plugin-proposal-json-strings": "^7.2.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.2.0",
"@babel/plugin-syntax-async-generators": "^7.2.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.2.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
"@babel/plugin-syntax-object-rest-spread": "^7.2.0",
"@babel/plugin-transform-async-to-generator": "^7.2.0",
"@babel/plugin-transform-arrow-functions": "^7.2.0",
"@babel/plugin-transform-block-scoped-functions": "^7.2.0",
"@babel/plugin-transform-block-scoping": "^7.2.0",
"@babel/plugin-transform-computed-properties": "^7.2.0",
"@babel/plugin-transform-classes": "^7.2.0",
"@babel/plugin-transform-destructuring": "^7.2.0",
"@babel/plugin-transform-duplicate-keys": "^7.2.0",
"@babel/plugin-transform-dotall-regex": "^7.2.0",
"@babel/plugin-transform-literals": "^7.2.0",
"@babel/plugin-transform-function-name": "^7.2.0",
"@babel/plugin-transform-modules-amd": "^7.2.0",
"@babel/plugin-transform-for-of": "^7.2.0",
"@babel/plugin-transform-modules-commonjs": "^7.2.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": "^7.2.0",
"@babel/plugin-transform-modules-umd": "^7.2.0",
"@babel/plugin-transform-object-super": "^7.2.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.2.0",
"@babel/plugin-transform-shorthand-properties": "^7.2.0",
"@babel/plugin-transform-spread": "^7.2.0",
"@babel/plugin-transform-sticky-regex": "^7.2.0",
"@babel/plugin-transform-template-literals": "^7.2.0",
"@babel/plugin-transform-typeof-symbol": "^7.2.0",
"@babel/preset-react": {
"@babel/plugin-transform-unicode-regex": "^7.2.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/plugin-transform-typescript": "^7.1.0"
"@babel/preset-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"regenerator-runtime": {
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.1.2",
"@babel/types": "^7.1.2"
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.1.6",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.1.6",
"@babel/parser": "^7.1.6",
"@mrmlnc/readdir-enhanced": {
"@babel/core": "^7.0.1",
"@nodelib/fs.stat": {
"@csstools/convert-colors": {
"@babel/preset-env": "^7.0.0",
"@webassemblyjs/ast": {
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6"
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/ieee754": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/leb128": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/utf8": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-fsm": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/wast-printer": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/ast": "1.7.6",
"acorn-dynamic-import": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"append-transform": {
"babel-code-frame": {
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/types": "^7.0.0",
"babel-extract-comments": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-macros": {
"babel-plugin-named-asset-import": {
"babel-plugin-syntax-object-rest-spread": {
"babel-preset-jest": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-plugin-transform-object-rest-spread": {
"@babel/core": "7.1.0",
"babel-preset-react-app": {
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/preset-typescript": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/runtime": "7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"to-fast-properties": {
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"is-accessor-descriptor": {
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"is-data-descriptor": {
"browser-process-hrtime": {
"browserify-cipher": {
"binary-extensions": {
"builtin-status-codes": {
"chrome-trace-event": {
"case-sensitive-paths-webpack-plugin": {
"collection-visit": {
"component-emitter": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"console-browserify": {
"constants-browserify": {
"content-disposition": {
"convert-source-map": {
"copy-concurrently": {
"crypto-browserify": {
"cookie-signature": {
"css-declaration-sorter": {
"css-select-base-adapter": {
"css-selector-tokenizer": {
"css-unit-converter": {
"cssnano-util-get-arguments": {
"cssnano-preset-default": {
"cssnano-util-raw-cache": {
"cssnano-util-get-match": {
"cssnano-util-same-parent": {
"damerau-levenshtein": {
"decode-uri-component": {
"default-require-extensions": {
"define-properties": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"electron-to-chromium": {
"enhanced-resolve": {
"@babel/code-frame": "^7.0.0",
"escape-string-regexp": {
"eslint-import-resolver-node": {
"eslint-config-react-app": {
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-import": {
"eslint-plugin-react": {
"eslint-plugin-jsx-a11y": {
"eslint-visitor-keys": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fast-json-stable-stringify": {
"is-data-descriptor": {
"file-entry-cache": {
"fast-levenshtein": {
"flush-write-stream": {
"follow-redirects": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fork-ts-checker-webpack-plugin-alt": {
"is-accessor-descriptor": {
"are-we-there-yet": {
"fs-write-stream-atomic": {
"console-control-strings": {
"is-data-descriptor": {
"is-fullwidth-code-point": {
"process-nextick-args": {
"strip-json-comments": {
"path-is-absolute": {
"functional-red-black-tree": {
"hoist-non-react-statics": {
"get-own-enumerable-property-symbols": {
"homedir-polyfill": {
"html-comment-regex": {
"html-webpack-plugin": {
"html-encoding-sniffer": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"icss-replace-symbols": {
"identity-obj-proxy": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-builtin-module": {
"is-fullwidth-code-point": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-report": {
"istanbul-lib-instrument": {
"istanbul-lib-source-maps": {
"jest-changed-files": {
"jest-environment-jsdom": {
"istanbul-reports": {
"jest-environment-node": {
"jest-leak-detector": {
"jest-matcher-utils": {
"jest-message-util": {
"jest-pnp-resolver": {
"jest-resolve-dependencies": {
"source-map-support": {
"@babel/code-frame": "^7.0.0-beta.35",
"json-stable-stringify-without-jsonify": {
"json-stable-stringify": {
"json-parse-better-errors": {
"json-stringify-safe": {
"json-schema-traverse": {
"last-call-webpack-plugin": {
"lodash.camelcase": {
"lodash._reinterpolate": {
"lodash.templatesettings": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"minimalistic-assert": {
"move-concurrently": {
"multicast-dns-service-types": {
"minimalistic-crypto-utils": {
"node-libs-browser": {
"normalize-package-data": {
"object.getownpropertydescriptors": {
"optimize-css-assets-webpack-plugin": {
"path-is-absolute": {
"parallel-transform": {
"postcss-attribute-case-insensitive": {
"posix-character-classes": {
"postcss-color-functional-notation": {
"pnp-webpack-plugin": {
"postcss-color-mod-function": {
"postcss-color-hex-alpha": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-rebeccapurple": {
"postcss-colormin": {
"postcss-custom-media": {
"postcss-convert-values": {
"postcss-custom-properties": {
"postcss-dir-pseudo-class": {
"postcss-custom-selectors": {
"postcss-discard-comments": {
"postcss-discard-empty": {
"postcss-discard-duplicates": {
"postcss-discard-overridden": {
"postcss-env-function": {
"postcss-flexbugs-fixes": {
"postcss-focus-within": {
"postcss-focus-visible": {
"postcss-gap-properties": {
"postcss-font-variant": {
"postcss-image-set-function": {
"postcss-lab-function": {
"postcss-media-minmax": {
"@csstools/convert-colors": "^1.4.0",
"postcss-merge-rules": {
"postcss-merge-longhand": {
"postcss-load-config": {
"postcss-minify-params": {
"postcss-minify-gradients": {
"postcss-minify-font-values": {
"postcss-selector-parser": {
"postcss-selector-parser": {
"postcss-modules-extract-imports": {
"postcss-minify-selectors": {
"postcss-modules-local-by-default": {
"postcss-modules-values": {
"postcss-modules-scope": {
"postcss-normalize-charset": {
"postcss-normalize-display-values": {
"postcss-normalize-repeat-style": {
"postcss-normalize-string": {
"postcss-normalize-timing-functions": {
"postcss-normalize-positions": {
"postcss-normalize-unicode": {
"postcss-normalize-url": {
"postcss-ordered-values": {
"postcss-normalize-whitespace": {
"postcss-overflow-shorthand": {
"postcss-preset-env": {
"postcss-page-break": {
"postcss-pseudo-class-any-link": {
"postcss-reduce-initial": {
"postcss-reduce-transforms": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-selector-parser": {
"postcss-value-parser": {
"postcss-selector-not": {
"postcss-unique-selectors": {
"promise-inflight": {
"postcss-values-parser": {
"process-nextick-args": {
"react-app-polyfill": {
"@babel/code-frame": "7.0.0",
"react-error-overlay": {
"react-lifecycles-compat": {
"@babel/runtime": "^7.1.2",
"regenerator-runtime": {
"@svgr/webpack": "2.4.1",
"@babel/core": "7.1.0",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"recursive-readdir": {
"regenerator-runtime": {
"is-data-descriptor": {
"regenerate-unicode-properties": {
"remove-trailing-separator": {
"regenerator-transform": {
"request-promise-core": {
"request-promise-native": {
"require-from-string": {
"require-directory": {
"require-main-filename": {
"require-uncached": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"serialize-javascript": {
"is-data-descriptor": {
"source-map-resolve": {
"source-map-support": {
"spdx-expression-parse": {
"stealthy-require": {
"spdx-license-ids": {
"stream-browserify": {
"stringify-object": {
"strip-json-comments": {
"postcss-selector-parser": {
"source-map-support": {
"symbol-observable": {
"terser-webpack-plugin": {
"timers-browserify": {
"to-fast-properties": {
"uglifyjs-webpack-plugin": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-ecmascript": {
"unicode-match-property-value-ecmascript": {
"validate-npm-package-license": {
"unicode-property-aliases-ecmascript": {
"w3c-xmlserializer": {
"@webassemblyjs/ast": "1.7.6",
"webidl-conversions": {
"@webassemblyjs/helper-module-context": "1.7.6",
"is-accessor-descriptor": {
"@webassemblyjs/wasm-edit": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"is-data-descriptor": {
"is-accessor-descriptor": {
"webpack-dev-middleware": {
"is-data-descriptor": {
"webpack-dev-server": {
"webpack-manifest-plugin": {
"websocket-extensions": {
"websocket-driver": {
"workbox-broadcast-cache-update": {
"workbox-cache-expiration": {
"workbox-background-sync": {
"workbox-google-analytics": {
"workbox-cacheable-response": {
"workbox-precaching": {
"workbox-navigation-preload": {
"workbox-strategies": {
"workbox-range-requests": {
"is-fullwidth-code-point": {
"write-file-atomic": {
"workbox-webpack-plugin": {
"xml-name-validator": {
"@babel/highlight": "^7.0.0"
"@babel/code-frame": {
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/parser": "^7.1.0",
"@babel/types": "^7.1.6",
"@babel/generator": {
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/helper-call-delegate": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-define-map": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": {
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/helper-module-imports": {
"@babel/helper-module-transforms": {
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-optimise-call-expression": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/helper-regex": {
"@babel/helper-plugin-utils": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-remap-async-to-generator": {
"@babel/helper-wrap-function": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-replace-supers": {
"@babel/traverse": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-simple-access": {
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/template": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/traverse": "^7.1.5",
"@babel/template": "^7.1.2",
"@babel/highlight": {
"@babel/types": "^7.1.5"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-syntax-async-generators": "^7.0.0"
"@babel/plugin-proposal-class-properties": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-proposal-json-strings": {
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/plugin-syntax-json-strings": "^7.0.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0"
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-syntax-async-generators": {
"@babel/plugin-syntax-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/plugin-syntax-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-transform-block-scoping": {
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-transform-computed-properties": {
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": {
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/plugin-transform-function-name": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-amd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": {
"@babel/plugin-transform-modules-umd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-object-super": {
"@babel/plugin-transform-parameters": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0"
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-regenerator": {
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-sticky-regex": {
"@babel/plugin-transform-template-literals": {
"@babel/helper-regex": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/preset-env": {
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.1.5",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-react": {
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/preset-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.1.0"
"regenerator-runtime": {
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.1.2",
"@babel/types": "^7.1.2"
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.1.6",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.1.6",
"@babel/helper-function-name": "^7.1.0",
"@babel/parser": "^7.1.6",
"@csstools/convert-colors": {
"@mrmlnc/readdir-enhanced": {
"@nodelib/fs.stat": {
"@babel/preset-env": "^7.0.0",
"@babel/core": "^7.0.1",
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@webassemblyjs/ast": {
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/ieee754": {
"@webassemblyjs/leb128": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/helper-fsm": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"acorn-dynamic-import": {
"@xtuc/long": "4.2.1"
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"append-transform": {
"babel-code-frame": {
"@babel/parser": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/traverse": "^7.0.0",
"babel-plugin-dynamic-import-node": {
"babel-extract-comments": {
"babel-plugin-istanbul": {
"@babel/types": "^7.0.0",
"babel-plugin-jest-hoist": {
"babel-plugin-macros": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-named-asset-import": {
"babel-plugin-transform-object-rest-spread": {
"babel-preset-react-app": {
"babel-plugin-transform-react-remove-prop-types": {
"@babel/core": "7.1.0",
"@babel/plugin-proposal-class-properties": "7.1.0",
"babel-preset-jest": {
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/runtime": "7.0.0",
"@babel/preset-react": "7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/preset-typescript": "7.1.0",
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.1.0",
"@babel/helpers": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/plugin-transform-destructuring": {
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-runtime": {
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": {
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/preset-react": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"is-accessor-descriptor": {
"to-fast-properties": {
"binary-extensions": {
"is-data-descriptor": {
"browser-process-hrtime": {
"browserify-cipher": {
"builtin-status-codes": {
"case-sensitive-paths-webpack-plugin": {
"collection-visit": {
"component-emitter": {
"chrome-trace-event": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"console-browserify": {
"constants-browserify": {
"convert-source-map": {
"content-disposition": {
"cookie-signature": {
"crypto-browserify": {
"css-declaration-sorter": {
"copy-concurrently": {
"css-select-base-adapter": {
"css-unit-converter": {
"css-selector-tokenizer": {
"cssnano-util-get-arguments": {
"cssnano-preset-default": {
"cssnano-util-raw-cache": {
"cssnano-util-same-parent": {
"cssnano-util-get-match": {
"damerau-levenshtein": {
"default-require-extensions": {
"decode-uri-component": {
"define-properties": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"enhanced-resolve": {
"escape-string-regexp": {
"electron-to-chromium": {
"@babel/code-frame": "^7.0.0",
"eslint-import-resolver-node": {
"eslint-config-react-app": {
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-import": {
"eslint-plugin-react": {
"eslint-visitor-keys": {
"eslint-plugin-jsx-a11y": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"fast-json-stable-stringify": {
"is-data-descriptor": {
"is-data-descriptor": {
"fast-levenshtein": {
"file-entry-cache": {
"flush-write-stream": {
"follow-redirects": {
"fork-ts-checker-webpack-plugin-alt": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"fs-write-stream-atomic": {
"is-fullwidth-code-point": {
"are-we-there-yet": {
"console-control-strings": {
"path-is-absolute": {
"process-nextick-args": {
"strip-json-comments": {
"get-own-enumerable-property-symbols": {
"functional-red-black-tree": {
"html-comment-regex": {
"homedir-polyfill": {
"html-webpack-plugin": {
"html-encoding-sniffer": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"icss-replace-symbols": {
"is-data-descriptor": {
"identity-obj-proxy": {
"is-builtin-module": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-fullwidth-code-point": {
"is-equal-shallow": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"is-posix-bracket": {
"istanbul-lib-report": {
"istanbul-lib-instrument": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"jest-changed-files": {
"jest-leak-detector": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-message-util": {
"jest-matcher-utils": {
"jest-pnp-resolver": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-resolve-dependencies": {
"source-map-support": {
"json-parse-better-errors": {
"json-stable-stringify": {
"json-schema-traverse": {
"json-stable-stringify-without-jsonify": {
"last-call-webpack-plugin": {
"json-stringify-safe": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"merge-descriptors": {
"lodash.templatesettings": {
"minimalistic-assert": {
"move-concurrently": {
"mini-css-extract-plugin": {
"minimalistic-crypto-utils": {
"multicast-dns-service-types": {
"node-libs-browser": {
"object.getownpropertydescriptors": {
"normalize-package-data": {
"posix-character-classes": {
"optimize-css-assets-webpack-plugin": {
"path-is-absolute": {
"parallel-transform": {
"pnp-webpack-plugin": {
"postcss-attribute-case-insensitive": {
"postcss-color-functional-notation": {
"postcss-color-mod-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-hex-alpha": {
"postcss-color-rebeccapurple": {
"postcss-colormin": {
"postcss-convert-values": {
"postcss-custom-media": {
"postcss-custom-properties": {
"postcss-custom-selectors": {
"postcss-discard-comments": {
"postcss-discard-empty": {
"postcss-dir-pseudo-class": {
"postcss-discard-duplicates": {
"postcss-discard-overridden": {
"postcss-focus-visible": {
"postcss-env-function": {
"postcss-flexbugs-fixes": {
"postcss-focus-within": {
"postcss-font-variant": {
"postcss-gap-properties": {
"postcss-image-set-function": {
"postcss-lab-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-load-config": {
"postcss-media-minmax": {
"postcss-merge-rules": {
"postcss-merge-longhand": {
"postcss-selector-parser": {
"postcss-minify-font-values": {
"postcss-minify-gradients": {
"postcss-minify-params": {
"postcss-selector-parser": {
"postcss-minify-selectors": {
"postcss-modules-extract-imports": {
"postcss-modules-scope": {
"postcss-modules-local-by-default": {
"postcss-normalize-charset": {
"postcss-modules-values": {
"postcss-normalize-positions": {
"postcss-normalize-repeat-style": {
"postcss-normalize-string": {
"postcss-normalize-display-values": {
"postcss-normalize-url": {
"postcss-normalize-timing-functions": {
"postcss-normalize-unicode": {
"postcss-normalize-whitespace": {
"postcss-ordered-values": {
"postcss-page-break": {
"postcss-overflow-shorthand": {
"postcss-preset-env": {
"postcss-pseudo-class-any-link": {
"postcss-reduce-initial": {
"postcss-replace-overflow-wrap": {
"postcss-reduce-transforms": {
"postcss-selector-matches": {
"postcss-safe-parser": {
"postcss-selector-not": {
"postcss-selector-parser": {
"postcss-value-parser": {
"postcss-values-parser": {
"postcss-unique-selectors": {
"promise-inflight": {
"process-nextick-args": {
"@babel/code-frame": "7.0.0",
"react-error-overlay": {
"react-app-polyfill": {
"@babel/core": "7.1.0",
"@babel/code-frame": "^7.0.0",
"@svgr/webpack": "2.4.1",
"@babel/generator": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/parser": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"regenerator-runtime": {
"regenerate-unicode-properties": {
"regenerator-transform": {
"recursive-readdir": {
"remove-trailing-separator": {
"request-promise-native": {
"require-directory": {
"request-promise-core": {
"require-from-string": {
"require-main-filename": {
"require-uncached": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"serialize-javascript": {
"is-data-descriptor": {
"source-map-resolve": {
"is-accessor-descriptor": {
"spdx-expression-parse": {
"source-map-support": {
"spdx-license-ids": {
"stealthy-require": {
"stream-browserify": {
"strip-json-comments": {
"stringify-object": {
"postcss-selector-parser": {
"source-map-support": {
"terser-webpack-plugin": {
"timers-browserify": {
"to-fast-properties": {
"uglifyjs-webpack-plugin": {
"unicode-canonical-property-names-ecmascript": {
"unicode-property-aliases-ecmascript": {
"validate-npm-package-license": {
"unicode-match-property-value-ecmascript": {
"unicode-match-property-ecmascript": {
"w3c-xmlserializer": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/wasm-edit": "1.7.6",
"is-accessor-descriptor": {
"is-data-descriptor": {
"@webassemblyjs/wasm-parser": "1.7.6",
"is-accessor-descriptor": {
"is-data-descriptor": {
"webpack-dev-middleware": {
"webpack-dev-server": {
"webpack-manifest-plugin": {
"websocket-driver": {
"websocket-extensions": {
"workbox-background-sync": {
"workbox-broadcast-cache-update": {
"workbox-cache-expiration": {
"workbox-google-analytics": {
"workbox-navigation-preload": {
"workbox-cacheable-response": {
"workbox-precaching": {
"workbox-range-requests": {
"workbox-webpack-plugin": {
"workbox-strategies": {
"is-fullwidth-code-point": {
"write-file-atomic": {
"xml-name-validator": {
"@babel/highlight": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/code-frame": {
"@babel/parser": "^7.1.0",
"@babel/helpers": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/generator": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/generator": {
"@babel/types": "^7.1.3",
"@babel/helper-annotate-as-pure": {
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/helper-call-delegate": {
"@babel/types": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-define-map": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/helper-explode-assignable-expression": {
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/helper-member-expression-to-functions": {
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": {
"@babel/types": "^7.0.0"
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-regex": {
"@babel/helper-remap-async-to-generator": {
"@babel/helper-plugin-utils": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-simple-access": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-split-export-declaration": {
"@babel/helper-wrap-function": {
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.1.2"
"@babel/highlight": {
"@babel/template": "^7.1.2",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/plugin-syntax-async-generators": "^7.0.0"
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-proposal-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-json-strings": {
"@babel/plugin-syntax-json-strings": "^7.0.0"
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/plugin-syntax-async-generators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-class-properties": {
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-block-scoping": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-exponentiation-operator": {
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/plugin-transform-for-of": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/plugin-transform-modules-amd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-systemjs": {
"@babel/plugin-transform-modules-umd": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-object-super": {
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-replace-supers": "^7.1.0"
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/plugin-transform-parameters": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-regenerator": {
"@babel/plugin-transform-runtime": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-template-literals": {
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.0.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/preset-react": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-typescript": {
"@babel/plugin-transform-typescript": "^7.1.0"
"@babel/parser": "^7.1.2",
"@babel/code-frame": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.1.2"
"@babel/generator": "^7.1.3",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.1.3",
"@csstools/convert-colors": {
"@material-ui/core": {
"@babel/parser": "^7.1.3",
"@types/jss": "^9.5.6",
"@babel/runtime": "7.1.2",
"@types/react-transition-group": "^2.0.8",
"@mrmlnc/readdir-enhanced": {
"@nodelib/fs.stat": {
"@babel/core": "^7.0.1",
"@babel/preset-env": "^7.0.0",
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@types/prop-types": {
"@types/react-transition-group": {
"@webassemblyjs/ast": {
"@types/prop-types": "*",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ieee754": {
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/leb128": {
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-edit": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/helper-fsm": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/wast-parser": "1.7.6",
"@xtuc/long": "4.2.1"
"is-accessor-descriptor": {
"acorn-dynamic-import": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"append-transform": {
"is-data-descriptor": {
"babel-code-frame": {
"@babel/parser": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.0.0",
"babel-plugin-istanbul": {
"babel-extract-comments": {
"babel-plugin-macros": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-named-asset-import": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-jest-hoist": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-jest": {
"babel-preset-react-app": {
"@babel/core": "7.1.0",
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/plugin-transform-destructuring": {
"@babel/runtime": "7.0.0",
"@babel/preset-typescript": "7.1.0",
"to-fast-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"is-accessor-descriptor": {
"regenerator-runtime": {
"is-data-descriptor": {
"browser-process-hrtime": {
"binary-extensions": {
"browserify-cipher": {
"builtin-status-codes": {
"case-sensitive-paths-webpack-plugin": {
"chrome-trace-event": {
"collection-visit": {
"component-emitter": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"console-browserify": {
"constants-browserify": {
"content-disposition": {
"convert-source-map": {
"cookie-signature": {
"copy-concurrently": {
"css-declaration-sorter": {
"crypto-browserify": {
"css-select-base-adapter": {
"css-selector-tokenizer": {
"css-unit-converter": {
"cssnano-util-get-arguments": {
"cssnano-preset-default": {
"cssnano-util-raw-cache": {
"cssnano-util-get-match": {
"damerau-levenshtein": {
"cssnano-util-same-parent": {
"default-require-extensions": {
"is-accessor-descriptor": {
"define-properties": {
"decode-uri-component": {
"escape-string-regexp": {
"is-data-descriptor": {
"enhanced-resolve": {
"electron-to-chromium": {
"@babel/code-frame": "^7.0.0",
"json-schema-traverse": {
"eslint-import-resolver-node": {
"eslint-config-react-app": {
"eslint-module-utils": {
"eslint-plugin-import": {
"eslint-plugin-jsx-a11y": {
"eslint-plugin-flowtype": {
"eslint-plugin-react": {
"eslint-visitor-keys": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.0.1",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"fast-json-stable-stringify": {
"fast-levenshtein": {
"flush-write-stream": {
"file-entry-cache": {
"follow-redirects": {
"is-data-descriptor": {
"fork-ts-checker-webpack-plugin-alt": {
"is-accessor-descriptor": {
"fs-write-stream-atomic": {
"is-data-descriptor": {
"are-we-there-yet": {
"is-accessor-descriptor": {
"console-control-strings": {
"path-is-absolute": {
"process-nextick-args": {
"is-fullwidth-code-point": {
"strip-json-comments": {
"functional-red-black-tree": {
"get-own-enumerable-property-symbols": {
"hoist-non-react-statics": {
"homedir-polyfill": {
"html-comment-regex": {
"html-encoding-sniffer": {
"html-webpack-plugin": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"hyphenate-style-name": {
"identity-obj-proxy": {
"icss-replace-symbols": {
"indefinite-observable": {
"is-accessor-descriptor": {
"is-builtin-module": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-fullwidth-code-point": {
"isomorphic-fetch": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-instrument": {
"istanbul-lib-hook": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"jest-changed-files": {
"jest-leak-detector": {
"jest-environment-node": {
"jest-environment-jsdom": {
"jest-matcher-utils": {
"jest-message-util": {
"jest-pnp-resolver": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-resolve-dependencies": {
"source-map-support": {
"json-parse-better-errors": {
"json-stable-stringify": {
"json-schema-traverse": {
"json-stable-stringify-without-jsonify": {
"json-stringify-safe": {
"symbol-observable": {
"jss-default-unit": {
"jss-vendor-prefixer": {
"last-call-webpack-plugin": {
"lodash.templatesettings": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"minimalistic-assert": {
"move-concurrently": {
"minimalistic-crypto-utils": {
"multicast-dns-service-types": {
"node-libs-browser": {
"normalize-package-data": {
"normalize-scroll-left": {
"object.getownpropertydescriptors": {
"optimize-css-assets-webpack-plugin": {
"parallel-transform": {
"path-is-absolute": {
"pnp-webpack-plugin": {
"posix-character-classes": {
"postcss-attribute-case-insensitive": {
"postcss-color-hex-alpha": {
"postcss-color-functional-notation": {
"postcss-color-mod-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-colormin": {
"postcss-color-rebeccapurple": {
"postcss-convert-values": {
"postcss-custom-properties": {
"postcss-dir-pseudo-class": {
"postcss-custom-media": {
"postcss-custom-selectors": {
"postcss-discard-duplicates": {
"postcss-discard-comments": {
"postcss-discard-overridden": {
"postcss-env-function": {
"postcss-discard-empty": {
"postcss-flexbugs-fixes": {
"postcss-focus-within": {
"postcss-focus-visible": {
"postcss-gap-properties": {
"postcss-image-set-function": {
"postcss-lab-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-load-config": {
"postcss-font-variant": {
"postcss-merge-longhand": {
"postcss-merge-rules": {
"postcss-media-minmax": {
"postcss-selector-parser": {
"postcss-minify-font-values": {
"postcss-minify-params": {
"postcss-minify-gradients": {
"postcss-modules-extract-imports": {
"postcss-modules-local-by-default": {
"postcss-selector-parser": {
"postcss-minify-selectors": {
"postcss-modules-scope": {
"postcss-normalize-display-values": {
"postcss-normalize-charset": {
"postcss-normalize-positions": {
"postcss-normalize-timing-functions": {
"postcss-modules-values": {
"postcss-normalize-repeat-style": {
"postcss-normalize-unicode": {
"postcss-normalize-url": {
"postcss-normalize-string": {
"postcss-normalize-whitespace": {
"postcss-overflow-shorthand": {
"postcss-page-break": {
"postcss-ordered-values": {
"postcss-pseudo-class-any-link": {
"postcss-preset-env": {
"postcss-reduce-transforms": {
"postcss-reduce-initial": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-selector-parser": {
"postcss-unique-selectors": {
"postcss-selector-not": {
"postcss-values-parser": {
"process-nextick-args": {
"postcss-value-parser": {
"promise-inflight": {
"react-app-polyfill": {
"@babel/code-frame": "7.0.0",
"react-event-listener": {
"@babel/runtime": "7.0.0",
"react-error-overlay": {
"react-lifecycles-compat": {
"@svgr/webpack": "2.4.1",
"@babel/core": "7.1.0",
"react-transition-group": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"recursive-readdir": {
"@babel/runtime": "^7.0.0",
"regenerator-runtime": {
"regenerate-unicode-properties": {
"regenerator-transform": {
"remove-trailing-separator": {
"request-promise-native": {
"require-directory": {
"request-promise-core": {
"require-main-filename": {
"require-uncached": {
"require-from-string": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"json-schema-traverse": {
"source-map-resolve": {
"serialize-javascript": {
"spdx-expression-parse": {
"spdx-license-ids": {
"source-map-support": {
"stealthy-require": {
"stringify-object": {
"stream-browserify": {
"strip-json-comments": {
"postcss-selector-parser": {
"symbol-observable": {
"json-schema-traverse": {
"terser-webpack-plugin": {
"json-schema-traverse": {
"source-map-support": {
"to-fast-properties": {
"uglifyjs-webpack-plugin": {
"json-schema-traverse": {
"unicode-canonical-property-names-ecmascript": {
"unicode-property-aliases-ecmascript": {
"validate-npm-package-license": {
"unicode-match-property-ecmascript": {
"unicode-match-property-value-ecmascript": {
"w3c-xmlserializer": {
"timers-browserify": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wasm-edit": "1.7.6",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"json-schema-traverse": {
"webpack-dev-middleware": {
"webpack-dev-server": {
"websocket-driver": {
"is-data-descriptor": {
"webpack-manifest-plugin": {
"workbox-background-sync": {
"websocket-extensions": {
"workbox-broadcast-cache-update": {
"workbox-cache-expiration": {
"workbox-cacheable-response": {
"workbox-navigation-preload": {
"workbox-google-analytics": {
"workbox-range-requests": {
"workbox-strategies": {
"workbox-precaching": {
"workbox-webpack-plugin": {
"write-file-atomic": {
"is-fullwidth-code-point": {
"xml-name-validator": {
"@babel/generator": "^7.0.0",
"@babel/code-frame": {
"@babel/highlight": "^7.0.0"
"@babel/code-frame": "^7.0.0",
"@babel/helpers": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/parser": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/generator": {
"@babel/types": "^7.1.6",
"@babel/template": "^7.1.0",
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/types": "^7.0.0"
"@babel/helper-call-delegate": {
"@babel/types": "^7.0.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-define-map": {
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-explode-assignable-expression": {
"@babel/types": "^7.0.0"
"@babel/helper-function-name": {
"@babel/helper-annotate-as-pure": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-get-function-arity": {
"@babel/traverse": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/helper-module-imports": {
"@babel/types": "^7.0.0"
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/helper-plugin-utils": {
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-regex": {
"@babel/helper-remap-async-to-generator": {
"@babel/template": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-replace-supers": {
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-simple-access": {
"@babel/template": "^7.1.0",
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/helper-function-name": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.2",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/traverse": "^7.1.5",
"@babel/types": "^7.1.5"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-syntax-async-generators": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/highlight": {
"@babel/plugin-proposal-class-properties": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-json-strings": {
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/plugin-syntax-json-strings": "^7.0.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/plugin-syntax-async-generators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/plugin-syntax-json-strings": {
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-async-to-generator": {
"@babel/plugin-syntax-typescript": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/plugin-transform-block-scoped-functions": {
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-computed-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-dotall-regex": {
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-amd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/plugin-transform-modules-umd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-replace-supers": "^7.1.0"
"@babel/plugin-transform-object-super": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-call-delegate": "^7.1.0",
"@babel/plugin-transform-parameters": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-syntax-jsx": "^7.0.0"
"@babel/plugin-transform-regenerator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-spread": {
"@babel/plugin-transform-runtime": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-template-literals": {
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.0.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.1.5",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"@babel/preset-react": {
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.1.0"
"regenerator-runtime": {
"@babel/preset-typescript": {
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.1.2"
"@babel/parser": "^7.1.2",
"@babel/generator": "^7.1.6",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/parser": "^7.1.6",
"@babel/code-frame": "^7.0.0",
"@material-ui/core": {
"@babel/types": "^7.1.6",
"@csstools/convert-colors": {
"@material-ui/utils": "^3.0.0-alpha.0",
"@babel/runtime": "7.1.2",
"@types/react-transition-group": "^2.0.8",
"hoist-non-react-statics": {
"regenerator-runtime": {
"@types/jss": "^9.5.6",
"@babel/runtime": "7.1.2"
"@material-ui/utils": {
"@babel/runtime": "^7.0.0",
"@material-ui/icons": {
"@babel/runtime": "7.0.0",
"@mrmlnc/readdir-enhanced": {
"@babel/core": "^7.0.1",
"@babel/preset-env": "^7.0.0",
"@babel/preset-react": "^7.0.0",
"regenerator-runtime": {
"@types/prop-types": "*",
"@nodelib/fs.stat": {
"@svgr/core": "^2.4.1",
"@types/react-transition-group": {
"@types/prop-types": {
"@webassemblyjs/ast": {
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/ieee754": {
"@webassemblyjs/wasm-gen": "1.7.6"
"@xtuc/ieee754": "^1.2.0"
"@xtuc/long": "4.2.1"
"@webassemblyjs/leb128": {
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/utf8": {
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@xtuc/long": "4.2.1"
"is-accessor-descriptor": {
"@webassemblyjs/helper-fsm": "1.7.6",
"is-accessor-descriptor": {
"is-data-descriptor": {
"acorn-dynamic-import": {
"is-data-descriptor": {
"append-transform": {
"@babel/parser": "^7.0.0",
"babel-code-frame": {
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.0.0",
"@babel/traverse": "^7.0.0",
"babel-plugin-dynamic-import-node": {
"babel-extract-comments": {
"babel-plugin-jest-hoist": {
"babel-plugin-macros": {
"babel-plugin-istanbul": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-named-asset-import": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-react-app": {
"babel-preset-jest": {
"@babel/core": "7.1.0",
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/preset-typescript": "7.1.0",
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/runtime": "7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"is-accessor-descriptor": {
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"to-fast-properties": {
"is-data-descriptor": {
"browser-process-hrtime": {
"builtin-status-codes": {
"case-sensitive-paths-webpack-plugin": {
"browserify-cipher": {
"chrome-trace-event": {
"binary-extensions": {
"component-emitter": {
"connect-history-api-fallback": {
"confusing-browser-globals": {
"console-browserify": {
"collection-visit": {
"constants-browserify": {
"content-disposition": {
"cookie-signature": {
"convert-source-map": {
"css-declaration-sorter": {
"copy-concurrently": {
"crypto-browserify": {
"css-selector-tokenizer": {
"css-select-base-adapter": {
"css-unit-converter": {
"cssnano-preset-default": {
"cssnano-util-get-arguments": {
"cssnano-util-get-match": {
"cssnano-util-raw-cache": {
"damerau-levenshtein": {
"default-require-extensions": {
"decode-uri-component": {
"cssnano-util-same-parent": {
"is-accessor-descriptor": {
"define-properties": {
"is-data-descriptor": {
"electron-to-chromium": {
"@babel/runtime": "^7.1.2"
"regenerator-runtime": {
"escape-string-regexp": {
"@babel/code-frame": "^7.0.0",
"eslint-import-resolver-node": {
"eslint-config-react-app": {
"enhanced-resolve": {
"eslint-module-utils": {
"eslint-plugin-import": {
"eslint-plugin-flowtype": {
"eslint-plugin-jsx-a11y": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"eslint-visitor-keys": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"eslint-plugin-react": {
"fast-levenshtein": {
"filename-reserved-regex": {
"fast-json-stable-stringify": {
"flush-write-stream": {
"follow-redirects": {
"fork-ts-checker-webpack-plugin-alt": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"file-entry-cache": {
"is-accessor-descriptor": {
"fs-write-stream-atomic": {
"are-we-there-yet": {
"is-data-descriptor": {
"console-control-strings": {
"is-fullwidth-code-point": {
"strip-json-comments": {
"process-nextick-args": {
"functional-red-black-tree": {
"path-is-absolute": {
"get-own-enumerable-property-symbols": {
"hoist-non-react-statics": {
"html-comment-regex": {
"homedir-polyfill": {
"html-webpack-plugin": {
"html-encoding-sniffer": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"hyphenate-style-name": {
"@types/tapable": "1.0.2",
"icss-replace-symbols": {
"symbol-observable": {
"indefinite-observable": {
"is-builtin-module": {
"is-accessor-descriptor": {
"is-equal-shallow": {
"identity-obj-proxy": {
"is-fullwidth-code-point": {
"is-data-descriptor": {
"istanbul-lib-coverage": {
"isomorphic-fetch": {
"istanbul-lib-hook": {
"is-posix-bracket": {
"istanbul-lib-instrument": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"istanbul-lib-report": {
"jest-changed-files": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-leak-detector": {
"jest-matcher-utils": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-resolve-dependencies": {
"jest-pnp-resolver": {
"jest-message-util": {
"json-parse-better-errors": {
"source-map-support": {
"json-stable-stringify": {
"json-stable-stringify-without-jsonify": {
"json-stringify-safe": {
"jss-default-unit": {
"jss-vendor-prefixer": {
"last-call-webpack-plugin": {
"json-schema-traverse": {
"lodash._reinterpolate": {
"merge-descriptors": {
"lodash.templatesettings": {
"mini-css-extract-plugin": {
"lodash.camelcase": {
"minimalistic-crypto-utils": {
"move-concurrently": {
"minimalistic-assert": {
"multicast-dns-service-types": {
"normalize-package-data": {
"normalize-scroll-left": {
"node-libs-browser": {
"object.getownpropertydescriptors": {
"path-is-absolute": {
"pnp-webpack-plugin": {
"optimize-css-assets-webpack-plugin": {
"postcss-color-functional-notation": {
"parallel-transform": {
"posix-character-classes": {
"postcss-attribute-case-insensitive": {
"postcss-color-mod-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-rebeccapurple": {
"postcss-color-hex-alpha": {
"postcss-colormin": {
"postcss-convert-values": {
"postcss-custom-properties": {
"postcss-dir-pseudo-class": {
"postcss-custom-media": {
"postcss-custom-selectors": {
"postcss-discard-duplicates": {
"postcss-discard-overridden": {
"postcss-discard-empty": {
"postcss-discard-comments": {
"postcss-env-function": {
"postcss-focus-visible": {
"postcss-focus-within": {
"postcss-font-variant": {
"postcss-gap-properties": {
"@csstools/convert-colors": "^1.4.0",
"postcss-image-set-function": {
"postcss-flexbugs-fixes": {
"postcss-merge-longhand": {
"postcss-selector-parser": {
"postcss-load-config": {
"postcss-lab-function": {
"postcss-merge-rules": {
"postcss-minify-font-values": {
"postcss-minify-selectors": {
"postcss-media-minmax": {
"postcss-minify-params": {
"postcss-minify-gradients": {
"postcss-modules-extract-imports": {
"postcss-selector-parser": {
"postcss-modules-scope": {
"postcss-modules-local-by-default": {
"postcss-modules-values": {
"postcss-normalize-charset": {
"postcss-normalize-display-values": {
"postcss-normalize-positions": {
"postcss-normalize-repeat-style": {
"postcss-normalize-unicode": {
"postcss-normalize-timing-functions": {
"postcss-normalize-string": {
"postcss-normalize-whitespace": {
"postcss-normalize-url": {
"postcss-overflow-shorthand": {
"postcss-preset-env": {
"postcss-ordered-values": {
"postcss-pseudo-class-any-link": {
"postcss-page-break": {
"postcss-reduce-initial": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-reduce-transforms": {
"postcss-value-parser": {
"postcss-selector-parser": {
"postcss-selector-not": {
"postcss-values-parser": {
"postcss-unique-selectors": {
"react-app-polyfill": {
"process-nextick-args": {
"@babel/code-frame": "7.0.0",
"promise-inflight": {
"react-error-overlay": {
"@babel/runtime": "7.0.0",
"react-lifecycles-compat": {
"react-form-validator-core": {
"react-event-listener": {
"react-material-ui-form-validator": {
"@babel/core": "7.1.0",
"@svgr/webpack": "2.4.1",
"react-swipeable-views-core": {
"react-swipeable-views": {
"@babel/runtime": "7.0.0",
"@babel/runtime": "7.0.0",
"@babel/runtime": "7.0.0",
"react-swipeable-views-utils": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"react-transition-group": {
"is-accessor-descriptor": {
"@babel/runtime": "^7.0.0",
"regenerate-unicode-properties": {
"is-data-descriptor": {
"recursive-readdir": {
"regenerator-transform": {
"regenerator-runtime": {
"remove-trailing-separator": {
"request-promise-core": {
"request-promise-native": {
"require-from-string": {
"require-directory": {
"require-uncached": {
"require-main-filename": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"serialize-javascript": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"source-map-resolve": {
"is-data-descriptor": {
"source-map-support": {
"spdx-expression-parse": {
"stream-browserify": {
"stringify-object": {
"stealthy-require": {
"spdx-license-ids": {
"strict-uri-encode": {
"strip-json-comments": {
"postcss-selector-parser": {
"symbol-observable": {
"terser-webpack-plugin": {
"to-fast-properties": {
"timers-browserify": {
"source-map-support": {
"uglifyjs-webpack-plugin": {
"unicode-match-property-ecmascript": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-value-ecmascript": {
"validate-npm-package-license": {
"unicode-property-aliases-ecmascript": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"w3c-xmlserializer": {
"@webassemblyjs/wasm-edit": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"webpack-dev-server": {
"webpack-dev-middleware": {
"webpack-manifest-plugin": {
"is-data-descriptor": {
"websocket-extensions": {
"workbox-broadcast-cache-update": {
"websocket-driver": {
"workbox-cache-expiration": {
"workbox-cacheable-response": {
"workbox-background-sync": {
"workbox-google-analytics": {
"workbox-navigation-preload": {
"workbox-precaching": {
"workbox-range-requests": {
"workbox-webpack-plugin": {
"workbox-strategies": {
"write-file-atomic": {
"is-fullwidth-code-point": {
"xml-name-validator": {
"@babel/generator": "^7.1.6",
"@babel/highlight": "^7.0.0"
"@babel/code-frame": {
"@babel/helpers": "^7.1.5",
"@babel/traverse": "^7.1.6",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.2.2",
"@babel/parser": "^7.1.6",
"@babel/template": "^7.1.2",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.1.6",
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/generator": {
"@babel/helper-builder-react-jsx": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/helper-call-delegate": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-define-map": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-explode-assignable-expression": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-function-name": {
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": {
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.2.2",
"@babel/helper-plugin-utils": {
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.2.2",
"@babel/helper-regex": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/helper-remap-async-to-generator": {
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/traverse": "^7.2.3",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-simple-access": {
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-wrap-function": {
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.2.0"
"@babel/traverse": "^7.1.5",
"@babel/highlight": {
"@babel/template": "^7.1.2",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/types": "^7.2.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-proposal-class-properties": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-async-generators": "^7.2.0"
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/plugin-syntax-json-strings": "^7.2.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-async-generators": {
"@babel/plugin-syntax-class-properties": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-syntax-json-strings": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-object-rest-spread": {
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/helper-define-map": "^7.1.0",
"@babel/plugin-transform-block-scoping": {
"@babel/plugin-transform-classes": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-computed-properties": {
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-flow-strip-types": {
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-amd": {
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-for-of": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-umd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-parameters": {
"@babel/plugin-transform-object-super": {
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/helper-replace-supers": "^7.1.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": {
"@babel/helper-builder-react-jsx": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-regenerator": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/plugin-transform-runtime": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/plugin-transform-template-literals": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.2.0",
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.2.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.2.0",
"@babel/plugin-syntax-async-generators": "^7.2.0",
"@babel/plugin-syntax-object-rest-spread": "^7.2.0",
"@babel/plugin-transform-arrow-functions": "^7.2.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.2.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
"@babel/plugin-transform-async-to-generator": "^7.2.0",
"@babel/plugin-transform-block-scoped-functions": "^7.2.0",
"@babel/plugin-transform-classes": "^7.2.0",
"@babel/plugin-transform-block-scoping": "^7.2.0",
"@babel/plugin-transform-computed-properties": "^7.2.0",
"@babel/plugin-transform-destructuring": "^7.2.0",
"@babel/plugin-transform-duplicate-keys": "^7.2.0",
"@babel/plugin-transform-dotall-regex": "^7.2.0",
"@babel/plugin-transform-function-name": "^7.2.0",
"@babel/plugin-transform-for-of": "^7.2.0",
"@babel/plugin-transform-modules-amd": "^7.2.0",
"@babel/plugin-transform-modules-commonjs": "^7.2.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": "^7.2.0",
"@babel/plugin-transform-modules-umd": "^7.2.0",
"@babel/plugin-transform-object-super": "^7.2.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.2.0",
"@babel/plugin-transform-shorthand-properties": "^7.2.0",
"@babel/plugin-transform-sticky-regex": "^7.2.0",
"@babel/plugin-transform-literals": "^7.2.0",
"@babel/plugin-transform-template-literals": "^7.2.0",
"@babel/plugin-transform-spread": "^7.2.0",
"@babel/plugin-transform-typeof-symbol": "^7.2.0",
"@babel/plugin-transform-unicode-regex": "^7.2.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/preset-react": {
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/preset-typescript": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.1.0"
"@babel/parser": "^7.2.2",
"@babel/code-frame": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/types": "^7.2.2"
"@babel/generator": "^7.2.2",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/types": "^7.2.2",
"@babel/parser": "^7.2.3",
"@csstools/convert-colors": {
"regenerator-runtime": {
"@mrmlnc/readdir-enhanced": {
"@babel/core": "^7.0.1",
"@nodelib/fs.stat": {
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@babel/preset-env": "^7.0.0",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/ast": {
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/ieee754": {
"@webassemblyjs/wasm-gen": "1.7.6"
"@webassemblyjs/utf8": {
"@webassemblyjs/leb128": {
"@xtuc/long": "4.2.1"
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/wast-parser": {
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/wast-printer": {
"@webassemblyjs/helper-fsm": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/ast": "1.7.6",
"is-accessor-descriptor": {
"@xtuc/long": "4.2.1"
"acorn-dynamic-import": {
"is-accessor-descriptor": {
"append-transform": {
"babel-code-frame": {
"@babel/code-frame": "^7.0.0",
"is-data-descriptor": {
"@babel/parser": "^7.0.0",
"is-data-descriptor": {
"@babel/traverse": "^7.0.0",
"@babel/types": "^7.0.0",
"babel-extract-comments": {
"babel-plugin-dynamic-import-node": {
"babel-plugin-istanbul": {
"babel-plugin-named-asset-import": {
"babel-plugin-jest-hoist": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-macros": {
"babel-preset-jest": {
"@babel/plugin-proposal-decorators": "7.1.6",
"babel-plugin-syntax-object-rest-spread": {
"@babel/plugin-proposal-class-properties": "7.1.0",
"babel-preset-react-app": {
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/core": "7.1.6",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-destructuring": "7.1.3",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-flow-strip-types": "7.1.6",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-typescript": "7.1.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/runtime": "7.1.5",
"@babel/preset-react": "7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/preset-env": "7.1.6",
"@babel/plugin-transform-classes": {
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-destructuring": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-react-display-name": {
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-block-scoping": "^7.1.5",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"is-accessor-descriptor": {
"to-fast-properties": {
"browser-process-hrtime": {
"is-data-descriptor": {
"binary-extensions": {
"browserify-cipher": {
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"collection-visit": {
"case-sensitive-paths-webpack-plugin": {
"@types/q": "^1.5.1",
"chrome-trace-event": {
"builtin-status-codes": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"component-emitter": {
"content-disposition": {
"constants-browserify": {
"cookie-signature": {
"convert-source-map": {
"console-browserify": {
"copy-concurrently": {
"css-selector-tokenizer": {
"css-declaration-sorter": {
"css-unit-converter": {
"css-select-base-adapter": {
"crypto-browserify": {
"cssnano-util-get-arguments": {
"cssnano-util-get-match": {
"cssnano-util-raw-cache": {
"cssnano-util-same-parent": {
"damerau-levenshtein": {
"cssnano-preset-default": {
"default-require-extensions": {
"decode-uri-component": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"electron-to-chromium": {
"enhanced-resolve": {
"define-properties": {
"eslint-config-react-app": {
"escape-string-regexp": {
"@babel/code-frame": "^7.0.0",
"eslint-import-resolver-node": {
"eslint-plugin-flowtype": {
"eslint-plugin-import": {
"eslint-plugin-react": {
"eslint-plugin-jsx-a11y": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"eslint-module-utils": {
"@nodelib/fs.stat": "^1.1.2",
"eslint-visitor-keys": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"file-entry-cache": {
"is-data-descriptor": {
"fast-levenshtein": {
"fast-json-stable-stringify": {
"fork-ts-checker-webpack-plugin-alt": {
"follow-redirects": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"are-we-there-yet": {
"flush-write-stream": {
"is-accessor-descriptor": {
"path-is-absolute": {
"fs-write-stream-atomic": {
"console-control-strings": {
"process-nextick-args": {
"is-data-descriptor": {
"functional-red-black-tree": {
"get-own-enumerable-property-symbols": {
"strip-json-comments": {
"is-fullwidth-code-point": {
"homedir-polyfill": {
"html-webpack-plugin": {
"@types/tapable": "1.0.2",
"html-encoding-sniffer": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"icss-replace-symbols": {
"is-data-descriptor": {
"html-comment-regex": {
"is-accessor-descriptor": {
"identity-obj-proxy": {
"is-equal-shallow": {
"is-builtin-module": {
"is-fullwidth-code-point": {
"is-data-descriptor": {
"istanbul-lib-coverage": {
"is-posix-bracket": {
"istanbul-lib-hook": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"istanbul-reports": {
"istanbul-lib-instrument": {
"jest-environment-jsdom": {
"jest-changed-files": {
"jest-leak-detector": {
"jest-environment-node": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-pnp-resolver": {
"source-map-support": {
"jest-message-util": {
"jest-matcher-utils": {
"json-parse-better-errors": {
"jest-resolve-dependencies": {
"json-stable-stringify-without-jsonify": {
"json-stringify-safe": {
"last-call-webpack-plugin": {
"json-stable-stringify": {
"json-schema-traverse": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"minimalistic-assert": {
"multicast-dns-service-types": {
"node-libs-browser": {
"lodash.templatesettings": {
"minimalistic-crypto-utils": {
"object.getownpropertydescriptors": {
"move-concurrently": {
"normalize-package-data": {
"optimize-css-assets-webpack-plugin": {
"parallel-transform": {
"posix-character-classes": {
"pnp-webpack-plugin": {
"postcss-color-gray": {
"postcss-color-functional-notation": {
"@csstools/convert-colors": "^1.4.0",
"postcss-attribute-case-insensitive": {
"postcss-color-mod-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-hex-alpha": {
"path-is-absolute": {
"postcss-convert-values": {
"postcss-custom-properties": {
"postcss-color-rebeccapurple": {
"postcss-custom-selectors": {
"postcss-custom-media": {
"postcss-dir-pseudo-class": {
"postcss-colormin": {
"postcss-discard-empty": {
"postcss-discard-duplicates": {
"postcss-discard-overridden": {
"postcss-env-function": {
"postcss-flexbugs-fixes": {
"postcss-discard-comments": {
"postcss-double-position-gradients": {
"postcss-focus-visible": {
"postcss-image-set-function": {
"postcss-gap-properties": {
"postcss-focus-within": {
"postcss-lab-function": {
"postcss-media-minmax": {
"@csstools/convert-colors": "^1.4.0",
"postcss-load-config": {
"postcss-font-variant": {
"postcss-selector-parser": {
"postcss-minify-font-values": {
"postcss-minify-gradients": {
"postcss-minify-selectors": {
"postcss-merge-longhand": {
"postcss-selector-parser": {
"postcss-merge-rules": {
"postcss-minify-params": {
"postcss-modules-extract-imports": {
"postcss-modules-local-by-default": {
"postcss-modules-scope": {
"postcss-modules-values": {
"postcss-normalize-charset": {
"postcss-normalize-repeat-style": {
"postcss-normalize-display-values": {
"postcss-normalize-positions": {
"postcss-normalize-timing-functions": {
"postcss-normalize-string": {
"postcss-normalize-whitespace": {
"postcss-normalize-url": {
"postcss-overflow-shorthand": {
"postcss-page-break": {
"postcss-normalize-unicode": {
"postcss-reduce-transforms": {
"postcss-pseudo-class-any-link": {
"postcss-preset-env": {
"postcss-reduce-initial": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-selector-parser": {
"postcss-ordered-values": {
"postcss-selector-not": {
"postcss-unique-selectors": {
"postcss-value-parser": {
"postcss-values-parser": {
"process-nextick-args": {
"promise-inflight": {
"react-app-polyfill": {
"react-error-overlay": {
"@babel/code-frame": "7.0.0",
"@svgr/webpack": "2.4.1",
"@babel/core": "7.1.6",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"recursive-readdir": {
"is-data-descriptor": {
"regenerate-unicode-properties": {
"regenerator-runtime": {
"regenerator-transform": {
"request-promise-core": {
"remove-trailing-separator": {
"request-promise-native": {
"require-from-string": {
"require-main-filename": {
"require-uncached": {
"require-directory": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"serialize-javascript": {
"is-accessor-descriptor": {
"source-map-resolve": {
"is-data-descriptor": {
"source-map-support": {
"spdx-expression-parse": {
"is-data-descriptor": {
"spdx-license-ids": {
"stream-browserify": {
"stringify-object": {
"stealthy-require": {
"postcss-selector-parser": {
"source-map-support": {
"strip-json-comments": {
"uglifyjs-webpack-plugin": {
"terser-webpack-plugin": {
"timers-browserify": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-value-ecmascript": {
"unicode-property-aliases-ecmascript": {
"to-fast-properties": {
"unicode-match-property-ecmascript": {
"validate-npm-package-license": {
"w3c-xmlserializer": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"is-data-descriptor": {
"is-accessor-descriptor": {
"@webassemblyjs/wasm-edit": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"is-data-descriptor": {
"is-accessor-descriptor": {
"webpack-dev-server": {
"webpack-dev-middleware": {
"webpack-manifest-plugin": {
"workbox-broadcast-cache-update": {
"workbox-background-sync": {
"websocket-driver": {
"websocket-extensions": {
"workbox-cache-expiration": {
"workbox-cacheable-response": {
"workbox-navigation-preload": {
"workbox-precaching": {
"workbox-google-analytics": {
"is-fullwidth-code-point": {
"workbox-strategies": {
"workbox-range-requests": {
"workbox-webpack-plugin": {
"xml-name-validator": {
"write-file-atomic": {
"@babel/code-frame": "^7.0.0",
"@babel/code-frame": {
"@babel/highlight": "^7.0.0"
"@babel/generator": "^7.2.2",
"@babel/template": "^7.2.2",
"@babel/parser": "^7.2.2",
"@babel/helpers": "^7.2.0",
"@babel/traverse": "^7.2.2",
"@babel/types": "^7.3.3",
"@babel/helper-annotate-as-pure": {
"@babel/generator": {
"@babel/types": "^7.2.2",
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.3.0",
"@babel/helper-call-delegate": {
"@babel/traverse": "^7.1.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-create-class-features-plugin": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.2.3"
"@babel/helper-define-map": {
"@babel/types": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.1.0",
"@babel/helper-explode-assignable-expression": {
"@babel/helper-function-name": {
"@babel/helper-get-function-arity": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/helper-hoist-variables": {
"@babel/helper-module-transforms": {
"@babel/helper-module-imports": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/template": "^7.2.2",
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0",
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.2.2",
"@babel/helper-plugin-utils": {
"@babel/helper-regex": {
"@babel/helper-remap-async-to-generator": {
"@babel/helper-wrap-function": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-replace-supers": {
"@babel/traverse": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/helper-simple-access": {
"@babel/traverse": "^7.2.3",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-wrap-function": {
"@babel/types": "^7.2.0"
"@babel/template": "^7.1.2",
"@babel/types": "^7.3.0"
"@babel/highlight": {
"@babel/traverse": "^7.1.5",
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/plugin-syntax-async-generators": "^7.2.0"
"@babel/helper-create-class-features-plugin": "^7.3.0",
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-proposal-class-properties": {
"@babel/helper-create-class-features-plugin": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-json-strings": {
"@babel/plugin-syntax-decorators": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-syntax-json-strings": "^7.2.0"
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-syntax-async-generators": {
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-decorators": {
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-json-strings": {
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-classes": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-dotall-regex": {
"@babel/plugin-transform-destructuring": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-for-of": {
"@babel/plugin-syntax-flow": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/plugin-transform-modules-amd": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-systemjs": {
"@babel/plugin-transform-modules-umd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-named-capturing-groups-regex": {
"@babel/plugin-transform-new-target": {
"@babel/plugin-transform-object-super": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-parameters": {
"@babel/helper-replace-supers": "^7.1.0"
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/plugin-transform-react-display-name": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-builder-react-jsx": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-react-jsx-source": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-regenerator": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-runtime": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/plugin-transform-template-literals": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-imports": "^7.0.0",
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.2.0",
"@babel/plugin-proposal-object-rest-spread": "^7.3.1",
"@babel/plugin-proposal-unicode-property-regex": "^7.2.0",
"@babel/plugin-proposal-json-strings": "^7.2.0",
"@babel/plugin-syntax-async-generators": "^7.2.0",
"@babel/plugin-syntax-json-strings": "^7.2.0",
"@babel/plugin-syntax-object-rest-spread": "^7.2.0",
"@babel/plugin-transform-arrow-functions": "^7.2.0",
"@babel/plugin-transform-async-to-generator": "^7.2.0",
"@babel/plugin-transform-block-scoped-functions": "^7.2.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
"@babel/plugin-transform-destructuring": "^7.2.0",
"@babel/plugin-transform-block-scoping": "^7.2.0",
"@babel/plugin-transform-classes": "^7.2.0",
"@babel/plugin-transform-computed-properties": "^7.2.0",
"@babel/plugin-transform-for-of": "^7.2.0",
"@babel/plugin-transform-dotall-regex": "^7.2.0",
"@babel/plugin-transform-duplicate-keys": "^7.2.0",
"@babel/plugin-transform-function-name": "^7.2.0",
"@babel/plugin-transform-modules-commonjs": "^7.2.0",
"@babel/plugin-transform-modules-systemjs": "^7.2.0",
"@babel/plugin-transform-modules-amd": "^7.2.0",
"@babel/plugin-transform-literals": "^7.2.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-modules-umd": "^7.2.0",
"@babel/plugin-transform-object-super": "^7.2.0",
"@babel/plugin-transform-parameters": "^7.2.0",
"@babel/plugin-transform-spread": "^7.2.0",
"@babel/plugin-transform-sticky-regex": "^7.2.0",
"@babel/plugin-transform-shorthand-properties": "^7.2.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.2.0",
"@babel/plugin-transform-unicode-regex": "^7.2.0",
"@babel/plugin-transform-template-literals": "^7.2.0",
"@babel/preset-react": {
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-typescript": {
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/plugin-transform-typescript": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"regenerator-runtime": {
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.2.2",
"@babel/types": "^7.2.2"
"@babel/generator": "^7.2.2",
"@babel/code-frame": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/parser": "^7.2.3",
"@mrmlnc/readdir-enhanced": {
"@csstools/convert-colors": {
"@babel/types": "^7.2.2",
"@nodelib/fs.stat": {
"@svgr/babel-plugin-remove-jsx-attribute": {
"@svgr/babel-plugin-add-jsx-attribute": {
"@svgr/babel-plugin-remove-jsx-empty-expression": {
"@svgr/babel-plugin-replace-jsx-attribute-value": {
"@svgr/babel-plugin-transform-svg-component": {
"@svgr/babel-plugin-svg-em-dimensions": {
"@svgr/babel-plugin-transform-react-native-svg": {
"@svgr/babel-plugin-svg-dynamic-title": {
"@svgr/babel-preset": {
"@svgr/babel-plugin-remove-jsx-attribute": "^4.0.3",
"@svgr/babel-plugin-add-jsx-attribute": "^4.0.0",
"@svgr/babel-plugin-remove-jsx-empty-expression": "^4.0.0",
"@svgr/babel-plugin-replace-jsx-attribute-value": "^4.0.0",
"@svgr/babel-plugin-svg-dynamic-title": "^4.0.0",
"@svgr/babel-plugin-transform-react-native-svg": "^4.0.0",
"@svgr/babel-plugin-transform-svg-component": "^4.1.0"
"@svgr/babel-plugin-svg-em-dimensions": "^4.0.0",
"@svgr/plugin-jsx": "^4.1.0",
"@svgr/plugin-jsx": {
"@svgr/hast-util-to-babel-ast": {
"@babel/types": "^7.1.6"
"@svgr/babel-preset": "^4.1.0",
"@babel/core": "^7.1.6",
"@svgr/hast-util-to-babel-ast": "^4.1.0",
"@svgr/plugin-svgo": {
"@babel/core": "^7.1.6",
"@svgr/core": "^4.1.0",
"@babel/preset-react": "^7.0.0",
"@babel/preset-env": "^7.1.6",
"@svgr/plugin-jsx": "^4.1.0",
"@types/vfile-message": {
"@types/vfile-message": "*"
"@svgr/plugin-svgo": "^4.0.3",
"@webassemblyjs/ast": {
"@webassemblyjs/helper-module-context": "1.7.11",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/wast-parser": "1.7.11"
"@webassemblyjs/helper-wasm-bytecode": "1.7.11",
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/wast-printer": "1.7.11"
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.11",
"@webassemblyjs/helper-buffer": "1.7.11",
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/wasm-gen": "1.7.11"
"@webassemblyjs/ieee754": {
"@xtuc/long": "4.2.1"
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/leb128": {
"@webassemblyjs/utf8": {
"@webassemblyjs/helper-buffer": "1.7.11",
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.11",
"@webassemblyjs/wasm-gen": "1.7.11",
"@webassemblyjs/helper-wasm-section": "1.7.11",
"@webassemblyjs/wasm-opt": "1.7.11",
"@webassemblyjs/wasm-parser": "1.7.11",
"@webassemblyjs/wast-printer": "1.7.11"
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.11",
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/ieee754": "1.7.11",
"@webassemblyjs/leb128": "1.7.11",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/utf8": "1.7.11"
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/wasm-gen": "1.7.11",
"@webassemblyjs/helper-buffer": "1.7.11",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/wasm-parser": "1.7.11"
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/helper-api-error": "1.7.11",
"@webassemblyjs/ieee754": "1.7.11",
"@webassemblyjs/helper-wasm-bytecode": "1.7.11",
"@webassemblyjs/leb128": "1.7.11",
"@webassemblyjs/utf8": "1.7.11"
"@webassemblyjs/wast-parser": {
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/helper-api-error": "1.7.11",
"@webassemblyjs/floating-point-hex-parser": "1.7.11",
"@webassemblyjs/helper-code-frame": "1.7.11",
"@webassemblyjs/helper-fsm": "1.7.11",
"@webassemblyjs/wast-printer": {
"@webassemblyjs/ast": "1.7.11",
"@xtuc/long": "4.2.1"
"@webassemblyjs/wast-parser": "1.7.11",
"acorn-dynamic-import": {
"is-accessor-descriptor": {
"@xtuc/long": "4.2.1"
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"append-transform": {
"babel-code-frame": {
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.0.0",
"@babel/traverse": "^7.0.0",
"babel-extract-comments": {
"@babel/types": "^7.0.0",
"babel-plugin-dynamic-import-node": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-named-asset-import": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-macros": {
"babel-plugin-transform-object-rest-spread": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-jest": {
"babel-preset-react-app": {
"@babel/core": "7.2.2",
"@babel/plugin-proposal-class-properties": "7.3.0",
"@babel/plugin-proposal-decorators": "7.3.0",
"@babel/plugin-proposal-object-rest-spread": "7.3.2",
"@babel/plugin-transform-classes": "7.2.2",
"@babel/plugin-syntax-dynamic-import": "7.2.0",
"@babel/plugin-transform-react-constant-elements": "7.2.0",
"@babel/plugin-transform-react-display-name": "7.2.0",
"@babel/plugin-transform-destructuring": "7.3.2",
"@babel/plugin-transform-flow-strip-types": "7.2.3",
"@babel/plugin-transform-runtime": "7.2.0",
"@babel/preset-env": "7.3.1",
"@babel/preset-react": "7.0.0",
"@babel/preset-typescript": "7.1.0",
"@babel/runtime": "7.3.1",
"@babel/plugin-transform-classes": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"to-fast-properties": {
"binary-extensions": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"browserify-cipher": {
"builtin-status-codes": {
"case-sensitive-paths-webpack-plugin": {
"browser-process-hrtime": {
"console-control-strings": {
"are-we-there-yet": {
"is-fullwidth-code-point": {
"strip-json-comments": {
"path-is-absolute": {
"process-nextick-args": {
"chrome-trace-event": {
"@types/q": "^1.5.1",
"collection-visit": {
"comma-separated-tokens": {
"component-emitter": {
"confusing-browser-globals": {
"console-browserify": {
"connect-history-api-fallback": {
"content-disposition": {
"convert-source-map": {
"constants-browserify": {
"cookie-signature": {
"crypto-browserify": {
"copy-concurrently": {
"css-blank-pseudo": {
"css-prefers-color-scheme": {
"css-declaration-sorter": {
"css-selector-tokenizer": {
"css-unit-converter": {
"css-select-base-adapter": {
"cssnano-util-get-arguments": {
"cssnano-util-raw-cache": {
"cssnano-preset-default": {
"cssnano-util-get-match": {
"cssnano-util-same-parent": {
"damerau-levenshtein": {
"decode-uri-component": {
"default-require-extensions": {
"define-properties": {
"electron-to-chromium": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"enhanced-resolve": {
"@babel/code-frame": "^7.0.0",
"escape-string-regexp": {
"eslint-config-react-app": {
"eslint-import-resolver-node": {
"eslint-module-utils": {
"eslint-plugin-import": {
"eslint-plugin-flowtype": {
"eslint-plugin-react": {
"eslint-plugin-jsx-a11y": {
"eslint-visitor-keys": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fast-json-stable-stringify": {
"fast-levenshtein": {
"file-entry-cache": {
"flush-write-stream": {
"follow-redirects": {
"fork-ts-checker-webpack-plugin-alt": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fs-write-stream-atomic": {
"are-we-there-yet": {
"console-control-strings": {
"is-fullwidth-code-point": {
"path-is-absolute": {
"process-nextick-args": {
"strip-json-comments": {
"functional-red-black-tree": {
"get-own-enumerable-property-symbols": {
"hast-util-from-parse5": {
"hast-util-parse-selector": {
"html-encoding-sniffer": {
"html-comment-regex": {
"html-webpack-plugin": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"icss-replace-symbols": {
"identity-obj-proxy": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-equal-shallow": {
"is-data-descriptor": {
"is-fullwidth-code-point": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-instrument": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"jest-changed-files": {
"istanbul-reports": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-leak-detector": {
"jest-matcher-utils": {
"jest-message-util": {
"jest-resolve-dependencies": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-pnp-resolver": {
"source-map-support": {
"json-parse-better-errors": {
"jest-watch-typeahead": {
"json-schema-traverse": {
"json-stringify-safe": {
"json-stable-stringify": {
"json-stable-stringify-without-jsonify": {
"last-call-webpack-plugin": {
"merge-descriptors": {
"lodash.templatesettings": {
"lodash._reinterpolate": {
"lodash.camelcase": {
"mini-css-extract-plugin": {
"move-concurrently": {
"minimalistic-crypto-utils": {
"minimalistic-assert": {
"multicast-dns-service-types": {
"normalize-package-data": {
"node-libs-browser": {
"object.fromentries": {
"object.getownpropertydescriptors": {
"path-is-absolute": {
"optimize-css-assets-webpack-plugin": {
"parallel-transform": {
"postcss-attribute-case-insensitive": {
"pnp-webpack-plugin": {
"posix-character-classes": {
"postcss-color-functional-notation": {
"postcss-color-gray": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-hex-alpha": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-mod-function": {
"postcss-colormin": {
"postcss-color-rebeccapurple": {
"postcss-convert-values": {
"postcss-custom-media": {
"postcss-custom-properties": {
"postcss-custom-selectors": {
"postcss-discard-comments": {
"postcss-dir-pseudo-class": {
"postcss-discard-duplicates": {
"postcss-discard-empty": {
"postcss-discard-overridden": {
"postcss-double-position-gradients": {
"postcss-env-function": {
"postcss-flexbugs-fixes": {
"postcss-focus-visible": {
"postcss-focus-within": {
"postcss-font-variant": {
"postcss-gap-properties": {
"postcss-image-set-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-lab-function": {
"postcss-load-config": {
"postcss-media-minmax": {
"postcss-selector-parser": {
"postcss-merge-longhand": {
"postcss-minify-font-values": {
"postcss-minify-gradients": {
"postcss-merge-rules": {
"postcss-minify-params": {
"postcss-selector-parser": {
"postcss-minify-selectors": {
"postcss-modules-extract-imports": {
"postcss-modules-scope": {
"postcss-modules-local-by-default": {
"postcss-modules-values": {
"postcss-normalize-display-values": {
"postcss-normalize-charset": {
"postcss-normalize-positions": {
"postcss-normalize-string": {
"postcss-normalize-repeat-style": {
"postcss-normalize-timing-functions": {
"postcss-normalize-whitespace": {
"postcss-normalize-unicode": {
"postcss-normalize-url": {
"postcss-ordered-values": {
"postcss-overflow-shorthand": {
"postcss-page-break": {
"postcss-pseudo-class-any-link": {
"postcss-reduce-initial": {
"postcss-preset-env": {
"postcss-reduce-transforms": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-selector-not": {
"postcss-selector-parser": {
"postcss-unique-selectors": {
"postcss-values-parser": {
"postcss-value-parser": {
"process-nextick-args": {
"property-information": {
"promise-inflight": {
"@babel/code-frame": "7.0.0",
"react-app-polyfill": {
"react-error-overlay": {
"@babel/core": "7.2.2",
"@svgr/webpack": "4.1.0",
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"recursive-readdir": {
"regenerate-unicode-properties": {
"regenerator-runtime": {
"regenerator-transform": {
"remove-trailing-separator": {
"request-promise-core": {
"request-promise-native": {
"require-directory": {
"require-from-string": {
"require-main-filename": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"serialize-javascript": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"source-map-support": {
"source-map-resolve": {
"space-separated-tokens": {
"spdx-expression-parse": {
"spdx-license-ids": {
"stealthy-require": {
"stream-browserify": {
"stringify-object": {
"strip-json-comments": {
"source-map-support": {
"postcss-selector-parser": {
"terser-webpack-plugin": {
"to-fast-properties": {
"timers-browserify": {
"unicode-match-property-ecmascript": {
"unicode-property-aliases-ecmascript": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-value-ecmascript": {
"@types/unist": "^2.0.0",
"@types/vfile": "^3.0.0",
"validate-npm-package-license": {
"unist-util-stringify-position": {
"webidl-conversions": {
"@webassemblyjs/helper-module-context": "1.7.11",
"@webassemblyjs/ast": "1.7.11",
"@webassemblyjs/wasm-edit": "1.7.11",
"@webassemblyjs/wasm-parser": "1.7.11",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"webpack-dev-middleware": {
"webpack-dev-server": {
"webpack-manifest-plugin": {
"websocket-extensions": {
"websocket-driver": {
"workbox-background-sync": {
"workbox-cache-expiration": {
"workbox-broadcast-cache-update": {
"workbox-cacheable-response": {
"workbox-google-analytics": {
"workbox-navigation-preload": {
"workbox-strategies": {
"workbox-range-requests": {
"workbox-precaching": {
"workbox-webpack-plugin": {
"write-file-atomic": {
"xml-name-validator": {
"is-fullwidth-code-point": {
"@babel/code-frame": "^7.0.0",
"@babel/highlight": "^7.0.0"
"@babel/code-frame": {
"@babel/generator": "^7.0.0",
"@babel/parser": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/helpers": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/generator": {
"@babel/types": "^7.3.0",
"@babel/types": "^7.0.0",
"@babel/helper-annotate-as-pure": {
"@babel/types": "^7.0.0"
"@babel/helper-builder-react-jsx": {
"@babel/types": "^7.0.0"
"@babel/helper-explode-assignable-expression": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.3.0",
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/helper-call-delegate": {
"@babel/types": "^7.0.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-define-map": {
"@babel/types": "^7.0.0",
"@babel/traverse": "^7.1.0",
"@babel/helper-explode-assignable-expression": {
"@babel/types": "^7.0.0"
"@babel/helper-function-name": {
"@babel/template": "^7.1.0",
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/helper-get-function-arity": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-member-expression-to-functions": {
"@babel/types": "^7.0.0"
"@babel/types": "^7.0.0"
"@babel/helper-hoist-variables": {
"@babel/helper-module-imports": {
"@babel/types": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-module-transforms": {
"@babel/helper-simple-access": "^7.1.0",
"@babel/types": "^7.2.2",
"@babel/template": "^7.2.2",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": {
"@babel/helper-optimise-call-expression": {
"@babel/types": "^7.0.0"
"@babel/helper-regex": {
"@babel/helper-remap-async-to-generator": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-wrap-function": "^7.1.0",
"@babel/template": "^7.1.0",
"@babel/traverse": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-replace-supers": {
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/types": "^7.0.0"
"@babel/traverse": "^7.2.3",
"@babel/helper-simple-access": {
"@babel/template": "^7.1.0",
"@babel/types": "^7.0.0"
"@babel/helper-split-export-declaration": {
"@babel/types": "^7.0.0"
"@babel/helper-wrap-function": {
"@babel/template": "^7.1.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.2.0"
"@babel/traverse": "^7.1.0",
"@babel/template": "^7.1.2",
"@babel/traverse": "^7.1.5",
"@babel/plugin-proposal-async-generator-functions": {
"@babel/highlight": {
"@babel/types": "^7.3.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-class-properties": {
"@babel/helper-remap-async-to-generator": "^7.1.0",
"@babel/plugin-syntax-async-generators": "^7.2.0"
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-member-expression-to-functions": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-syntax-class-properties": "^7.0.0"
"@babel/plugin-proposal-decorators": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-syntax-decorators": "^7.1.0"
"@babel/plugin-syntax-json-strings": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/plugin-proposal-json-strings": {
"@babel/plugin-syntax-object-rest-spread": "^7.2.0"
"@babel/plugin-proposal-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-async-generators": {
"@babel/helper-regex": "^7.0.0",
"@babel/plugin-syntax-class-properties": {
"@babel/plugin-syntax-decorators": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-dynamic-import": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-json-strings": {
"@babel/plugin-syntax-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-jsx": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-optional-catch-binding": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-typescript": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-async-to-generator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-arrow-functions": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-remap-async-to-generator": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-block-scoping": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-classes": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-replace-supers": "^7.1.0",
"@babel/plugin-transform-computed-properties": {
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-destructuring": {
"@babel/plugin-transform-dotall-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-exponentiation-operator": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-syntax-flow": "^7.0.0"
"@babel/plugin-transform-for-of": {
"@babel/plugin-transform-flow-strip-types": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-function-name": {
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-literals": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-amd": {
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-modules-commonjs": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-module-transforms": "^7.1.0",
"@babel/helper-simple-access": "^7.1.0"
"@babel/helper-hoist-variables": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-transforms": "^7.1.0",
"@babel/plugin-transform-modules-umd": {
"@babel/plugin-transform-named-capturing-groups-regex": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-new-target": {
"@babel/plugin-transform-object-super": {
"@babel/helper-replace-supers": "^7.1.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-parameters": {
"@babel/helper-get-function-arity": "^7.0.0",
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-call-delegate": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-jsx": {
"@babel/helper-builder-react-jsx": "^7.3.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-react-jsx-self": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/plugin-transform-react-jsx-source": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-regenerator": {
"@babel/plugin-transform-runtime": {
"@babel/plugin-syntax-jsx": "^7.2.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-transform-shorthand-properties": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-spread": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-sticky-regex": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-regex": "^7.0.0"
"@babel/plugin-transform-template-literals": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-typeof-symbol": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": {
"@babel/plugin-syntax-typescript": "^7.2.0"
"@babel/plugin-transform-unicode-regex": {
"@babel/helper-regex": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/preset-env": {
"@babel/helper-module-imports": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.2.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.3.1",
"@babel/plugin-proposal-optional-catch-binding": "^7.2.0",
"@babel/plugin-syntax-async-generators": "^7.2.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.2.0",
"@babel/plugin-syntax-json-strings": "^7.2.0",
"@babel/plugin-syntax-object-rest-spread": "^7.2.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
"@babel/plugin-transform-arrow-functions": "^7.2.0",
"@babel/plugin-transform-async-to-generator": "^7.2.0",
"@babel/plugin-transform-block-scoped-functions": "^7.2.0",
"@babel/plugin-transform-block-scoping": "^7.2.0",
"@babel/plugin-transform-classes": "^7.2.0",
"@babel/plugin-transform-computed-properties": "^7.2.0",
"@babel/plugin-transform-destructuring": "^7.2.0",
"@babel/plugin-transform-dotall-regex": "^7.2.0",
"@babel/plugin-transform-duplicate-keys": "^7.2.0",
"@babel/plugin-transform-for-of": "^7.2.0",
"@babel/plugin-transform-function-name": "^7.2.0",
"@babel/plugin-transform-literals": "^7.2.0",
"@babel/plugin-transform-modules-amd": "^7.2.0",
"@babel/plugin-transform-modules-commonjs": "^7.2.0",
"@babel/plugin-transform-modules-systemjs": "^7.2.0",
"@babel/plugin-transform-modules-umd": "^7.2.0",
"@babel/plugin-transform-parameters": "^7.2.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-object-super": "^7.2.0",
"@babel/plugin-transform-shorthand-properties": "^7.2.0",
"@babel/plugin-transform-sticky-regex": "^7.2.0",
"@babel/plugin-transform-template-literals": "^7.2.0",
"@babel/plugin-transform-spread": "^7.2.0",
"@babel/plugin-transform-typeof-symbol": "^7.2.0",
"@babel/plugin-transform-unicode-regex": "^7.2.0",
"@babel/preset-react": {
"@babel/plugin-transform-react-display-name": "^7.0.0",
"@babel/plugin-transform-react-jsx": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-react-jsx-self": "^7.0.0",
"@babel/plugin-transform-react-jsx-source": "^7.0.0"
"@babel/preset-typescript": {
"regenerator-runtime": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-transform-typescript": "^7.1.0"
"@babel/code-frame": "^7.0.0",
"@babel/parser": "^7.2.2",
"@babel/types": "^7.2.2"
"@babel/code-frame": "^7.0.0",
"@babel/generator": "^7.2.2",
"@babel/helper-function-name": "^7.1.0",
"@babel/types": "^7.2.2",
"@babel/parser": "^7.2.3",
"@babel/helper-split-export-declaration": "^7.0.0",
"@csstools/convert-colors": {
"@nodelib/fs.stat": {
"@mrmlnc/readdir-enhanced": {
"@babel/core": "^7.0.1",
"@babel/preset-env": "^7.0.0",
"@webassemblyjs/helper-module-context": "1.7.6",
"@babel/preset-react": "^7.0.0",
"@svgr/core": "^2.4.1",
"@webassemblyjs/ast": {
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/wast-parser": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": {
"@webassemblyjs/helper-api-error": {
"@webassemblyjs/helper-buffer": {
"@webassemblyjs/helper-code-frame": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/helper-fsm": {
"@webassemblyjs/helper-module-context": {
"@webassemblyjs/helper-wasm-bytecode": {
"@webassemblyjs/helper-wasm-section": {
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/ieee754": {
"@webassemblyjs/wasm-gen": "1.7.6"
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@xtuc/ieee754": "^1.2.0"
"@webassemblyjs/leb128": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/wasm-edit": {
"@webassemblyjs/utf8": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/helper-wasm-section": "1.7.6",
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-opt": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"@webassemblyjs/wasm-gen": {
"@webassemblyjs/wast-printer": "1.7.6"
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/wasm-opt": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-buffer": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6"
"@webassemblyjs/wasm-gen": "1.7.6",
"@webassemblyjs/wasm-parser": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-wasm-bytecode": "1.7.6",
"@webassemblyjs/ieee754": "1.7.6",
"@webassemblyjs/leb128": "1.7.6",
"@webassemblyjs/utf8": "1.7.6"
"@webassemblyjs/wast-parser": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/floating-point-hex-parser": "1.7.6",
"@webassemblyjs/helper-code-frame": "1.7.6",
"@webassemblyjs/helper-api-error": "1.7.6",
"@webassemblyjs/helper-fsm": "1.7.6",
"@xtuc/long": "4.2.1",
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/wast-printer": {
"@xtuc/long": "4.2.1"
"@webassemblyjs/wast-parser": "1.7.6",
"acorn-dynamic-import": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"append-transform": {
"is-data-descriptor": {
"babel-code-frame": {
"@babel/parser": "^7.0.0",
"@babel/code-frame": "^7.0.0",
"@babel/traverse": "^7.0.0",
"@babel/types": "^7.0.0",
"babel-plugin-dynamic-import-node": {
"babel-extract-comments": {
"babel-plugin-istanbul": {
"babel-plugin-jest-hoist": {
"babel-plugin-macros": {
"babel-plugin-named-asset-import": {
"babel-plugin-syntax-object-rest-spread": {
"babel-plugin-transform-object-rest-spread": {
"babel-preset-jest": {
"babel-plugin-transform-react-remove-prop-types": {
"babel-preset-react-app": {
"@babel/core": "7.1.0",
"@babel/plugin-proposal-class-properties": "7.1.0",
"@babel/plugin-proposal-object-rest-spread": "7.0.0",
"@babel/plugin-proposal-decorators": "7.1.2",
"@babel/plugin-syntax-dynamic-import": "7.0.0",
"@babel/plugin-transform-classes": "7.1.0",
"@babel/plugin-transform-flow-strip-types": "7.0.0",
"@babel/plugin-transform-destructuring": "7.0.0",
"@babel/plugin-transform-react-constant-elements": "7.0.0",
"@babel/plugin-transform-react-display-name": "7.0.0",
"@babel/preset-env": "7.1.0",
"@babel/plugin-transform-runtime": "7.1.0",
"@babel/preset-typescript": "7.1.0",
"@babel/preset-react": "7.0.0",
"@babel/runtime": "7.0.0",
"@babel/plugin-proposal-object-rest-spread": {
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0"
"@babel/plugin-transform-classes": {
"@babel/helper-define-map": "^7.1.0",
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-optimise-call-expression": "^7.0.0",
"@babel/helper-function-name": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/helper-split-export-declaration": "^7.0.0",
"@babel/plugin-transform-destructuring": {
"@babel/helper-replace-supers": "^7.1.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-constant-elements": {
"@babel/helper-annotate-as-pure": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/plugin-transform-react-display-name": {
"@babel/preset-env": {
"@babel/helper-plugin-utils": "^7.0.0"
"@babel/helper-module-imports": "^7.0.0",
"@babel/helper-plugin-utils": "^7.0.0",
"@babel/plugin-proposal-object-rest-spread": "^7.0.0",
"@babel/plugin-proposal-json-strings": "^7.0.0",
"@babel/plugin-proposal-unicode-property-regex": "^7.0.0",
"@babel/plugin-proposal-optional-catch-binding": "^7.0.0",
"@babel/plugin-syntax-async-generators": "^7.0.0",
"@babel/plugin-syntax-object-rest-spread": "^7.0.0",
"@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
"@babel/plugin-transform-arrow-functions": "^7.0.0",
"@babel/plugin-transform-async-to-generator": "^7.1.0",
"@babel/plugin-transform-block-scoping": "^7.0.0",
"@babel/plugin-transform-block-scoped-functions": "^7.0.0",
"@babel/plugin-transform-classes": "^7.1.0",
"@babel/plugin-transform-computed-properties": "^7.0.0",
"@babel/plugin-transform-destructuring": "^7.0.0",
"@babel/plugin-transform-duplicate-keys": "^7.0.0",
"@babel/plugin-transform-dotall-regex": "^7.0.0",
"@babel/plugin-transform-for-of": "^7.0.0",
"@babel/plugin-transform-function-name": "^7.1.0",
"@babel/plugin-transform-modules-amd": "^7.1.0",
"@babel/plugin-transform-literals": "^7.0.0",
"@babel/plugin-transform-modules-systemjs": "^7.0.0",
"@babel/plugin-transform-modules-commonjs": "^7.1.0",
"@babel/plugin-transform-modules-umd": "^7.1.0",
"@babel/plugin-transform-new-target": "^7.0.0",
"@babel/plugin-transform-parameters": "^7.1.0",
"@babel/plugin-transform-object-super": "^7.1.0",
"@babel/plugin-transform-shorthand-properties": "^7.0.0",
"@babel/plugin-transform-regenerator": "^7.0.0",
"@babel/plugin-transform-spread": "^7.0.0",
"@babel/plugin-transform-sticky-regex": "^7.0.0",
"@babel/plugin-transform-template-literals": "^7.0.0",
"@babel/plugin-transform-typeof-symbol": "^7.0.0",
"to-fast-properties": {
"@babel/plugin-transform-unicode-regex": "^7.0.0",
"is-accessor-descriptor": {
"is-data-descriptor": {
"browser-process-hrtime": {
"binary-extensions": {
"browserify-cipher": {
"builtin-status-codes": {
"case-sensitive-paths-webpack-plugin": {
"chrome-trace-event": {
"@types/q": "^1.5.1",
"collection-visit": {
"confusing-browser-globals": {
"connect-history-api-fallback": {
"component-emitter": {
"console-browserify": {
"constants-browserify": {
"convert-source-map": {
"content-disposition": {
"cookie-signature": {
"copy-concurrently": {
"crypto-browserify": {
"css-declaration-sorter": {
"css-selector-tokenizer": {
"css-select-base-adapter": {
"css-unit-converter": {
"cssnano-util-get-arguments": {
"cssnano-preset-default": {
"cssnano-util-get-match": {
"cssnano-util-raw-cache": {
"cssnano-util-same-parent": {
"damerau-levenshtein": {
"decode-uri-component": {
"default-require-extensions": {
"define-properties": {
"is-accessor-descriptor": {
"electron-to-chromium": {
"is-data-descriptor": {
"enhanced-resolve": {
"escape-string-regexp": {
"eslint-import-resolver-node": {
"eslint-config-react-app": {
"@babel/code-frame": "^7.0.0",
"eslint-module-utils": {
"eslint-plugin-flowtype": {
"eslint-plugin-jsx-a11y": {
"eslint-plugin-import": {
"eslint-plugin-react": {
"eslint-visitor-keys": {
"@mrmlnc/readdir-enhanced": "^2.2.1",
"@nodelib/fs.stat": "^1.1.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"fast-json-stable-stringify": {
"fast-levenshtein": {
"file-entry-cache": {
"fork-ts-checker-webpack-plugin-alt": {
"flush-write-stream": {
"follow-redirects": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"fs-write-stream-atomic": {
"are-we-there-yet": {
"console-control-strings": {
"is-fullwidth-code-point": {
"path-is-absolute": {
"process-nextick-args": {
"functional-red-black-tree": {
"get-own-enumerable-property-symbols": {
"strip-json-comments": {
"homedir-polyfill": {
"html-comment-regex": {
"html-encoding-sniffer": {
"html-webpack-plugin": {
"@types/tapable": "1.0.2",
"is-accessor-descriptor": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"icss-replace-symbols": {
"is-data-descriptor": {
"identity-obj-proxy": {
"is-accessor-descriptor": {
"is-builtin-module": {
"is-data-descriptor": {
"is-equal-shallow": {
"is-fullwidth-code-point": {
"is-posix-bracket": {
"istanbul-lib-coverage": {
"istanbul-lib-hook": {
"istanbul-lib-report": {
"istanbul-lib-source-maps": {
"istanbul-lib-instrument": {
"istanbul-reports": {
"jest-changed-files": {
"jest-environment-jsdom": {
"jest-environment-node": {
"jest-message-util": {
"jest-matcher-utils": {
"jest-leak-detector": {
"@babel/code-frame": "^7.0.0-beta.35",
"jest-pnp-resolver": {
"jest-resolve-dependencies": {
"source-map-support": {
"json-parse-better-errors": {
"json-schema-traverse": {
"json-stable-stringify": {
"json-stable-stringify-without-jsonify": {
"json-stringify-safe": {
"last-call-webpack-plugin": {
"lodash.camelcase": {
"lodash._reinterpolate": {
"lodash.templatesettings": {
"merge-descriptors": {
"mini-css-extract-plugin": {
"minimalistic-assert": {
"minimalistic-crypto-utils": {
"move-concurrently": {
"multicast-dns-service-types": {
"normalize-package-data": {
"node-libs-browser": {
"optimize-css-assets-webpack-plugin": {
"object.getownpropertydescriptors": {
"parallel-transform": {
"path-is-absolute": {
"posix-character-classes": {
"pnp-webpack-plugin": {
"postcss-attribute-case-insensitive": {
"postcss-color-functional-notation": {
"postcss-color-hex-alpha": {
"postcss-color-mod-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-color-rebeccapurple": {
"postcss-convert-values": {
"postcss-colormin": {
"postcss-custom-media": {
"postcss-dir-pseudo-class": {
"postcss-custom-properties": {
"postcss-custom-selectors": {
"postcss-discard-comments": {
"postcss-discard-empty": {
"postcss-discard-duplicates": {
"postcss-env-function": {
"postcss-discard-overridden": {
"postcss-flexbugs-fixes": {
"postcss-focus-within": {
"postcss-focus-visible": {
"postcss-font-variant": {
"postcss-gap-properties": {
"postcss-lab-function": {
"postcss-image-set-function": {
"@csstools/convert-colors": "^1.4.0",
"postcss-load-config": {
"postcss-media-minmax": {
"postcss-merge-longhand": {
"postcss-minify-font-values": {
"postcss-merge-rules": {
"postcss-selector-parser": {
"postcss-minify-params": {
"postcss-minify-gradients": {
"postcss-modules-extract-imports": {
"postcss-minify-selectors": {
"postcss-selector-parser": {
"postcss-modules-local-by-default": {
"postcss-modules-scope": {
"postcss-modules-values": {
"postcss-normalize-charset": {
"postcss-normalize-display-values": {
"postcss-normalize-positions": {
"postcss-normalize-repeat-style": {
"postcss-normalize-string": {
"postcss-normalize-timing-functions": {
"postcss-normalize-unicode": {
"postcss-normalize-whitespace": {
"postcss-normalize-url": {
"postcss-overflow-shorthand": {
"postcss-ordered-values": {
"postcss-page-break": {
"postcss-pseudo-class-any-link": {
"postcss-preset-env": {
"postcss-reduce-initial": {
"postcss-reduce-transforms": {
"postcss-replace-overflow-wrap": {
"postcss-safe-parser": {
"postcss-selector-matches": {
"postcss-selector-not": {
"postcss-selector-parser": {
"postcss-unique-selectors": {
"postcss-values-parser": {
"process-nextick-args": {
"postcss-value-parser": {
"promise-inflight": {
"react-app-polyfill": {
"@babel/code-frame": "7.0.0",
"react-error-overlay": {
"@babel/core": "7.1.0",
"is-accessor-descriptor": {
"@svgr/webpack": "2.4.1",
"is-data-descriptor": {
"is-accessor-descriptor": {
"recursive-readdir": {
"is-data-descriptor": {
"regenerate-unicode-properties": {
"request-promise-core": {
"regenerator-transform": {
"remove-trailing-separator": {
"regenerator-runtime": {
"request-promise-native": {
"require-from-string": {
"require-directory": {
"require-main-filename": {
"require-uncached": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"serialize-javascript": {
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"source-map-resolve": {
"source-map-support": {
"spdx-expression-parse": {
"stream-browserify": {
"spdx-license-ids": {
"stealthy-require": {
"stringify-object": {
"postcss-selector-parser": {
"strip-json-comments": {
"source-map-support": {
"uglifyjs-webpack-plugin": {
"terser-webpack-plugin": {
"timers-browserify": {
"to-fast-properties": {
"unicode-canonical-property-names-ecmascript": {
"unicode-match-property-value-ecmascript": {
"unicode-match-property-ecmascript": {
"unicode-property-aliases-ecmascript": {
"validate-npm-package-license": {
"w3c-xmlserializer": {
"webidl-conversions": {
"@webassemblyjs/ast": "1.7.6",
"@webassemblyjs/helper-module-context": "1.7.6",
"@webassemblyjs/wasm-edit": "1.7.6",
"@webassemblyjs/wasm-parser": "1.7.6",
"is-data-descriptor": {
"is-accessor-descriptor": {
"is-accessor-descriptor": {
"is-data-descriptor": {
"webpack-dev-middleware": {
"webpack-dev-server": {
"webpack-manifest-plugin": {
"websocket-driver": {
"websocket-extensions": {
"workbox-background-sync": {
"workbox-broadcast-cache-update": {
"workbox-cache-expiration": {
"workbox-cacheable-response": {
"workbox-google-analytics": {
"workbox-precaching": {
"workbox-navigation-preload": {
"workbox-range-requests": {
"workbox-strategies": {
"workbox-webpack-plugin": {
"is-fullwidth-code-point": {
"write-file-atomic": {
"xml-name-validator": {
